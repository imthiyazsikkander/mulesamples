{
	"swagger": "2.0",
	"info": {
		"version": "v1",
		"title": "Advantage.Rest.Services"
	},
	"host": "acssandbox2.mms.org",
	"basePath": "/advantage-api-MMS-AD",
	"schemes": [
		"https"
	],
	"paths": {
		"/acs/clients": {
			"get": {
				"tags": [
					"Acs"
				],
				"summary": "Get all active clients.",
				"operationId": "Acs_GetClients",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Client"
							}
						}
					}
				}
			}
		},
		"/acs/clients/{customerNumber}": {
			"get": {
				"tags": [
					"Acs"
				],
				"summary": "Gets client information given",
				"operationId": "Acs_GetClient",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The customer number of the client",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Client"
						}
					}
				}
			}
		},
		"/acs/clients/by-abbreviation/{clientAbbreviation}": {
			"get": {
				"tags": [
					"Acs"
				],
				"summary": "Gets client information given",
				"operationId": "Acs_GetClientByAbbreviation",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "clientAbbreviation",
						"in": "path",
						"description": "The client abbreviation",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Client"
						}
					}
				}
			}
		},
		"/acs/clients/{customerNumber}/areas": {
			"get": {
				"tags": [
					"Acs"
				],
				"summary": "Get all areas for a client.",
				"operationId": "Acs_GetClientAreas",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The customer number of the client",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/ClientArea"
							}
						}
					}
				}
			}
		},
		"/acs/clients/{customerNumber}/areas/{areaCode}": {
			"get": {
				"tags": [
					"Acs"
				],
				"summary": "Get an area for a client.",
				"operationId": "Acs_GetClientArea",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The customer number of the client",
						"required": true,
						"type": "string"
					},
					{
						"name": "areaCode",
						"in": "path",
						"description": "The code that identifies a client area",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ClientArea"
						}
					}
				}
			}
		},
		"/acs/clients/{customerNumber}/contacts": {
			"get": {
				"tags": [
					"Acs"
				],
				"summary": "Get all contact people for a client.",
				"operationId": "Acs_GetClientContacts",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The customer number of the client",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/ClientContact"
							}
						}
					}
				}
			}
		},
		"/acs/clients/{customerNumber}/contacts/{contactNumber}": {
			"get": {
				"tags": [
					"Acs"
				],
				"summary": "Get information about a client contact person.",
				"operationId": "Acs_GetClientContact",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The customer number of the client",
						"required": true,
						"type": "string"
					},
					{
						"name": "contactNumber",
						"in": "path",
						"description": "The customer number of the contact person",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ClientContact"
						}
					}
				}
			}
		},
		"/acs/clients/{customerNumber}/jobs": {
			"get": {
				"tags": [
					"Acs"
				],
				"summary": "Get all jobs for a client.",
				"operationId": "Acs_GetClientJobs",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The customer number of the client",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/ClientJob"
							}
						}
					}
				}
			}
		},
		"/acs/clients/{customerNumber}/jobs/{jobCode}": {
			"get": {
				"tags": [
					"Acs"
				],
				"summary": "Get a job for a client.",
				"operationId": "Acs_GetClientJob",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The customer number of the client",
						"required": true,
						"type": "string"
					},
					{
						"name": "jobCode",
						"in": "path",
						"description": "The code that identifies a client job",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ClientJob"
						}
					}
				}
			}
		},
		"/acs/support-logs": {
			"get": {
				"tags": [
					"Acs"
				],
				"summary": "Get information for client support logs matching a search argument.",
				"operationId": "Acs_SearchSupportLogs",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "ActivityCategory",
						"in": "query",
						"description": "Filter on ATV-CAT using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode",
						"in": "query",
						"description": "Filter on CSL-ANT using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode",
						"in": "query",
						"description": "Filter on CSL-ENG using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification",
						"in": "query",
						"description": "Filter on MOD-FLG using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode",
						"in": "query",
						"description": "Filter on CSL-JOB using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode",
						"in": "query",
						"description": "Filter on CSL-STA using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ActivityCategory.NotEqual",
						"in": "query",
						"description": "Filter on ATV-CAT using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ActivityCategory.Less",
						"in": "query",
						"description": "Filter on ATV-CAT using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ActivityCategory.LessOrEqual",
						"in": "query",
						"description": "Filter on ATV-CAT using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ActivityCategory.Greater",
						"in": "query",
						"description": "Filter on ATV-CAT using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ActivityCategory.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ATV-CAT using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ActivityCategory.IsNull",
						"in": "query",
						"description": "Filter on ATV-CAT using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ActivityCategory.IsNotNull",
						"in": "query",
						"description": "Filter on ATV-CAT using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ActivityCategory.Like",
						"in": "query",
						"description": "Filter on ATV-CAT using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ActivityCategory.NotLike",
						"in": "query",
						"description": "Filter on ATV-CAT using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ActivityCategory.Contains",
						"in": "query",
						"description": "Filter on ATV-CAT using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ActivityCategory.NotContains",
						"in": "query",
						"description": "Filter on ATV-CAT using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ActivityCategory.StartsWith",
						"in": "query",
						"description": "Filter on ATV-CAT using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ActivityCategory.NotStartsWith",
						"in": "query",
						"description": "Filter on ATV-CAT using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ActivityCategory.EndsWith",
						"in": "query",
						"description": "Filter on ATV-CAT using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ActivityCategory.NotEndsWith",
						"in": "query",
						"description": "Filter on ATV-CAT using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ActivityCategory.In",
						"in": "query",
						"description": "Filter on ATV-CAT using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ActivityCategory.Between",
						"in": "query",
						"description": "Filter on ATV-CAT using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode.NotEqual",
						"in": "query",
						"description": "Filter on CSL-ANT using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode.Less",
						"in": "query",
						"description": "Filter on CSL-ANT using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode.LessOrEqual",
						"in": "query",
						"description": "Filter on CSL-ANT using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode.Greater",
						"in": "query",
						"description": "Filter on CSL-ANT using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CSL-ANT using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode.IsNull",
						"in": "query",
						"description": "Filter on CSL-ANT using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode.IsNotNull",
						"in": "query",
						"description": "Filter on CSL-ANT using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode.Like",
						"in": "query",
						"description": "Filter on CSL-ANT using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode.NotLike",
						"in": "query",
						"description": "Filter on CSL-ANT using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode.Contains",
						"in": "query",
						"description": "Filter on CSL-ANT using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode.NotContains",
						"in": "query",
						"description": "Filter on CSL-ANT using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode.StartsWith",
						"in": "query",
						"description": "Filter on CSL-ANT using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode.NotStartsWith",
						"in": "query",
						"description": "Filter on CSL-ANT using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode.EndsWith",
						"in": "query",
						"description": "Filter on CSL-ANT using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode.NotEndsWith",
						"in": "query",
						"description": "Filter on CSL-ANT using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode.In",
						"in": "query",
						"description": "Filter on CSL-ANT using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AnalystCode.Between",
						"in": "query",
						"description": "Filter on CSL-ANT using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate.NotEqual",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate.Less",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate.LessOrEqual",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate.Greater",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate.IsNull",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate.IsNotNull",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate.Like",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate.NotLike",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate.Contains",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate.NotContains",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate.StartsWith",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate.NotStartsWith",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate.EndsWith",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate.NotEndsWith",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate.In",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreationDate.Between",
						"in": "query",
						"description": "Filter on CNTC-DTE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber.NotEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber.Less",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber.Greater",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber.IsNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber.Like",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber.NotLike",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber.Contains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber.NotContains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber.StartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber.EndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber.In",
						"in": "query",
						"description": "Filter on CTM-NBR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ClientNumber.Between",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode.NotEqual",
						"in": "query",
						"description": "Filter on CSL-ENG using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode.Less",
						"in": "query",
						"description": "Filter on CSL-ENG using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode.LessOrEqual",
						"in": "query",
						"description": "Filter on CSL-ENG using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode.Greater",
						"in": "query",
						"description": "Filter on CSL-ENG using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CSL-ENG using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode.IsNull",
						"in": "query",
						"description": "Filter on CSL-ENG using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode.IsNotNull",
						"in": "query",
						"description": "Filter on CSL-ENG using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode.Like",
						"in": "query",
						"description": "Filter on CSL-ENG using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode.NotLike",
						"in": "query",
						"description": "Filter on CSL-ENG using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode.Contains",
						"in": "query",
						"description": "Filter on CSL-ENG using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode.NotContains",
						"in": "query",
						"description": "Filter on CSL-ENG using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode.StartsWith",
						"in": "query",
						"description": "Filter on CSL-ENG using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode.NotStartsWith",
						"in": "query",
						"description": "Filter on CSL-ENG using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode.EndsWith",
						"in": "query",
						"description": "Filter on CSL-ENG using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode.NotEndsWith",
						"in": "query",
						"description": "Filter on CSL-ENG using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode.In",
						"in": "query",
						"description": "Filter on CSL-ENG using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EngineerCode.Between",
						"in": "query",
						"description": "Filter on CSL-ENG using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification.NotEqual",
						"in": "query",
						"description": "Filter on MOD-FLG using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification.Less",
						"in": "query",
						"description": "Filter on MOD-FLG using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification.LessOrEqual",
						"in": "query",
						"description": "Filter on MOD-FLG using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification.Greater",
						"in": "query",
						"description": "Filter on MOD-FLG using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification.GreaterOrEqual",
						"in": "query",
						"description": "Filter on MOD-FLG using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification.IsNull",
						"in": "query",
						"description": "Filter on MOD-FLG using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification.IsNotNull",
						"in": "query",
						"description": "Filter on MOD-FLG using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification.Like",
						"in": "query",
						"description": "Filter on MOD-FLG using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification.NotLike",
						"in": "query",
						"description": "Filter on MOD-FLG using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification.Contains",
						"in": "query",
						"description": "Filter on MOD-FLG using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification.NotContains",
						"in": "query",
						"description": "Filter on MOD-FLG using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification.StartsWith",
						"in": "query",
						"description": "Filter on MOD-FLG using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification.NotStartsWith",
						"in": "query",
						"description": "Filter on MOD-FLG using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification.EndsWith",
						"in": "query",
						"description": "Filter on MOD-FLG using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification.NotEndsWith",
						"in": "query",
						"description": "Filter on MOD-FLG using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification.In",
						"in": "query",
						"description": "Filter on MOD-FLG using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsModification.Between",
						"in": "query",
						"description": "Filter on MOD-FLG using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode.NotEqual",
						"in": "query",
						"description": "Filter on CSL-JOB using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode.Less",
						"in": "query",
						"description": "Filter on CSL-JOB using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode.LessOrEqual",
						"in": "query",
						"description": "Filter on CSL-JOB using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode.Greater",
						"in": "query",
						"description": "Filter on CSL-JOB using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CSL-JOB using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode.IsNull",
						"in": "query",
						"description": "Filter on CSL-JOB using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode.IsNotNull",
						"in": "query",
						"description": "Filter on CSL-JOB using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode.Like",
						"in": "query",
						"description": "Filter on CSL-JOB using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode.NotLike",
						"in": "query",
						"description": "Filter on CSL-JOB using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode.Contains",
						"in": "query",
						"description": "Filter on CSL-JOB using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode.NotContains",
						"in": "query",
						"description": "Filter on CSL-JOB using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode.StartsWith",
						"in": "query",
						"description": "Filter on CSL-JOB using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode.NotStartsWith",
						"in": "query",
						"description": "Filter on CSL-JOB using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode.EndsWith",
						"in": "query",
						"description": "Filter on CSL-JOB using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode.NotEndsWith",
						"in": "query",
						"description": "Filter on CSL-JOB using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode.In",
						"in": "query",
						"description": "Filter on CSL-JOB using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobCode.Between",
						"in": "query",
						"description": "Filter on CSL-JOB using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode.NotEqual",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode.Less",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode.LessOrEqual",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode.Greater",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode.IsNull",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode.IsNotNull",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode.Like",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode.NotLike",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode.Contains",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode.NotContains",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode.StartsWith",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode.NotStartsWith",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode.EndsWith",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode.NotEndsWith",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode.In",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LeadEngineerCode.Between",
						"in": "query",
						"description": "Filter on LEAD-ENG using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode.NotEqual",
						"in": "query",
						"description": "Filter on CSL-STA using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode.Less",
						"in": "query",
						"description": "Filter on CSL-STA using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode.LessOrEqual",
						"in": "query",
						"description": "Filter on CSL-STA using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode.Greater",
						"in": "query",
						"description": "Filter on CSL-STA using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CSL-STA using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode.IsNull",
						"in": "query",
						"description": "Filter on CSL-STA using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode.IsNotNull",
						"in": "query",
						"description": "Filter on CSL-STA using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode.Like",
						"in": "query",
						"description": "Filter on CSL-STA using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode.NotLike",
						"in": "query",
						"description": "Filter on CSL-STA using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode.Contains",
						"in": "query",
						"description": "Filter on CSL-STA using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode.NotContains",
						"in": "query",
						"description": "Filter on CSL-STA using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode.StartsWith",
						"in": "query",
						"description": "Filter on CSL-STA using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode.NotStartsWith",
						"in": "query",
						"description": "Filter on CSL-STA using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode.EndsWith",
						"in": "query",
						"description": "Filter on CSL-STA using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode.NotEndsWith",
						"in": "query",
						"description": "Filter on CSL-STA using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode.In",
						"in": "query",
						"description": "Filter on CSL-STA using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StatusCode.Between",
						"in": "query",
						"description": "Filter on CSL-STA using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate.NotEqual",
						"in": "query",
						"description": "Filter on UPD-DTE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate.Less",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate.LessOrEqual",
						"in": "query",
						"description": "Filter on UPD-DTE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate.Greater",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate.GreaterOrEqual",
						"in": "query",
						"description": "Filter on UPD-DTE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate.IsNull",
						"in": "query",
						"description": "Filter on UPD-DTE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate.IsNotNull",
						"in": "query",
						"description": "Filter on UPD-DTE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate.Like",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate.NotLike",
						"in": "query",
						"description": "Filter on UPD-DTE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate.Contains",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate.NotContains",
						"in": "query",
						"description": "Filter on UPD-DTE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate.StartsWith",
						"in": "query",
						"description": "Filter on UPD-DTE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate.NotStartsWith",
						"in": "query",
						"description": "Filter on UPD-DTE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate.EndsWith",
						"in": "query",
						"description": "Filter on UPD-DTE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate.NotEndsWith",
						"in": "query",
						"description": "Filter on UPD-DTE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate.In",
						"in": "query",
						"description": "Filter on UPD-DTE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UpdateDate.Between",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Between' operator",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[SupportLog]"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Acs"
				],
				"summary": "Creates a new client support log",
				"operationId": "Acs_CreateSupportLog",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "supportLogCreateRequest",
						"in": "body",
						"description": "A SupportLogCreateRequest object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SupportLogCreateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SupportLogCreateResponse"
						}
					}
				}
			}
		},
		"/acs/support-logs/{cslNumber}": {
			"get": {
				"tags": [
					"Acs"
				],
				"summary": "Gets information about a client support log",
				"operationId": "Acs_GetSupportLog",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "cslNumber",
						"in": "path",
						"description": "The client support log number",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SupportLog"
						}
					}
				}
			}
		},
		"/acs/support-logs/{cslNumber}/comments": {
			"get": {
				"tags": [
					"Acs"
				],
				"summary": "Get all comments for a client support log",
				"operationId": "Acs_GetSupportLogComments",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "cslNumber",
						"in": "path",
						"description": "The client support log (CSL) number",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/SupportLogComment"
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Acs"
				],
				"summary": "Creates a new CSL comment",
				"operationId": "Acs_CreateSupportLogComment",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "cslNumber",
						"in": "path",
						"description": "CSL number of the support log to add a comment to",
						"required": true,
						"type": "string"
					},
					{
						"name": "supportLogCommentCreateRequest",
						"in": "body",
						"description": "A SupportLogCommentCreateRequest object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SupportLogCommentCreateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SupportLogCommentCreateResponse"
						}
					}
				}
			}
		},
		"/advantage-users/{username}/settings/{settingName1}/{settingName2}/{settingName3}": {
			"get": {
				"tags": [
					"AdvantageUser"
				],
				"summary": "Get a user setting from an Advantage User",
				"operationId": "AdvantageUser_GetSetting",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "The username to find.",
						"required": true,
						"type": "string"
					},
					{
						"name": "settingName1",
						"in": "path",
						"description": "The first of a possibly three part setting identifier.",
						"required": true,
						"type": "string"
					},
					{
						"name": "settingName2",
						"in": "path",
						"description": "The second of a possibly three part setting identifier.",
						"required": true,
						"type": "string"
					},
					{
						"name": "settingName3",
						"in": "path",
						"description": "The third of a possibly three part setting identifier.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/GetUserSettingResponse"
						}
					}
				}
			}
		},
		"/advantage-users/{username}/settings": {
			"post": {
				"tags": [
					"AdvantageUser"
				],
				"summary": "Set an existing user setting for an Advantage User, or create a new one if the setting doesn't already exist.",
				"operationId": "AdvantageUser_SetSetting",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "The user to set the setting for",
						"required": true,
						"type": "string"
					},
					{
						"name": "setUserSettingRequest",
						"in": "body",
						"description": "An object contianing options to set a user setting",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SetUserSettingRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/agreements/{agreementId}": {
			"get": {
				"tags": [
					"Agreement"
				],
				"summary": "Finds and returns the specified agreement.",
				"operationId": "Agreement_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "agreementId",
						"in": "path",
						"description": "Agreement ID (an Advantage generated 12-digit number used to identify agreements).",
						"required": true,
						"type": "string"
					},
					{
						"name": "asOfDate",
						"in": "query",
						"description": "Find agreement terms that would be active on this date. If unset, the latest term/version is found.",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "agreementTerm",
						"in": "query",
						"description": "Agreement Term",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Agreement"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Agreement"
				],
				"summary": "Update an existing agreement.",
				"operationId": "Agreement_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "agreementId",
						"in": "path",
						"description": "The ID of the agreement to update.",
						"required": true,
						"type": "string"
					},
					{
						"name": "request",
						"in": "body",
						"description": "A AgreementUpdateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AgreementUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Agreement"
						}
					}
				}
			}
		},
		"/agreements": {
			"get": {
				"tags": [
					"Agreement"
				],
				"summary": "Returns all agreements having the specified customerNumber as the bill-to, order-by, or participating customer.",
				"operationId": "Agreement_Search",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "query",
						"description": "The Advantage customer number.",
						"required": true,
						"type": "string"
					},
					{
						"name": "associationMembershipsOnly",
						"in": "query",
						"description": "when true, lists only agreements that are association memberships",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "asOfDate",
						"in": "query",
						"description": "Find agreement term that would be active on this date.",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "BillToCustomerNumber",
						"in": "query",
						"description": "Filter on BIL-CTM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber",
						"in": "query",
						"description": "Filter on ORD-CTM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode",
						"in": "query",
						"description": "Filter on SRV-ID using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotEqual",
						"in": "query",
						"description": "Filter on BIL-CTM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Less",
						"in": "query",
						"description": "Filter on BIL-CTM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on BIL-CTM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Greater",
						"in": "query",
						"description": "Filter on BIL-CTM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on BIL-CTM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.IsNull",
						"in": "query",
						"description": "Filter on BIL-CTM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.IsNotNull",
						"in": "query",
						"description": "Filter on BIL-CTM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Like",
						"in": "query",
						"description": "Filter on BIL-CTM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotLike",
						"in": "query",
						"description": "Filter on BIL-CTM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Contains",
						"in": "query",
						"description": "Filter on BIL-CTM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotContains",
						"in": "query",
						"description": "Filter on BIL-CTM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.StartsWith",
						"in": "query",
						"description": "Filter on BIL-CTM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on BIL-CTM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.EndsWith",
						"in": "query",
						"description": "Filter on BIL-CTM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on BIL-CTM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.In",
						"in": "query",
						"description": "Filter on BIL-CTM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Between",
						"in": "query",
						"description": "Filter on BIL-CTM using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber.NotEqual",
						"in": "query",
						"description": "Filter on ORD-CTM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber.Less",
						"in": "query",
						"description": "Filter on ORD-CTM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on ORD-CTM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber.Greater",
						"in": "query",
						"description": "Filter on ORD-CTM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ORD-CTM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber.IsNull",
						"in": "query",
						"description": "Filter on ORD-CTM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber.IsNotNull",
						"in": "query",
						"description": "Filter on ORD-CTM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber.Like",
						"in": "query",
						"description": "Filter on ORD-CTM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber.NotLike",
						"in": "query",
						"description": "Filter on ORD-CTM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber.Contains",
						"in": "query",
						"description": "Filter on ORD-CTM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber.NotContains",
						"in": "query",
						"description": "Filter on ORD-CTM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber.StartsWith",
						"in": "query",
						"description": "Filter on ORD-CTM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on ORD-CTM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber.EndsWith",
						"in": "query",
						"description": "Filter on ORD-CTM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on ORD-CTM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber.In",
						"in": "query",
						"description": "Filter on ORD-CTM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderByCustomerNumber.Between",
						"in": "query",
						"description": "Filter on ORD-CTM using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber.NotEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber.Less",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber.Greater",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber.IsNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber.Like",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber.NotLike",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber.Contains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber.NotContains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber.StartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber.EndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber.In",
						"in": "query",
						"description": "Filter on CTM-NBR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ParticipantCustomerNumber.Between",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode.NotEqual",
						"in": "query",
						"description": "Filter on SRV-ID using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode.Less",
						"in": "query",
						"description": "Filter on SRV-ID using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode.LessOrEqual",
						"in": "query",
						"description": "Filter on SRV-ID using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode.Greater",
						"in": "query",
						"description": "Filter on SRV-ID using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on SRV-ID using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode.IsNull",
						"in": "query",
						"description": "Filter on SRV-ID using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode.IsNotNull",
						"in": "query",
						"description": "Filter on SRV-ID using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode.Like",
						"in": "query",
						"description": "Filter on SRV-ID using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode.NotLike",
						"in": "query",
						"description": "Filter on SRV-ID using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode.Contains",
						"in": "query",
						"description": "Filter on SRV-ID using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode.NotContains",
						"in": "query",
						"description": "Filter on SRV-ID using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode.StartsWith",
						"in": "query",
						"description": "Filter on SRV-ID using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode.NotStartsWith",
						"in": "query",
						"description": "Filter on SRV-ID using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode.EndsWith",
						"in": "query",
						"description": "Filter on SRV-ID using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode.NotEndsWith",
						"in": "query",
						"description": "Filter on SRV-ID using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode.In",
						"in": "query",
						"description": "Filter on SRV-ID using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AccessServiceCode.Between",
						"in": "query",
						"description": "Filter on SRV-ID using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Less",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.LessOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Greater",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.IsNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.IsNotNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Like",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotLike",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Contains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotContains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.StartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotStartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.EndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotEndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.In",
						"in": "query",
						"description": "Filter on BIL-ORG using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Between",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Between' operator",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Agreement]"
						}
					}
				}
			}
		},
		"/agreements/{agreementId}/renew": {
			"post": {
				"tags": [
					"Agreement"
				],
				"summary": "Finds and renews the specified agreement.",
				"operationId": "Agreement_Renew",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "agreementId",
						"in": "path",
						"description": "Agreement ID (an Advantage generated 12-digit number used to identify agreements).",
						"required": true,
						"type": "string"
					},
					{
						"name": "options",
						"in": "body",
						"description": "Agreement renewal options",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AgreementRenewalOptions"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/OrderResponse"
						}
					}
				}
			}
		},
		"/agreements/{agreementId}/change-association-level": {
			"post": {
				"tags": [
					"Agreement"
				],
				"summary": "Finds and changes the level of an association membership agreement.",
				"operationId": "Agreement_ChangeAssociationMembershipLevel",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "agreementId",
						"in": "path",
						"description": "Agreement ID (an Advantage generated 12-digit number used to identify agreements).",
						"required": true,
						"type": "string"
					},
					{
						"name": "request",
						"in": "body",
						"description": "A AssociationMembershipChangeLevelRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AssociationMembershipChangeLevelRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/OrderResponse"
						}
					}
				}
			}
		},
		"/agreements/{agreementId}/cancel": {
			"post": {
				"tags": [
					"Agreement"
				],
				"summary": "Finds and cancels the specified agreement.",
				"operationId": "Agreement_Cancel",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "agreementId",
						"in": "path",
						"description": "Agreement ID (an Advantage generated 12-digit number used to identify agreements).",
						"required": true,
						"type": "string"
					},
					{
						"name": "cancelAgreementRequest",
						"in": "body",
						"description": "Agreement cancellation request information",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CancelAgreementRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/agreements/{agreementId}/participants": {
			"put": {
				"tags": [
					"Agreement"
				],
				"summary": "Replace the list of participants for the agreement",
				"operationId": "Agreement_ReplaceParticipants",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "agreementId",
						"in": "path",
						"description": "The ID of the agreement to update.",
						"required": true,
						"type": "string"
					},
					{
						"name": "participants",
						"in": "body",
						"description": "The replacement list of participants for the agreement",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/AgreementParticipantIn"
							}
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/agreements/{agreementId}/cancel-credits": {
			"get": {
				"tags": [
					"Agreement"
				],
				"summary": "Finds and calculates the amount of the credit that would be created if the agreement were cancelled.\r\nIf the {cutoffDate} or {cancelQuantity} are not provided, \r\nthen the default values will be used when calculating the cancellation credits.",
				"operationId": "Agreement_GetCancelCreditAmounts",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "agreementId",
						"in": "path",
						"description": "Agreement ID (an Advantage generated 12-digit number used to identify agreements).",
						"required": true,
						"type": "string"
					},
					{
						"name": "cancelFutureTerms",
						"in": "query",
						"description": "Indicates whether to cancel all future terms",
						"required": true,
						"type": "boolean"
					},
					{
						"name": "cutoffDate",
						"in": "query",
						"description": "Date agreement will be cutoff, or no date (01/01/0001) to cancel the full agreement",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "cancelQuantity",
						"in": "query",
						"description": "Quantity of access cancelled",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AgreementCancelCredit"
						}
					}
				}
			}
		},
		"/association-memberships/{associationItemNumber}/directory": {
			"get": {
				"tags": [
					"AssociationMembership"
				],
				"operationId": "AssociationMembership_SearchDirectory",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "associationItemNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.search",
						"in": "query",
						"description": "The generic search argument. (Typically from a search text box).\r\nThis term will be compared to the member's name.",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.structureNodeId",
						"in": "query",
						"description": "The ID of a structure node.\r\nOnly members from this node or a descendant of this node will be returned.",
						"required": false,
						"type": "string"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResultWithCount[AssociationMemberSummary]"
						}
					}
				}
			}
		},
		"/products/{itemNumber}/levels/{associationLevel}": {
			"post": {
				"tags": [
					"AssociationMembership"
				],
				"operationId": "AssociationMembership_UpdateLevel",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "associationLevel",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "levelUpdateRequest",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AssociationLevelUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/association-memberships/discounts/{discountCode}": {
			"get": {
				"tags": [
					"AssociationMembership"
				],
				"operationId": "AssociationMembership_GetAssociationDiscountBenefit",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "discountCode",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AssociationDiscountBenefit"
						}
					}
				}
			},
			"post": {
				"tags": [
					"AssociationMembership"
				],
				"operationId": "AssociationMembership_UpdateDiscount",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "discountCode",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "discountUpdateRequest",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AssociationDiscountUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/association-memberships/benefits/{benefitCode}": {
			"get": {
				"tags": [
					"AssociationMembership"
				],
				"operationId": "AssociationMembership_GetAssociationThirdPartyBenefit",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "benefitCode",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AssociationThirdPartyBenefit"
						}
					}
				}
			},
			"post": {
				"tags": [
					"AssociationMembership"
				],
				"operationId": "AssociationMembership_UpdateBenefit",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "benefitCode",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "benefitUpdateRequest",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AssociationBenefitUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/auth/{authenticationGroup}/username/{username}/{hostCode}": {
			"post": {
				"tags": [
					"Auth"
				],
				"summary": "Gets the authorizations for a customer, validated by username and password.",
				"operationId": "Auth_ByUsername",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "authenticationGroup",
						"in": "path",
						"description": "The Advantage authentication group within which to search.",
						"required": true,
						"type": "string"
					},
					{
						"name": "username",
						"in": "path",
						"description": "The Username (sometimes referred to as a login.)",
						"required": true,
						"type": "string"
					},
					{
						"name": "credentials",
						"in": "body",
						"description": "A LoginCredentials object populated with a password.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/LoginCredentials"
						}
					},
					{
						"name": "hostCode",
						"in": "path",
						"description": "The content host code.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AuthResponse"
						}
					}
				}
			}
		},
		"/auth/{authenticationGroup}/email/{emailAddress}/{hostCode}": {
			"post": {
				"tags": [
					"Auth"
				],
				"summary": "Gets the authorizations for a customer, validated by email and password.",
				"operationId": "Auth_ByEmail",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "authenticationGroup",
						"in": "path",
						"description": "The Advantage authentication group within which to search.",
						"required": true,
						"type": "string"
					},
					{
						"name": "emailAddress",
						"in": "path",
						"description": "The user's Email address.",
						"required": true,
						"type": "string"
					},
					{
						"name": "credentials",
						"in": "body",
						"description": "A LoginCredentials object populated with a password.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/LoginCredentials"
						}
					},
					{
						"name": "hostCode",
						"in": "path",
						"description": "The content host code.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AuthResponse"
						}
					}
				}
			}
		},
		"/auth/{authenticationGroup}/single-sign-on/{hostCode}": {
			"post": {
				"tags": [
					"Auth"
				],
				"summary": "Get the authorizations for a customer, validated by single sign on.",
				"operationId": "Auth_BySingleSignOn",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "authenticationGroup",
						"in": "path",
						"description": "The Advantage authentication group within which to search.",
						"required": true,
						"type": "string"
					},
					{
						"name": "credentials",
						"in": "body",
						"description": "An IdBasedLoginCredentials object populated with a single sign on ID.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IdBasedLoginCredentials"
						}
					},
					{
						"name": "hostCode",
						"in": "path",
						"description": "The content host code.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AuthResponse"
						}
					}
				}
			}
		},
		"/auth/{authenticationGroup}/athens/{hostCode}": {
			"post": {
				"tags": [
					"Auth"
				],
				"summary": "Gets the authorizations for a customer, validated by Athens.",
				"operationId": "Auth_ByAthens",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "authenticationGroup",
						"in": "path",
						"description": "The Advantage authentication group within which to search.",
						"required": true,
						"type": "string"
					},
					{
						"name": "credentials",
						"in": "body",
						"description": "A IdBasedLoginCredentials object populated with an Athens ID.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IdBasedLoginCredentials"
						}
					},
					{
						"name": "hostCode",
						"in": "path",
						"description": "Content host code.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AuthResponse"
						}
					}
				}
			}
		},
		"/auth/{authenticationGroup}/shibboleth/{hostCode}": {
			"post": {
				"tags": [
					"Auth"
				],
				"summary": "Gets the authorizations for a customer, validated by Shibboleth.",
				"operationId": "Auth_ByShibboleth",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "authenticationGroup",
						"in": "path",
						"description": "The Advantage authentication group within which to search.",
						"required": true,
						"type": "string"
					},
					{
						"name": "credentials",
						"in": "body",
						"description": "A IdBasedLoginCredentials object populated with a Shibboleth institution ID code.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IdBasedLoginCredentials"
						}
					},
					{
						"name": "hostCode",
						"in": "path",
						"description": "Content host code.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AuthResponse"
						}
					}
				}
			}
		},
		"/auth/{authenticationGroup}/ip/{hostCode}": {
			"post": {
				"tags": [
					"Auth"
				],
				"summary": "Gets the authorizations for a customer, validated by IP address.",
				"operationId": "Auth_ByIp",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "authenticationGroup",
						"in": "path",
						"description": "The Advantage authentication group within which to search.",
						"required": true,
						"type": "string"
					},
					{
						"name": "credentials",
						"in": "body",
						"description": "An IdBasedLoginCredentials object populated with an IP address.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IdBasedLoginCredentials"
						}
					},
					{
						"name": "hostCode",
						"in": "path",
						"description": "Content host code.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AuthResponse"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/authentications": {
			"get": {
				"tags": [
					"Auth"
				],
				"summary": "Finds and returns authentication information for a given customer number.",
				"operationId": "Auth_GetCustomerAuthentications",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number to find authentication information for.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CustomerAuthentications"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/authentications/authentication-group/{authenticationGroup}": {
			"get": {
				"tags": [
					"Auth"
				],
				"summary": "Finds and returns authentication information for a given customer number.",
				"operationId": "Auth_GetCustomerAuthentications",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number to find authentication information for.",
						"required": true,
						"type": "string"
					},
					{
						"name": "authenticationGroup",
						"in": "path",
						"description": "Authentication group to look for authentication information in.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CustomerAuthentications"
						}
					}
				}
			}
		},
		"/authentication-groups/{authenticationGroupCode}": {
			"get": {
				"tags": [
					"AuthenticationGroup"
				],
				"summary": "Gets Authentication Group.",
				"operationId": "AuthenticationGroup_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "authenticationGroupCode",
						"in": "path",
						"description": "The authentication group code",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AuthenticationGroup"
						}
					}
				}
			},
			"post": {
				"tags": [
					"AuthenticationGroup"
				],
				"summary": "Update an Authentication Group from an AuthenticationGroupUpdateRequest Model",
				"operationId": "AuthenticationGroup_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "authenticationGroupCode",
						"in": "path",
						"description": "Code of Authentication Group to be updated",
						"required": true,
						"type": "string"
					},
					{
						"name": "authenticationGroupUpdateRequest",
						"in": "body",
						"description": "Model to Update Authentication Group",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticationGroupUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AuthenticationGroup"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"AuthenticationGroup"
				],
				"summary": "Removes an Authentication Group",
				"operationId": "AuthenticationGroup_Remove",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "authenticationGroupCode",
						"in": "path",
						"description": "The code that identifies the Authentication Group to be deleted.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/authentication-groups": {
			"post": {
				"tags": [
					"AuthenticationGroup"
				],
				"summary": "Create or Update an Authentication Group from an AuthenticationGroupIn Model",
				"operationId": "AuthenticationGroup_CreateOrUpdate",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "authenticationGroupIn",
						"in": "body",
						"description": "Model to Create/Update Authentication Group",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticationGroupIn"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AuthenticationGroup"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/bank-accounts/{billingOrganization}/{billingCurrencyCode}/{electronicPaymentId}": {
			"get": {
				"tags": [
					"BankAccount"
				],
				"summary": "Find and return the given saved direct debit payment method.",
				"operationId": "BankAccount_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the bank account holder.",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingOrganization",
						"in": "path",
						"description": "The valid billing organization for the direct debit payment method, if none is provided the default is used.",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingCurrencyCode",
						"in": "path",
						"description": "The billing currency for the direct debit payment method, if none is provided the default is used.",
						"required": true,
						"type": "string"
					},
					{
						"name": "electronicPaymentId",
						"in": "path",
						"description": "The electronic payment ID of the direct debit payment method.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SavedBankAccount"
						}
					}
				}
			},
			"post": {
				"tags": [
					"BankAccount"
				],
				"summary": "Update a direct debit (bank account) payment method.",
				"operationId": "BankAccount_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the bank account holder.",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingOrganization",
						"in": "path",
						"description": "The valid billing organization for the direct debit payment method. If none is provided the default is used.",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingCurrencyCode",
						"in": "path",
						"description": "The currency for the direct debit. If none provided the default is used.",
						"required": true,
						"type": "string"
					},
					{
						"name": "electronicPaymentId",
						"in": "path",
						"description": "The electronic payment ID of the direct debit payment method to update.",
						"required": true,
						"type": "string"
					},
					{
						"name": "update",
						"in": "body",
						"description": "A DirectDebitUpdateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DirectDebitUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SavedBankAccount"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/bank-accounts/{billingOrganization}/{billingCurrencyCode}": {
			"get": {
				"tags": [
					"BankAccount"
				],
				"summary": "Find and return all saved direct debit payment methods for the given customer.",
				"operationId": "BankAccount_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the customer to search for.",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingOrganization",
						"in": "path",
						"description": "The valid billing organization for the direct debits, if none is provided the default is used.",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingCurrencyCode",
						"in": "path",
						"description": "The billing currency for the direct debits, if none is provided the default is used.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/SavedBankAccount"
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"BankAccount"
				],
				"summary": "Saves (creates) a bank account for a customer to use with direct debit payments.  \r\nIf the bank account is already on file it will be updated.",
				"operationId": "BankAccount_CreateOrUpdate",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the bank account holder.",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingOrganization",
						"in": "path",
						"description": "The valid billing organization for the direct debit payment method, if none is provided the default is used.",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingCurrencyCode",
						"in": "path",
						"description": "The currency for the direct debit, if none provided the default is used.",
						"required": true,
						"type": "string"
					},
					{
						"name": "bankAccount",
						"in": "body",
						"description": "The direct debit payment information for the new bank account.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/BankAccountCreateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SavedPaymentResponse"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/bank-accounts/{billingOrganization}/{currencyCode}/{electronicPaymentId}/uses": {
			"get": {
				"tags": [
					"BankAccount"
				],
				"summary": "Gets the subscriptions and agreements that currently use a given direct debit. orders not currently support for bank accounts",
				"operationId": "BankAccount_GetUses",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the card holder.",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingOrganization",
						"in": "path",
						"description": "The card's billing organization.",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "path",
						"description": "The card's billing currency. (An Advantage currency code.)",
						"required": true,
						"type": "string"
					},
					{
						"name": "electronicPaymentId",
						"in": "path",
						"description": "The electronic payment ID of the card to update.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PaymentMethodUses"
						}
					}
				}
			}
		},
		"/bank-accounts/validate/{billingOrganization}/{billingCurrency}": {
			"post": {
				"tags": [
					"BankAccount"
				],
				"summary": "Validates provided bank account information.",
				"operationId": "BankAccount_Validate",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "billingOrganization",
						"in": "path",
						"description": "The valid billing organization for the direct debit payment method, if none is provided the default is used.",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingCurrency",
						"in": "path",
						"description": "The currency for the direct debit, if none provided the default is used.",
						"required": true,
						"type": "string"
					},
					{
						"name": "bankAccount",
						"in": "body",
						"description": "The direct debit payment information for the new bank account.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/BankAccountCreateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/payment-methods/direct-debit/{billingOrganization}/{billingCurrency}": {
			"get": {
				"tags": [
					"BankAccount"
				],
				"summary": "Gets the available direct debit payment codes for a given organization and currency",
				"operationId": "BankAccount_GetValidDirectDebitTypes",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "billingOrganization",
						"in": "path",
						"description": "Billing organization",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingCurrency",
						"in": "path",
						"description": "Billing currency code",
						"required": true,
						"type": "string"
					},
					{
						"name": "webEnabledOnly",
						"in": "query",
						"description": "True to find only credit cards that are \"web enabled\"",
						"required": true,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/DirectDebitPaymentMethod"
							}
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/bank-accounts/{billingOrganization}/{currencyCode}/{electronicPaymentId}/eligible-uses": {
			"get": {
				"tags": [
					"BankAccount"
				],
				"summary": "Gets the subscriptions and agreements that are eligible for being auto-charged with the specified saved bank account.\r\nOnly subscriptions and agreements that are already being auto-charged with a bank account or credit card are included.\r\nEligible subscriptions and agreements that are already auto-charged with the specified saved bank account are also included.",
				"operationId": "BankAccount_GetEligibleUses",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the card holder.",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingOrganization",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "electronicPaymentId",
						"in": "path",
						"description": "The electronic payment ID of the saved bank account",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PaymentMethodEligibleUses"
						}
					}
				}
			}
		},
		"/batch-requests/processes": {
			"post": {
				"tags": [
					"BatchRequest"
				],
				"summary": "Request Process via the Rest API\r\n<param name=\"request\">The process name and request parameters</param>",
				"operationId": "BatchRequest_RequestProcess",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "request",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ProcessRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/batch-requests/jobstreams": {
			"post": {
				"tags": [
					"BatchRequest"
				],
				"summary": "Request Process via the Rest API\r\n<param name=\"request\">The jobstream name and request parameters</param>",
				"operationId": "BatchRequest_RequestJobstream",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "request",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/JobstreamRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/broadcast-messages": {
			"get": {
				"tags": [
					"BroadcastMessage"
				],
				"summary": "Get the list of all broadcast messages",
				"operationId": "BroadcastMessage_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResultWithCount[BroadcastMessage]"
						}
					}
				}
			},
			"post": {
				"tags": [
					"BroadcastMessage"
				],
				"summary": "Create a new broadcast message",
				"operationId": "BroadcastMessage_CreateBroadcastMessage",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "broadcastMessageCreateRequest",
						"in": "body",
						"description": "Broadcast Message Create Request object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/BroadcastMessageCreateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/BroadcastMessageCreateResponse"
						}
					}
				}
			}
		},
		"/broadcast-messages/{broadcastMessageId}": {
			"post": {
				"tags": [
					"BroadcastMessage"
				],
				"summary": "Update a broadcast message",
				"operationId": "BroadcastMessage_UpdateBroadcastMessage",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "broadcastMessageId",
						"in": "path",
						"description": "Broadcast Message Id (Generated Unique Identifier)",
						"required": true,
						"type": "string"
					},
					{
						"name": "broadcastMessageUpdateRequest",
						"in": "body",
						"description": "Broadcast Message Update Request object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/BroadcastMessageUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/BroadcastMessage"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"BroadcastMessage"
				],
				"summary": "Delete a specific broadcast message",
				"operationId": "BroadcastMessage_DeleteBroadcastMessage",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "broadcastMessageId",
						"in": "path",
						"description": "Broadcast Message Id (Generated Unique Identifier)",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/call-lists/{listId}/{listDate}": {
			"get": {
				"tags": [
					"CallList"
				],
				"summary": "Gets Sales Rep.",
				"operationId": "CallList_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "listId",
						"in": "path",
						"description": "List ID",
						"required": true,
						"type": "string"
					},
					{
						"name": "listDate",
						"in": "path",
						"description": "List Date",
						"required": true,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "includeCalls",
						"in": "query",
						"description": "True to include a collection of the calls belonging to the call list",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "filter.beginDate",
						"in": "query",
						"description": "The earliest call date to include",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "filter.endDate",
						"in": "query",
						"description": "The latest call date to include",
						"required": false,
						"type": "string",
						"format": "date-time"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CallList"
						}
					}
				}
			}
		},
		"/call-lists/{listId}/{listDate}/assignments": {
			"get": {
				"tags": [
					"CallList"
				],
				"summary": "Gets call assignments for the given call list.",
				"operationId": "CallList_GetCallListAssignments",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "listId",
						"in": "path",
						"description": "List ID",
						"required": true,
						"type": "string"
					},
					{
						"name": "listDate",
						"in": "path",
						"description": "List Date",
						"required": true,
						"type": "string",
						"format": "date-time"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[CallListAssignment]"
						}
					}
				}
			}
		},
		"/call-lists/{salesRepCode}/assignments": {
			"get": {
				"tags": [
					"CallList"
				],
				"summary": "Gets call assignments for the given call list.",
				"operationId": "CallList_GetCallListAssignmentsBySalesRep",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "salesRepCode",
						"in": "path",
						"description": "SalesRepCode",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.beginDate",
						"in": "query",
						"description": "The earliest call date to include in statistics.",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "filter.endDate",
						"in": "query",
						"description": "The latest call date to include in statistics.",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "filter.listCode",
						"in": "query",
						"description": "List code of the list to limit the statistics to or null or empty string to compile\r\nstatistics across lists.",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.listDate",
						"in": "query",
						"description": "The date associated with the call list",
						"required": false,
						"type": "string",
						"format": "date-time"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CallListAssignment"
						}
					}
				}
			}
		},
		"/call-lists/{listId}/{listDate}/calls": {
			"get": {
				"tags": [
					"CallList"
				],
				"summary": "Gets the calls for a call list",
				"operationId": "CallList_GetCallsList",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "listId",
						"in": "path",
						"description": "List ID",
						"required": true,
						"type": "string"
					},
					{
						"name": "listDate",
						"in": "path",
						"description": "List Date",
						"required": true,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "includeCallbacks",
						"in": "query",
						"description": "True to include callbacks",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Call]"
						}
					}
				}
			}
		},
		"/call-lists/{listId}": {
			"get": {
				"tags": [
					"CallList"
				],
				"summary": "Gets List of Call Lists.",
				"operationId": "CallList_GetList",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "listId",
						"in": "path",
						"description": "List ID",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[CallList]"
						}
					}
				}
			}
		},
		"/call-lists": {
			"get": {
				"tags": [
					"CallList"
				],
				"summary": "Gets list of call lists.",
				"operationId": "CallList_Search",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "includeInactiveLists",
						"in": "query",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "onlyIncludeListsWithCallsRemaining",
						"in": "query",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "SalesRepCode",
						"in": "query",
						"description": "Filter on SLM-NUM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode",
						"in": "query",
						"description": "Filter on SLM-NUM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId",
						"in": "query",
						"description": "Filter on LIST-ID using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate",
						"in": "query",
						"description": "Filter on LIST-DTE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall",
						"in": "query",
						"description": "Filter on YES-NO using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback",
						"in": "query",
						"description": "Filter on YES-NO using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.NotEqual",
						"in": "query",
						"description": "Filter on SLM-NUM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.Less",
						"in": "query",
						"description": "Filter on SLM-NUM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.LessOrEqual",
						"in": "query",
						"description": "Filter on SLM-NUM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.Greater",
						"in": "query",
						"description": "Filter on SLM-NUM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on SLM-NUM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.IsNull",
						"in": "query",
						"description": "Filter on SLM-NUM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.IsNotNull",
						"in": "query",
						"description": "Filter on SLM-NUM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.Like",
						"in": "query",
						"description": "Filter on SLM-NUM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.NotLike",
						"in": "query",
						"description": "Filter on SLM-NUM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.Contains",
						"in": "query",
						"description": "Filter on SLM-NUM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.NotContains",
						"in": "query",
						"description": "Filter on SLM-NUM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.StartsWith",
						"in": "query",
						"description": "Filter on SLM-NUM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.NotStartsWith",
						"in": "query",
						"description": "Filter on SLM-NUM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.EndsWith",
						"in": "query",
						"description": "Filter on SLM-NUM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.NotEndsWith",
						"in": "query",
						"description": "Filter on SLM-NUM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.In",
						"in": "query",
						"description": "Filter on SLM-NUM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.Between",
						"in": "query",
						"description": "Filter on SLM-NUM using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode.NotEqual",
						"in": "query",
						"description": "Filter on SLM-NUM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode.Less",
						"in": "query",
						"description": "Filter on SLM-NUM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode.LessOrEqual",
						"in": "query",
						"description": "Filter on SLM-NUM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode.Greater",
						"in": "query",
						"description": "Filter on SLM-NUM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on SLM-NUM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode.IsNull",
						"in": "query",
						"description": "Filter on SLM-NUM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode.IsNotNull",
						"in": "query",
						"description": "Filter on SLM-NUM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode.Like",
						"in": "query",
						"description": "Filter on SLM-NUM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode.NotLike",
						"in": "query",
						"description": "Filter on SLM-NUM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode.Contains",
						"in": "query",
						"description": "Filter on SLM-NUM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode.NotContains",
						"in": "query",
						"description": "Filter on SLM-NUM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode.StartsWith",
						"in": "query",
						"description": "Filter on SLM-NUM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode.NotStartsWith",
						"in": "query",
						"description": "Filter on SLM-NUM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode.EndsWith",
						"in": "query",
						"description": "Filter on SLM-NUM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode.NotEndsWith",
						"in": "query",
						"description": "Filter on SLM-NUM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode.In",
						"in": "query",
						"description": "Filter on SLM-NUM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesManagerCode.Between",
						"in": "query",
						"description": "Filter on SLM-NUM using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId.NotEqual",
						"in": "query",
						"description": "Filter on LIST-ID using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId.Less",
						"in": "query",
						"description": "Filter on LIST-ID using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId.LessOrEqual",
						"in": "query",
						"description": "Filter on LIST-ID using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId.Greater",
						"in": "query",
						"description": "Filter on LIST-ID using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId.GreaterOrEqual",
						"in": "query",
						"description": "Filter on LIST-ID using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId.IsNull",
						"in": "query",
						"description": "Filter on LIST-ID using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId.IsNotNull",
						"in": "query",
						"description": "Filter on LIST-ID using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId.Like",
						"in": "query",
						"description": "Filter on LIST-ID using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId.NotLike",
						"in": "query",
						"description": "Filter on LIST-ID using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId.Contains",
						"in": "query",
						"description": "Filter on LIST-ID using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId.NotContains",
						"in": "query",
						"description": "Filter on LIST-ID using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId.StartsWith",
						"in": "query",
						"description": "Filter on LIST-ID using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId.NotStartsWith",
						"in": "query",
						"description": "Filter on LIST-ID using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId.EndsWith",
						"in": "query",
						"description": "Filter on LIST-ID using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId.NotEndsWith",
						"in": "query",
						"description": "Filter on LIST-ID using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId.In",
						"in": "query",
						"description": "Filter on LIST-ID using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListId.Between",
						"in": "query",
						"description": "Filter on LIST-ID using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate.NotEqual",
						"in": "query",
						"description": "Filter on LIST-DTE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate.Less",
						"in": "query",
						"description": "Filter on LIST-DTE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate.LessOrEqual",
						"in": "query",
						"description": "Filter on LIST-DTE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate.Greater",
						"in": "query",
						"description": "Filter on LIST-DTE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate.GreaterOrEqual",
						"in": "query",
						"description": "Filter on LIST-DTE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate.IsNull",
						"in": "query",
						"description": "Filter on LIST-DTE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate.IsNotNull",
						"in": "query",
						"description": "Filter on LIST-DTE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate.Like",
						"in": "query",
						"description": "Filter on LIST-DTE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate.NotLike",
						"in": "query",
						"description": "Filter on LIST-DTE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate.Contains",
						"in": "query",
						"description": "Filter on LIST-DTE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate.NotContains",
						"in": "query",
						"description": "Filter on LIST-DTE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate.StartsWith",
						"in": "query",
						"description": "Filter on LIST-DTE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate.NotStartsWith",
						"in": "query",
						"description": "Filter on LIST-DTE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate.EndsWith",
						"in": "query",
						"description": "Filter on LIST-DTE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate.NotEndsWith",
						"in": "query",
						"description": "Filter on LIST-DTE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate.In",
						"in": "query",
						"description": "Filter on LIST-DTE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ListDate.Between",
						"in": "query",
						"description": "Filter on LIST-DTE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall.NotEqual",
						"in": "query",
						"description": "Filter on YES-NO using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall.Less",
						"in": "query",
						"description": "Filter on YES-NO using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall.LessOrEqual",
						"in": "query",
						"description": "Filter on YES-NO using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall.Greater",
						"in": "query",
						"description": "Filter on YES-NO using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall.GreaterOrEqual",
						"in": "query",
						"description": "Filter on YES-NO using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall.IsNull",
						"in": "query",
						"description": "Filter on YES-NO using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall.IsNotNull",
						"in": "query",
						"description": "Filter on YES-NO using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall.Like",
						"in": "query",
						"description": "Filter on YES-NO using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall.NotLike",
						"in": "query",
						"description": "Filter on YES-NO using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall.Contains",
						"in": "query",
						"description": "Filter on YES-NO using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall.NotContains",
						"in": "query",
						"description": "Filter on YES-NO using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall.StartsWith",
						"in": "query",
						"description": "Filter on YES-NO using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall.NotStartsWith",
						"in": "query",
						"description": "Filter on YES-NO using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall.EndsWith",
						"in": "query",
						"description": "Filter on YES-NO using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall.NotEndsWith",
						"in": "query",
						"description": "Filter on YES-NO using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall.In",
						"in": "query",
						"description": "Filter on YES-NO using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsRemainingCall.Between",
						"in": "query",
						"description": "Filter on YES-NO using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback.NotEqual",
						"in": "query",
						"description": "Filter on YES-NO using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback.Less",
						"in": "query",
						"description": "Filter on YES-NO using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback.LessOrEqual",
						"in": "query",
						"description": "Filter on YES-NO using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback.Greater",
						"in": "query",
						"description": "Filter on YES-NO using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback.GreaterOrEqual",
						"in": "query",
						"description": "Filter on YES-NO using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback.IsNull",
						"in": "query",
						"description": "Filter on YES-NO using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback.IsNotNull",
						"in": "query",
						"description": "Filter on YES-NO using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback.Like",
						"in": "query",
						"description": "Filter on YES-NO using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback.NotLike",
						"in": "query",
						"description": "Filter on YES-NO using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback.Contains",
						"in": "query",
						"description": "Filter on YES-NO using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback.NotContains",
						"in": "query",
						"description": "Filter on YES-NO using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback.StartsWith",
						"in": "query",
						"description": "Filter on YES-NO using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback.NotStartsWith",
						"in": "query",
						"description": "Filter on YES-NO using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback.EndsWith",
						"in": "query",
						"description": "Filter on YES-NO using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback.NotEndsWith",
						"in": "query",
						"description": "Filter on YES-NO using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback.In",
						"in": "query",
						"description": "Filter on YES-NO using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsCallback.Between",
						"in": "query",
						"description": "Filter on YES-NO using 'Between' operator",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[CallList]"
						}
					}
				}
			}
		},
		"/call-lists/end-call": {
			"post": {
				"tags": [
					"CallList"
				],
				"summary": "Begins an inbound call.  The inbound call list is unique for each rep and, and will only contain the inbound\r\ncalls that were not linked to existing calls.",
				"operationId": "CallList_EndCall",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "endCallRequest",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/EndCallRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/call-lists/{listId}/{listDate}/outcomes": {
			"get": {
				"tags": [
					"CallList"
				],
				"summary": "Get information about each outcome for a particular call list.",
				"operationId": "CallList_GetCallListOutcomes",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "listId",
						"in": "path",
						"description": "List ID",
						"required": true,
						"type": "string"
					},
					{
						"name": "listDate",
						"in": "path",
						"description": "List Date",
						"required": true,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "filter.beginDate",
						"in": "query",
						"description": "The earliest call date to include in statistics.",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "filter.endDate",
						"in": "query",
						"description": "The latest call date to include in statistics.",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "filter.salesRepCode",
						"in": "query",
						"description": "The sales rep code to filter by",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[CallListOutcome]"
						}
					}
				}
			}
		},
		"/call-lists/{salesRepCode}/outcomes": {
			"get": {
				"tags": [
					"CallList"
				],
				"summary": "Get information about each outcome for a particular sales rep.",
				"operationId": "CallList_GetCallOutcomesBySalesRep",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "salesRepCode",
						"in": "path",
						"description": "Sales Rep Code",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.beginDate",
						"in": "query",
						"description": "The earliest call date to include in statistics.",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "filter.endDate",
						"in": "query",
						"description": "The latest call date to include in statistics.",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "filter.salesRepCode",
						"in": "query",
						"description": "The sales rep code to filter by",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[CallListOutcome]"
						}
					}
				}
			}
		},
		"/call-lists/{listId}/{listDate}/valid-outcomes": {
			"get": {
				"tags": [
					"CallList"
				],
				"summary": "Returns the list of valid call outcomes for the specified call list",
				"operationId": "CallList_GetValidCallOutcomes",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "listId",
						"in": "path",
						"description": "List ID",
						"required": true,
						"type": "string"
					},
					{
						"name": "listDate",
						"in": "path",
						"description": "List Date",
						"required": true,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "isInbound",
						"in": "query",
						"description": "Is call inbound?",
						"required": true,
						"type": "boolean"
					},
					{
						"name": "closeCallOutcome",
						"in": "query",
						"description": "Is this a close call outcome?",
						"required": true,
						"type": "boolean"
					},
					{
						"name": "isCallbackAction",
						"in": "query",
						"description": "Is this a callback action?",
						"required": true,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[FieldValidValue]"
						}
					}
				}
			}
		},
		"/call-lists/call-outcomes": {
			"get": {
				"tags": [
					"CallList"
				],
				"summary": "Returns the resolution codes for each outcome code valid for the current call.\r\nReturns all resolution/outcome codes if an empty value is passed in for listId.",
				"operationId": "CallList_GetCallOutcomes",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "isInbound",
						"in": "query",
						"description": "Is call inbound?",
						"required": true,
						"type": "boolean"
					},
					{
						"name": "closeCallOutcome",
						"in": "query",
						"description": "Is this a close call outcome?",
						"required": true,
						"type": "boolean"
					},
					{
						"name": "isCallbackAction",
						"in": "query",
						"description": "Is this a callback action?",
						"required": true,
						"type": "boolean"
					},
					{
						"name": "listId",
						"in": "query",
						"description": "List ID, empty value indicates that all resolution codes should be returned",
						"required": false,
						"type": "string"
					},
					{
						"name": "listDate",
						"in": "query",
						"description": "List Date",
						"required": false,
						"type": "string",
						"format": "date-time"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[CallOutcome]"
						}
					}
				}
			}
		},
		"/call-lists/update": {
			"post": {
				"tags": [
					"CallList"
				],
				"summary": "Updates assigned call totals for sales representatives",
				"operationId": "CallList_UpdateCallListAssignment",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "callListAssignmentUpdateRequest",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CallListAssignmentUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/call-lists/begin-inbound-call": {
			"post": {
				"tags": [
					"CallList"
				],
				"summary": "Finds or creates the inbound call list for the given sales rep.",
				"operationId": "CallList_FindOrAddInboundCallList",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "inboundCallListCreateRequest",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/InboundCallListCreateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Call"
						}
					}
				}
			}
		},
		"/campaigns/{campaignCode}": {
			"post": {
				"tags": [
					"Campaign"
				],
				"summary": "Creates a new campaign.",
				"operationId": "Campaign_Create",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "campaignCode",
						"in": "path",
						"description": "The campaign code",
						"required": true,
						"type": "string"
					},
					{
						"name": "campaign",
						"in": "body",
						"description": "A CampaignCreateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CampaignCreateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/campaigns": {
			"get": {
				"tags": [
					"Campaign"
				],
				"summary": "Get all campaigns matching the search argument.",
				"operationId": "Campaign_Search",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "searchText",
						"in": "query",
						"description": "The optional search argument, accepting \"*\" as a wild-card, for searching by campaign code.\r\nIf a search argument isn't provided, all campaigns will be returned.",
						"required": false,
						"type": "string"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResultWithCount[Campaign]"
						}
					}
				}
			}
		},
		"/card-vault/clients": {
			"get": {
				"tags": [
					"CardVault"
				],
				"summary": "Returns the CardVault client settings for a specified URL",
				"operationId": "CardVault_GetClientSettingsByUrl",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "clientUrl",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CardVaultClientSettingsResponse"
						}
					}
				}
			}
		},
		"/product-catalogs": {
			"get": {
				"tags": [
					"Catalog"
				],
				"summary": "Gets the catalog, starting at the root level.  \r\nA catalog is an organized as a multi-level collection of subjects and the products assigned to those subjects.",
				"operationId": "Catalog_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "settings.includeProducts",
						"in": "query",
						"description": "Include products in the response?  The default is to include products only at the leaf levels.",
						"required": false,
						"type": "string",
						"enum": [
							"Yes",
							"No",
							"LeafOnly"
						]
					},
					{
						"name": "settings.maxDepth",
						"in": "query",
						"description": "A catalog is a tree structure that may include many levels of nested subjects.\r\nUse the MaxDepth setting to limit the child levels in the response to a maximum depth.  For example, \r\npass 1 to return only the first level of child subjects or zero to return no child subjects.\r\nThe default is to limit the response to a maximum of 50 child levels deep.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[SubjectTreeLevel]"
						}
					}
				}
			}
		},
		"/product-catalogs/{parentId}": {
			"get": {
				"tags": [
					"Catalog"
				],
				"summary": "Gets the catalog, starting at the given subject tree level. \r\nA catalog is an organized as a multi-level collection of subjects and the products assigned to those subjects.",
				"operationId": "Catalog_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "parentId",
						"in": "path",
						"description": "Level Id of the Parent Tree Level. The returned \r\n            collection will start with this subject tree level and return all child levels. \r\n            If no parent level is provided then the returned catalog will start with the top level subjects.",
						"required": true,
						"type": "integer",
						"format": "int64"
					},
					{
						"name": "settings.includeProducts",
						"in": "query",
						"description": "Include products in the response?  The default is to include products only at the leaf levels.",
						"required": false,
						"type": "string",
						"enum": [
							"Yes",
							"No",
							"LeafOnly"
						]
					},
					{
						"name": "settings.maxDepth",
						"in": "query",
						"description": "A catalog is a tree structure that may include many levels of nested subjects.\r\nUse the MaxDepth setting to limit the child levels in the response to a maximum depth.  For example, \r\npass 1 to return only the first level of child subjects or zero to return no child subjects.\r\nThe default is to limit the response to a maximum of 50 child levels deep.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[SubjectTreeLevel]"
						}
					}
				}
			}
		},
		"/conferences/{conferenceId}": {
			"get": {
				"tags": [
					"Conference"
				],
				"summary": "Get information for a given conference",
				"operationId": "Conference_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "conferenceId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Conference"
						}
					}
				}
			}
		},
		"/conferences/{conferenceId}/locations": {
			"get": {
				"tags": [
					"Conference"
				],
				"summary": "Returns the list of all locations associated with a conference",
				"operationId": "Conference_GetLocations",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "conferenceId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/ConferenceLocation"
							}
						}
					}
				}
			}
		},
		"/conferences/{conferenceId}/sessions": {
			"get": {
				"tags": [
					"Conference"
				],
				"summary": "Returns the list of all sessions associated with a conference",
				"operationId": "Conference_GetSessions",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "conferenceId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/ConferenceSession"
							}
						}
					}
				}
			}
		},
		"/conferences/{conferenceId}/sessions/{sessionId}": {
			"get": {
				"tags": [
					"Conference"
				],
				"summary": "Returns a conference session",
				"operationId": "Conference_GetSession",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "conferenceId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "sessionId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ConferenceSession"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Conference"
				],
				"summary": "Update an existing conference session.",
				"operationId": "Conference_UpdateConferenceSession",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "conferenceId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "sessionId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "updateRequest",
						"in": "body",
						"description": "",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ConferenceSessionUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/conferences/{conferenceId}/choices": {
			"get": {
				"tags": [
					"Conference"
				],
				"summary": "Returns the list of all choices associated with a conference",
				"operationId": "Conference_GetChoices",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "conferenceId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/ConferenceChoice"
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Conference"
				],
				"summary": "Creates a conference choice and the sessions that will be associated with it",
				"operationId": "Conference_CreateConferenceChoice",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "conferenceId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "createRequest",
						"in": "body",
						"description": "",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ConferenceChoiceCreateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/conferences/{conferenceId}/choices/{choiceCode}": {
			"get": {
				"tags": [
					"Conference"
				],
				"summary": "Returns a conference choice and all sessions associated with that choice code",
				"operationId": "Conference_GetChoice",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "conferenceId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "choiceCode",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ConferenceChoice"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Conference"
				],
				"summary": "Update an existing conference choice and associated sessions",
				"operationId": "Conference_UpdateConferenceChoice",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "conferenceId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "choiceCode",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "updateRequest",
						"in": "body",
						"description": "",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ConferenceChoiceUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/conferences/{conferenceId}/locations/{locationId}": {
			"post": {
				"tags": [
					"Conference"
				],
				"summary": "Update an existing conference location",
				"operationId": "Conference_UpdateConferenceLocation",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "conferenceId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "locationId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "updateRequest",
						"in": "body",
						"description": "",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ConferenceLocationUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/conference-registrations/{registrationId}/attendees/{registrationSequence}": {
			"get": {
				"tags": [
					"ConferenceAttendee"
				],
				"summary": "Gets a specific conference attendee by ID and sequence",
				"operationId": "ConferenceAttendee_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "registrationId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "registrationSequence",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ConferenceAttendee"
						}
					}
				}
			},
			"post": {
				"tags": [
					"ConferenceAttendee"
				],
				"summary": "Updates the specified attendee on a conference registration",
				"operationId": "ConferenceAttendee_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "registrationId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "registrationSequence",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "request",
						"in": "body",
						"description": "",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ConferenceAttendeeUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/conference-registrations/{registrationId}/attendees/{registrationSequence}/cancel": {
			"post": {
				"tags": [
					"ConferenceAttendee"
				],
				"summary": "Removes an attendee from a conference registration",
				"operationId": "ConferenceAttendee_Cancel",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "registrationId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "registrationSequence",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "request",
						"in": "body",
						"description": "",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ConferenceAttendeeCancelRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/conference-registrations": {
			"get": {
				"tags": [
					"ConferenceRegistration"
				],
				"summary": "Gets the list of conference registrations based on search criteria",
				"operationId": "ConferenceRegistration_Search",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "AttendeeCustomerNumber",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber",
						"in": "query",
						"description": "Filter on BIL-CTM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId",
						"in": "query",
						"description": "Filter on CONF-ID using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId",
						"in": "query",
						"description": "Filter on CONF-LOC using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AttendeeCustomerNumber.NotEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AttendeeCustomerNumber.Less",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AttendeeCustomerNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AttendeeCustomerNumber.Greater",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AttendeeCustomerNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AttendeeCustomerNumber.IsNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AttendeeCustomerNumber.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AttendeeCustomerNumber.Like",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AttendeeCustomerNumber.NotLike",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AttendeeCustomerNumber.Contains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AttendeeCustomerNumber.NotContains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AttendeeCustomerNumber.StartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AttendeeCustomerNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AttendeeCustomerNumber.EndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AttendeeCustomerNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AttendeeCustomerNumber.In",
						"in": "query",
						"description": "Filter on CTM-NBR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AttendeeCustomerNumber.Between",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotEqual",
						"in": "query",
						"description": "Filter on BIL-CTM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Less",
						"in": "query",
						"description": "Filter on BIL-CTM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on BIL-CTM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Greater",
						"in": "query",
						"description": "Filter on BIL-CTM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on BIL-CTM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.IsNull",
						"in": "query",
						"description": "Filter on BIL-CTM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.IsNotNull",
						"in": "query",
						"description": "Filter on BIL-CTM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Like",
						"in": "query",
						"description": "Filter on BIL-CTM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotLike",
						"in": "query",
						"description": "Filter on BIL-CTM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Contains",
						"in": "query",
						"description": "Filter on BIL-CTM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotContains",
						"in": "query",
						"description": "Filter on BIL-CTM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.StartsWith",
						"in": "query",
						"description": "Filter on BIL-CTM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on BIL-CTM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.EndsWith",
						"in": "query",
						"description": "Filter on BIL-CTM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on BIL-CTM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.In",
						"in": "query",
						"description": "Filter on BIL-CTM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Between",
						"in": "query",
						"description": "Filter on BIL-CTM using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId.NotEqual",
						"in": "query",
						"description": "Filter on CONF-ID using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId.Less",
						"in": "query",
						"description": "Filter on CONF-ID using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId.LessOrEqual",
						"in": "query",
						"description": "Filter on CONF-ID using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId.Greater",
						"in": "query",
						"description": "Filter on CONF-ID using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CONF-ID using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId.IsNull",
						"in": "query",
						"description": "Filter on CONF-ID using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId.IsNotNull",
						"in": "query",
						"description": "Filter on CONF-ID using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId.Like",
						"in": "query",
						"description": "Filter on CONF-ID using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId.NotLike",
						"in": "query",
						"description": "Filter on CONF-ID using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId.Contains",
						"in": "query",
						"description": "Filter on CONF-ID using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId.NotContains",
						"in": "query",
						"description": "Filter on CONF-ID using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId.StartsWith",
						"in": "query",
						"description": "Filter on CONF-ID using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId.NotStartsWith",
						"in": "query",
						"description": "Filter on CONF-ID using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId.EndsWith",
						"in": "query",
						"description": "Filter on CONF-ID using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId.NotEndsWith",
						"in": "query",
						"description": "Filter on CONF-ID using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId.In",
						"in": "query",
						"description": "Filter on CONF-ID using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ConferenceId.Between",
						"in": "query",
						"description": "Filter on CONF-ID using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId.NotEqual",
						"in": "query",
						"description": "Filter on CONF-LOC using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId.Less",
						"in": "query",
						"description": "Filter on CONF-LOC using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId.LessOrEqual",
						"in": "query",
						"description": "Filter on CONF-LOC using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId.Greater",
						"in": "query",
						"description": "Filter on CONF-LOC using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CONF-LOC using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId.IsNull",
						"in": "query",
						"description": "Filter on CONF-LOC using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId.IsNotNull",
						"in": "query",
						"description": "Filter on CONF-LOC using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId.Like",
						"in": "query",
						"description": "Filter on CONF-LOC using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId.NotLike",
						"in": "query",
						"description": "Filter on CONF-LOC using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId.Contains",
						"in": "query",
						"description": "Filter on CONF-LOC using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId.NotContains",
						"in": "query",
						"description": "Filter on CONF-LOC using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId.StartsWith",
						"in": "query",
						"description": "Filter on CONF-LOC using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId.NotStartsWith",
						"in": "query",
						"description": "Filter on CONF-LOC using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId.EndsWith",
						"in": "query",
						"description": "Filter on CONF-LOC using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId.NotEndsWith",
						"in": "query",
						"description": "Filter on CONF-LOC using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId.In",
						"in": "query",
						"description": "Filter on CONF-LOC using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LocationId.Between",
						"in": "query",
						"description": "Filter on CONF-LOC using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Less",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.LessOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Greater",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.IsNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.IsNotNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Like",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotLike",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Contains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotContains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.StartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotStartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.EndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotEndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.In",
						"in": "query",
						"description": "Filter on BIL-ORG using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Between",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Between' operator",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[ConferenceRegistration]"
						}
					}
				}
			}
		},
		"/conference-registrations/{registrationId}": {
			"get": {
				"tags": [
					"ConferenceRegistration"
				],
				"summary": "Gets a specific conference registration by ID",
				"operationId": "ConferenceRegistration_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "registrationId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ConferenceRegistration"
						}
					}
				}
			}
		},
		"/conference-registrations/{registrationId}/cancel": {
			"post": {
				"tags": [
					"ConferenceRegistration"
				],
				"summary": "Cancel a conference registration for the given registration Id. All attendees under the registration will be cancelled.",
				"operationId": "ConferenceRegistration_Cancel",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "registrationId",
						"in": "path",
						"description": "The registrationId of the conference registration to be canceled.",
						"required": true,
						"type": "string"
					},
					{
						"name": "cancelRequest",
						"in": "body",
						"description": "The request object for the cancel",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CancelConferenceRegistrationRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/continuing-education-providers": {
			"get": {
				"tags": [
					"ContinuingEducation"
				],
				"summary": "Retrieves the list of all continuing education providers",
				"operationId": "ContinuingEducation_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[ContinuingEducationProvider]"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/continuing-education-credits": {
			"get": {
				"tags": [
					"ContinuingEducation"
				],
				"summary": "Retrieves the list of all credits earned by the specified customer",
				"operationId": "ContinuingEducation_GetCredits",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The customer number",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[ContinuingEducationCredit]"
						}
					}
				}
			},
			"post": {
				"tags": [
					"ContinuingEducation"
				],
				"summary": "Creates a new continuing education credit for the specified customer in Advantage",
				"operationId": "ContinuingEducation_CreateCredit",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The customer number",
						"required": true,
						"type": "string"
					},
					{
						"name": "createRequest",
						"in": "body",
						"description": "Information for creating a continuing education credit",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ContinuingEducationCreditCreateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/control-groups/{controlGroupDate}/{controlGroupCode}": {
			"get": {
				"tags": [
					"ControlGroup"
				],
				"summary": "Gets a Control Group base on Date and ID",
				"operationId": "ControlGroup_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "controlGroupDate",
						"in": "path",
						"description": "Control Group Date",
						"required": true,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "controlGroupCode",
						"in": "path",
						"description": "Control Group ID",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ControlGroup"
						}
					}
				}
			},
			"post": {
				"tags": [
					"ControlGroup"
				],
				"summary": "Update a Control Group from a ControlGroupUpdateRequest Model",
				"operationId": "ControlGroup_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "controlGroupDate",
						"in": "path",
						"description": "Control Group Date",
						"required": true,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "controlGroupCode",
						"in": "path",
						"description": "Control Group ID",
						"required": true,
						"type": "string"
					},
					{
						"name": "controlGroupUpdateRequest",
						"in": "body",
						"description": "Model to Update Control Group",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ControlGroupUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ControlGroup"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"ControlGroup"
				],
				"summary": "Removes a Control Group",
				"operationId": "ControlGroup_Remove",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "controlGroupDate",
						"in": "path",
						"description": "Control Group Date",
						"required": true,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "controlGroupCode",
						"in": "path",
						"description": "Control Group ID",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/control-groups": {
			"post": {
				"tags": [
					"ControlGroup"
				],
				"summary": "Create or Update a Control Group from a ControlGroupIn Model",
				"operationId": "ControlGroup_CreateOrUpdate",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "controlGroupIn",
						"in": "body",
						"description": "Model to Create/Update Control Group",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ControlGroupIn"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ControlGroup"
						}
					}
				}
			}
		},
		"/control-groups/{controlGroupDate}/{controlGroupCode}/open": {
			"post": {
				"tags": [
					"ControlGroup"
				],
				"summary": "Opens a control group enabling entry of orders into it.",
				"operationId": "ControlGroup_Open",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "controlGroupDate",
						"in": "path",
						"description": "Control Group Date",
						"required": true,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "controlGroupCode",
						"in": "path",
						"description": "Control Group ID",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/control-groups/{controlGroupDate}/{controlGroupCode}/close": {
			"post": {
				"tags": [
					"ControlGroup"
				],
				"summary": "Closes a current control group preventing entry of orders into it.",
				"operationId": "ControlGroup_CloseControlGroup",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "controlGroupDate",
						"in": "path",
						"description": "Control Group Date",
						"required": true,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "controlGroupCode",
						"in": "path",
						"description": "Control Group ID",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/control-groups/{controlGroupDate}/{controlGroupCode}/balance": {
			"post": {
				"tags": [
					"ControlGroup"
				],
				"summary": "Checks control totals to see if they match actual totals for the current control group.\r\nAn error is thrown if the control totals don't balance.  The MST120 process, which does\r\nadditional payment validation is also requested.  This process does its\r\nvalidation asynchronously, but can be instructed to automatically release the control\r\ngroup when it is finished.  A control group cannot be released until the control totals\r\nbalance and the payment validation has been passed.",
				"operationId": "ControlGroup_Balance",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "controlGroupDate",
						"in": "path",
						"description": "Control Group Date",
						"required": true,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "controlGroupCode",
						"in": "path",
						"description": "Control Group ID",
						"required": true,
						"type": "string"
					},
					{
						"name": "balanceRequest",
						"in": "body",
						"description": "Balance Request Model (requestPaymentValidation and autoRelease)",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ControlGroupBalanceRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/control-groups/{controlGroupDate}/{controlGroupCode}/release": {
			"post": {
				"tags": [
					"ControlGroup"
				],
				"summary": "Releases a current control group.  A control group must be closed and balanced before\r\nit can be released.  Releasing a control group indicates that all orders\r\nin the control group are done and ready to be posted.",
				"operationId": "ControlGroup_Release",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "controlGroupDate",
						"in": "path",
						"description": "Control Group Date",
						"required": true,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "controlGroupCode",
						"in": "path",
						"description": "Control Group ID",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/control-groups/{controlGroupDate}/{controlGroupCode}/unrelease": {
			"post": {
				"tags": [
					"ControlGroup"
				],
				"summary": "Un-releases the current control group indicating that its orders are not yet ready\r\nto be posted.  A control group cannot be unreleased if any of its orders have been posted.",
				"operationId": "ControlGroup_Unrelease",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "controlGroupDate",
						"in": "path",
						"description": "Control Group Date",
						"required": true,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "controlGroupCode",
						"in": "path",
						"description": "Control Group ID",
						"required": true,
						"type": "string"
					},
					{
						"name": "unreleaseRequest",
						"in": "body",
						"description": "The ARP user ID to recreate the ARP control group;\r\n            WWWEB is used by default",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ControlGroupUnreleaseRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/control-groups/{controlGroupDate}/{controlGroupCode}/purge": {
			"post": {
				"tags": [
					"ControlGroup"
				],
				"summary": "Requests the MST830 process to delete all unposted orders in the current control group.\r\nThis process deletes the orders asynchronously.",
				"operationId": "ControlGroup_Purge",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "controlGroupDate",
						"in": "path",
						"description": "Control Group Date",
						"required": true,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "controlGroupCode",
						"in": "path",
						"description": "Control Group ID",
						"required": true,
						"type": "string"
					},
					{
						"name": "purgeOfflineRequest",
						"in": "body",
						"description": "True to delete the control group after purging orders",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ControlGroupPurgeRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/countries": {
			"get": {
				"tags": [
					"Country"
				],
				"summary": "Get all valid countries.",
				"operationId": "Country_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Country"
							}
						}
					}
				}
			}
		},
		"/countries/{countryCode}": {
			"get": {
				"tags": [
					"Country"
				],
				"summary": "Get information about the specified country. Note that if an empty string is a valid country code in \r\nyour system (perhaps used for the default country) then you should pass the word \"blank\" as the country \r\ncode in place of an actual empty string.",
				"operationId": "Country_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "countryCode",
						"in": "path",
						"description": "The Advantage country code.  For a blank country code us the literal string \r\n            \"blank\".",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Country"
						}
					}
				}
			}
		},
		"/countries/{countryCode}/states": {
			"get": {
				"tags": [
					"Country"
				],
				"summary": "Get a list of valid states for the given country. Note that if an empty string is a valid country code \r\nin your system (perhaps used for the default country) then you should pass the word \"blank\" as the country \r\ncode in place of an actual empty string.",
				"operationId": "Country_GetStates",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "countryCode",
						"in": "path",
						"description": "The country code. For a blank country code use the literal string \"blank\".",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/State"
							}
						}
					}
				}
			}
		},
		"/countries/{countryCode}/postal-codes/{postalCode}": {
			"get": {
				"tags": [
					"Country"
				],
				"summary": "Get all valid countries.",
				"operationId": "Country_GetPostalCode",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "countryCode",
						"in": "path",
						"description": "Country Code",
						"required": true,
						"type": "string"
					},
					{
						"name": "postalCode",
						"in": "path",
						"description": "Postal Code",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PostalCode"
						}
					}
				}
			}
		},
		"/countries/{countryCode}/postal-codes": {
			"get": {
				"tags": [
					"Country"
				],
				"summary": "Get all postal codes by country",
				"operationId": "Country_GetPostalCodes",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "countryCode",
						"in": "path",
						"description": "Country Code",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[PostalCode]"
						}
					}
				}
			}
		},
		"/countries/{countryCode}/states/{stateCode}/postal-codes": {
			"get": {
				"tags": [
					"Country"
				],
				"summary": "Get all postal codes by country and state",
				"operationId": "Country_GetPostalCodes",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "countryCode",
						"in": "path",
						"description": "Country Code",
						"required": true,
						"type": "string"
					},
					{
						"name": "stateCode",
						"in": "path",
						"description": "State Code",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[PostalCode]"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/coupon-uses/{couponCode}": {
			"get": {
				"tags": [
					"Coupon"
				],
				"summary": "Get all customer uses of a particular coupon",
				"operationId": "Coupon_GetUses",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "Customer number",
						"required": true,
						"type": "string"
					},
					{
						"name": "couponCode",
						"in": "path",
						"description": "Code identifying the coupon",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[CouponUse]"
						}
					}
				}
			}
		},
		"/credits/{voucherId}/reassign": {
			"post": {
				"tags": [
					"Credit"
				],
				"summary": "Reassigns specified credit to new customer. This causes the specified voucher to \r\nfirst be reversed via a credit reversal, after which a second new credit is \r\ncreated, for reassignment to the new customer or debit number specified in \r\nReassignCreditRequest.",
				"operationId": "Credit_Reassign",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "voucherId",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "reassignCreditRequest",
						"in": "body",
						"description": "",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ReassignCreditRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Credit"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/credit-cards/{billingOrganization}/{currencyCode}/{electronicPaymentId}": {
			"get": {
				"tags": [
					"CreditCard"
				],
				"summary": "Get a credit card.",
				"operationId": "CreditCard_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the card holder.",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingOrganization",
						"in": "path",
						"description": "The card's billing organization.",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "path",
						"description": "The card's billing currency. (An Advantage currency code.)",
						"required": true,
						"type": "string"
					},
					{
						"name": "electronicPaymentId",
						"in": "path",
						"description": "The electronic payment ID of the card to update.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SavedCreditCard"
						}
					}
				}
			},
			"post": {
				"tags": [
					"CreditCard"
				],
				"summary": "Updates an existing credit card.",
				"operationId": "CreditCard_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The billing customer",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingOrganization",
						"in": "path",
						"description": "The card's billing organization.",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "path",
						"description": "The card's billing currency. (An Advantage currency code.)",
						"required": true,
						"type": "string"
					},
					{
						"name": "electronicPaymentId",
						"in": "path",
						"description": "The electronic payment ID of the card to update.",
						"required": true,
						"type": "string"
					},
					{
						"name": "updateRequest",
						"in": "body",
						"description": "A CreditCardUpdateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreditCardUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SavedCreditCard"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/credit-cards/{billingOrganization}/{currencyCode}": {
			"get": {
				"tags": [
					"CreditCard"
				],
				"summary": "Get all valid credit cards for the given customer.",
				"operationId": "CreditCard_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the card holder.",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingOrganization",
						"in": "path",
						"description": "The card's billing organization.",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "path",
						"description": "The card's billing currency. (An Advantage currency code.)",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/SavedCreditCard"
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"CreditCard"
				],
				"summary": "Creates a new credit card payment method for the given customer.",
				"operationId": "CreditCard_CreateOrUpdate",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the card holder.",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingOrganization",
						"in": "path",
						"description": "The card's billing organization.",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "path",
						"description": "The card's billing currency. (An Advantage currency code.)",
						"required": true,
						"type": "string"
					},
					{
						"name": "card",
						"in": "body",
						"description": "An AddCreditCardRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreditCardAddRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SavedPaymentResponse"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/credit-cards/{billingOrganization}/{currencyCode}/{electronicPaymentId}/uses": {
			"get": {
				"tags": [
					"CreditCard"
				],
				"summary": "Gets the subscriptions, agreements and orders that currently use a credit card.",
				"operationId": "CreditCard_GetUses",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the card holder.",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingOrganization",
						"in": "path",
						"description": "The card's billing organization.",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "path",
						"description": "The card's billing currency. (An Advantage currency code.)",
						"required": true,
						"type": "string"
					},
					{
						"name": "electronicPaymentId",
						"in": "path",
						"description": "The electronic payment ID of the card to update.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PaymentMethodUses"
						}
					}
				}
			}
		},
		"/authorizations": {
			"post": {
				"tags": [
					"CreditCard"
				],
				"summary": "Creates a new authorization without creating an order or customer.",
				"operationId": "CreditCard_Authorize",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "billingOrganization",
						"in": "query",
						"description": "The card's billing organization.",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "query",
						"description": "The card's billing currency.",
						"required": true,
						"type": "string"
					},
					{
						"name": "request",
						"in": "body",
						"description": "CreditCardAuthorizationRequest containing customer and credit card info for the authorization",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreditCardAuthorizationRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CreditCardAuthorization"
						}
					}
				}
			}
		},
		"/pre-authorizations": {
			"post": {
				"tags": [
					"CreditCard"
				],
				"summary": "Creates a new authorization without creating an order. If authorization is successful, Advantage automatically creates \r\na customer note and links it to the ARPCCT-M record for the authorization.",
				"operationId": "CreditCard_AuthorizeAndCreateCustomer",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "query",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingOrganization",
						"in": "query",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "query",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "request",
						"in": "body",
						"description": "",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreditCardAuthorizationRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CreditCardAuthorization"
						}
					}
				}
			}
		},
		"/payment-methods/credit-cards/{billingOrganization}/{currencyCode}": {
			"get": {
				"tags": [
					"CreditCard"
				],
				"summary": "Get a list of valid card types.",
				"operationId": "CreditCard_GetValidCardTypes",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "billingOrganization",
						"in": "path",
						"description": "The billing organization to filter by.",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "path",
						"description": "The currency code of the currency to filter by.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/CreditCardPaymentMethod"
							}
						}
					}
				}
			}
		},
		"/credit-cards/valid-payment-codes": {
			"get": {
				"tags": [
					"CreditCard"
				],
				"summary": "Returns a list of valid pay codes for a specified credit card prefix",
				"operationId": "CreditCard_GetValidPaymentCodesByPrefix",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "prefix",
						"in": "query",
						"description": "Credit card prefix, up to four digits",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/credit-cards/{billingOrganization}/{currencyCode}/{electronicPaymentId}/eligible-uses": {
			"get": {
				"tags": [
					"CreditCard"
				],
				"summary": "Gets the subscriptions and agreements that are eligible for being auto-charged with the specified saved credit card.\r\nOnly subscriptions and agreements that are already being auto-charged with a bank account or credit card are included.\r\nEligible subscriptions and agreements that are already auto-charged with the specified saved payment are also included.",
				"operationId": "CreditCard_GetEligibleUses",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the card holder.",
						"required": true,
						"type": "string"
					},
					{
						"name": "billingOrganization",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "electronicPaymentId",
						"in": "path",
						"description": "The electronic payment ID of the saved credit card",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PaymentMethodEligibleUses"
						}
					}
				}
			}
		},
		"/customers": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Gets customers matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.\r\nFor example, /customers?FirstName.CN=Matt or /customer-addresses?FirstName.EQ=John&amp;LastName.EQ=Doe",
				"operationId": "Customer_Search",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "includeAllAddresses",
						"in": "query",
						"description": "Include all customer addresses in the response or just the matched address?",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "includeCreditSummary",
						"in": "query",
						"description": "Include the customer's credit summary in the response.",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "propagatePhoneNumber",
						"in": "query",
						"description": "If true, OR clauses using the value in the PhoneNumber comparison will be added for PhoneNumber2\r\n             and PhoneNumber3, if no comparisons for those fields have been specified.",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "CustomerNumber",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName",
						"in": "query",
						"description": "Filter on ATN-NME using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress",
						"in": "query",
						"description": "Filter on ADR-EML using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1",
						"in": "query",
						"description": "Filter on STR-1ST using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2",
						"in": "query",
						"description": "Filter on STR-2ND using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3",
						"in": "query",
						"description": "Filter on STR-3RD using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City",
						"in": "query",
						"description": "Filter on CTM-CTY using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State",
						"in": "query",
						"description": "Filter on CTM-STE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode",
						"in": "query",
						"description": "Filter on CUN-TYP using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber",
						"in": "query",
						"description": "Filter on FAX-NBR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company",
						"in": "query",
						"description": "Filter on CMP-NME using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType",
						"in": "query",
						"description": "Filter on CTM-TYP using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag",
						"in": "query",
						"description": "Filter on PROMO using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners",
						"in": "query",
						"description": "Filter on PMO-PTR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone",
						"in": "query",
						"description": "Filter on PMO-PHN using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax",
						"in": "query",
						"description": "Filter on PMO-FAX using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail",
						"in": "query",
						"description": "Filter on PMO-EML using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail",
						"in": "query",
						"description": "Filter on PMO-ADR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms",
						"in": "query",
						"description": "Filter on PMO-SMS using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title",
						"in": "query",
						"description": "Filter on CTM-TTL using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName",
						"in": "query",
						"description": "Filter on ATN-1ST using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial",
						"in": "query",
						"description": "Filter on ATN-MID using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName",
						"in": "query",
						"description": "Filter on ATN-END using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix",
						"in": "query",
						"description": "Filter on CTM-SFX using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle",
						"in": "query",
						"description": "Filter on JOB-TTL using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode",
						"in": "query",
						"description": "Filter on CTM-POS using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference",
						"in": "query",
						"description": "Filter on COMM-PRF using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion",
						"in": "query",
						"description": "Filter on CTM-SRC using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department",
						"in": "query",
						"description": "Filter on DPT-NME using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode",
						"in": "query",
						"description": "Filter on PIN-CODE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber",
						"in": "query",
						"description": "Filter on SOC-SEC using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName",
						"in": "query",
						"description": "Filter on FSTR-NME using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType",
						"in": "query",
						"description": "Filter on STR-TYP using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex",
						"in": "query",
						"description": "Filter on END-SNDX using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Less",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Greater",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.IsNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Like",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotLike",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Contains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotContains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.StartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.EndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.In",
						"in": "query",
						"description": "Filter on CTM-NBR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Between",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.NotEqual",
						"in": "query",
						"description": "Filter on ATN-NME using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.Less",
						"in": "query",
						"description": "Filter on ATN-NME using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.LessOrEqual",
						"in": "query",
						"description": "Filter on ATN-NME using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.Greater",
						"in": "query",
						"description": "Filter on ATN-NME using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ATN-NME using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.IsNull",
						"in": "query",
						"description": "Filter on ATN-NME using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.IsNotNull",
						"in": "query",
						"description": "Filter on ATN-NME using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.Like",
						"in": "query",
						"description": "Filter on ATN-NME using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.NotLike",
						"in": "query",
						"description": "Filter on ATN-NME using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.Contains",
						"in": "query",
						"description": "Filter on ATN-NME using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.NotContains",
						"in": "query",
						"description": "Filter on ATN-NME using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.StartsWith",
						"in": "query",
						"description": "Filter on ATN-NME using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.NotStartsWith",
						"in": "query",
						"description": "Filter on ATN-NME using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.EndsWith",
						"in": "query",
						"description": "Filter on ATN-NME using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.NotEndsWith",
						"in": "query",
						"description": "Filter on ATN-NME using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.In",
						"in": "query",
						"description": "Filter on ATN-NME using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.Between",
						"in": "query",
						"description": "Filter on ATN-NME using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.NotEqual",
						"in": "query",
						"description": "Filter on ADR-EML using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.Less",
						"in": "query",
						"description": "Filter on ADR-EML using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.LessOrEqual",
						"in": "query",
						"description": "Filter on ADR-EML using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.Greater",
						"in": "query",
						"description": "Filter on ADR-EML using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ADR-EML using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.IsNull",
						"in": "query",
						"description": "Filter on ADR-EML using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.IsNotNull",
						"in": "query",
						"description": "Filter on ADR-EML using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.Like",
						"in": "query",
						"description": "Filter on ADR-EML using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.NotLike",
						"in": "query",
						"description": "Filter on ADR-EML using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.Contains",
						"in": "query",
						"description": "Filter on ADR-EML using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.NotContains",
						"in": "query",
						"description": "Filter on ADR-EML using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.StartsWith",
						"in": "query",
						"description": "Filter on ADR-EML using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.NotStartsWith",
						"in": "query",
						"description": "Filter on ADR-EML using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.EndsWith",
						"in": "query",
						"description": "Filter on ADR-EML using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.NotEndsWith",
						"in": "query",
						"description": "Filter on ADR-EML using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.In",
						"in": "query",
						"description": "Filter on ADR-EML using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.Between",
						"in": "query",
						"description": "Filter on ADR-EML using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.NotEqual",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.Less",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.Greater",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.IsNull",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.IsNotNull",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.Like",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.NotLike",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.Contains",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.NotContains",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.StartsWith",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.EndsWith",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.In",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.Between",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.NotEqual",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.Less",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.LessOrEqual",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.Greater",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.IsNull",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.IsNotNull",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.Like",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.NotLike",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.Contains",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.NotContains",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.StartsWith",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.NotStartsWith",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.EndsWith",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.NotEndsWith",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.In",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.Between",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.NotEqual",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.Less",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.LessOrEqual",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.Greater",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.IsNull",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.IsNotNull",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.Like",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.NotLike",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.Contains",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.NotContains",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.StartsWith",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.NotStartsWith",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.EndsWith",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.NotEndsWith",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.In",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.Between",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.NotEqual",
						"in": "query",
						"description": "Filter on STR-1ST using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.Less",
						"in": "query",
						"description": "Filter on STR-1ST using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.LessOrEqual",
						"in": "query",
						"description": "Filter on STR-1ST using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.Greater",
						"in": "query",
						"description": "Filter on STR-1ST using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.GreaterOrEqual",
						"in": "query",
						"description": "Filter on STR-1ST using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.IsNull",
						"in": "query",
						"description": "Filter on STR-1ST using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.IsNotNull",
						"in": "query",
						"description": "Filter on STR-1ST using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.Like",
						"in": "query",
						"description": "Filter on STR-1ST using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.NotLike",
						"in": "query",
						"description": "Filter on STR-1ST using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.Contains",
						"in": "query",
						"description": "Filter on STR-1ST using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.NotContains",
						"in": "query",
						"description": "Filter on STR-1ST using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.StartsWith",
						"in": "query",
						"description": "Filter on STR-1ST using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.NotStartsWith",
						"in": "query",
						"description": "Filter on STR-1ST using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.EndsWith",
						"in": "query",
						"description": "Filter on STR-1ST using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.NotEndsWith",
						"in": "query",
						"description": "Filter on STR-1ST using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.In",
						"in": "query",
						"description": "Filter on STR-1ST using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.Between",
						"in": "query",
						"description": "Filter on STR-1ST using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.NotEqual",
						"in": "query",
						"description": "Filter on STR-2ND using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.Less",
						"in": "query",
						"description": "Filter on STR-2ND using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.LessOrEqual",
						"in": "query",
						"description": "Filter on STR-2ND using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.Greater",
						"in": "query",
						"description": "Filter on STR-2ND using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.GreaterOrEqual",
						"in": "query",
						"description": "Filter on STR-2ND using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.IsNull",
						"in": "query",
						"description": "Filter on STR-2ND using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.IsNotNull",
						"in": "query",
						"description": "Filter on STR-2ND using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.Like",
						"in": "query",
						"description": "Filter on STR-2ND using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.NotLike",
						"in": "query",
						"description": "Filter on STR-2ND using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.Contains",
						"in": "query",
						"description": "Filter on STR-2ND using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.NotContains",
						"in": "query",
						"description": "Filter on STR-2ND using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.StartsWith",
						"in": "query",
						"description": "Filter on STR-2ND using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.NotStartsWith",
						"in": "query",
						"description": "Filter on STR-2ND using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.EndsWith",
						"in": "query",
						"description": "Filter on STR-2ND using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.NotEndsWith",
						"in": "query",
						"description": "Filter on STR-2ND using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.In",
						"in": "query",
						"description": "Filter on STR-2ND using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.Between",
						"in": "query",
						"description": "Filter on STR-2ND using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.NotEqual",
						"in": "query",
						"description": "Filter on STR-3RD using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.Less",
						"in": "query",
						"description": "Filter on STR-3RD using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.LessOrEqual",
						"in": "query",
						"description": "Filter on STR-3RD using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.Greater",
						"in": "query",
						"description": "Filter on STR-3RD using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.GreaterOrEqual",
						"in": "query",
						"description": "Filter on STR-3RD using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.IsNull",
						"in": "query",
						"description": "Filter on STR-3RD using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.IsNotNull",
						"in": "query",
						"description": "Filter on STR-3RD using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.Like",
						"in": "query",
						"description": "Filter on STR-3RD using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.NotLike",
						"in": "query",
						"description": "Filter on STR-3RD using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.Contains",
						"in": "query",
						"description": "Filter on STR-3RD using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.NotContains",
						"in": "query",
						"description": "Filter on STR-3RD using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.StartsWith",
						"in": "query",
						"description": "Filter on STR-3RD using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.NotStartsWith",
						"in": "query",
						"description": "Filter on STR-3RD using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.EndsWith",
						"in": "query",
						"description": "Filter on STR-3RD using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.NotEndsWith",
						"in": "query",
						"description": "Filter on STR-3RD using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.In",
						"in": "query",
						"description": "Filter on STR-3RD using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.Between",
						"in": "query",
						"description": "Filter on STR-3RD using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.NotEqual",
						"in": "query",
						"description": "Filter on CTM-CTY using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.Less",
						"in": "query",
						"description": "Filter on CTM-CTY using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-CTY using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.Greater",
						"in": "query",
						"description": "Filter on CTM-CTY using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-CTY using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.IsNull",
						"in": "query",
						"description": "Filter on CTM-CTY using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-CTY using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.Like",
						"in": "query",
						"description": "Filter on CTM-CTY using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.NotLike",
						"in": "query",
						"description": "Filter on CTM-CTY using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.Contains",
						"in": "query",
						"description": "Filter on CTM-CTY using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.NotContains",
						"in": "query",
						"description": "Filter on CTM-CTY using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.StartsWith",
						"in": "query",
						"description": "Filter on CTM-CTY using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-CTY using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.EndsWith",
						"in": "query",
						"description": "Filter on CTM-CTY using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-CTY using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.In",
						"in": "query",
						"description": "Filter on CTM-CTY using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.Between",
						"in": "query",
						"description": "Filter on CTM-CTY using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.NotEqual",
						"in": "query",
						"description": "Filter on CTM-STE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.Less",
						"in": "query",
						"description": "Filter on CTM-STE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-STE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.Greater",
						"in": "query",
						"description": "Filter on CTM-STE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-STE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.IsNull",
						"in": "query",
						"description": "Filter on CTM-STE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-STE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.Like",
						"in": "query",
						"description": "Filter on CTM-STE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.NotLike",
						"in": "query",
						"description": "Filter on CTM-STE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.Contains",
						"in": "query",
						"description": "Filter on CTM-STE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.NotContains",
						"in": "query",
						"description": "Filter on CTM-STE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.StartsWith",
						"in": "query",
						"description": "Filter on CTM-STE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-STE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.EndsWith",
						"in": "query",
						"description": "Filter on CTM-STE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-STE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.In",
						"in": "query",
						"description": "Filter on CTM-STE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.Between",
						"in": "query",
						"description": "Filter on CTM-STE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.NotEqual",
						"in": "query",
						"description": "Filter on CUN-TYP using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.Less",
						"in": "query",
						"description": "Filter on CUN-TYP using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.LessOrEqual",
						"in": "query",
						"description": "Filter on CUN-TYP using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.Greater",
						"in": "query",
						"description": "Filter on CUN-TYP using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CUN-TYP using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.IsNull",
						"in": "query",
						"description": "Filter on CUN-TYP using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.IsNotNull",
						"in": "query",
						"description": "Filter on CUN-TYP using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.Like",
						"in": "query",
						"description": "Filter on CUN-TYP using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.NotLike",
						"in": "query",
						"description": "Filter on CUN-TYP using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.Contains",
						"in": "query",
						"description": "Filter on CUN-TYP using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.NotContains",
						"in": "query",
						"description": "Filter on CUN-TYP using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.StartsWith",
						"in": "query",
						"description": "Filter on CUN-TYP using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.NotStartsWith",
						"in": "query",
						"description": "Filter on CUN-TYP using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.EndsWith",
						"in": "query",
						"description": "Filter on CUN-TYP using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.NotEndsWith",
						"in": "query",
						"description": "Filter on CUN-TYP using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.In",
						"in": "query",
						"description": "Filter on CUN-TYP using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.Between",
						"in": "query",
						"description": "Filter on CUN-TYP using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.NotEqual",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.Less",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.LessOrEqual",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.Greater",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.IsNull",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.IsNotNull",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.Like",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.NotLike",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.Contains",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.NotContains",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.StartsWith",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.NotStartsWith",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.EndsWith",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.NotEndsWith",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.In",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.Between",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.NotEqual",
						"in": "query",
						"description": "Filter on FAX-NBR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.Less",
						"in": "query",
						"description": "Filter on FAX-NBR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on FAX-NBR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.Greater",
						"in": "query",
						"description": "Filter on FAX-NBR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on FAX-NBR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.IsNull",
						"in": "query",
						"description": "Filter on FAX-NBR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.IsNotNull",
						"in": "query",
						"description": "Filter on FAX-NBR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.Like",
						"in": "query",
						"description": "Filter on FAX-NBR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.NotLike",
						"in": "query",
						"description": "Filter on FAX-NBR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.Contains",
						"in": "query",
						"description": "Filter on FAX-NBR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.NotContains",
						"in": "query",
						"description": "Filter on FAX-NBR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.StartsWith",
						"in": "query",
						"description": "Filter on FAX-NBR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on FAX-NBR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.EndsWith",
						"in": "query",
						"description": "Filter on FAX-NBR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on FAX-NBR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.In",
						"in": "query",
						"description": "Filter on FAX-NBR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.Between",
						"in": "query",
						"description": "Filter on FAX-NBR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.NotEqual",
						"in": "query",
						"description": "Filter on CMP-NME using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.Less",
						"in": "query",
						"description": "Filter on CMP-NME using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.LessOrEqual",
						"in": "query",
						"description": "Filter on CMP-NME using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.Greater",
						"in": "query",
						"description": "Filter on CMP-NME using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CMP-NME using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.IsNull",
						"in": "query",
						"description": "Filter on CMP-NME using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.IsNotNull",
						"in": "query",
						"description": "Filter on CMP-NME using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.Like",
						"in": "query",
						"description": "Filter on CMP-NME using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.NotLike",
						"in": "query",
						"description": "Filter on CMP-NME using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.Contains",
						"in": "query",
						"description": "Filter on CMP-NME using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.NotContains",
						"in": "query",
						"description": "Filter on CMP-NME using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.StartsWith",
						"in": "query",
						"description": "Filter on CMP-NME using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.NotStartsWith",
						"in": "query",
						"description": "Filter on CMP-NME using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.EndsWith",
						"in": "query",
						"description": "Filter on CMP-NME using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.NotEndsWith",
						"in": "query",
						"description": "Filter on CMP-NME using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.In",
						"in": "query",
						"description": "Filter on CMP-NME using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.Between",
						"in": "query",
						"description": "Filter on CMP-NME using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.NotEqual",
						"in": "query",
						"description": "Filter on CTM-TYP using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.Less",
						"in": "query",
						"description": "Filter on CTM-TYP using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-TYP using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.Greater",
						"in": "query",
						"description": "Filter on CTM-TYP using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-TYP using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.IsNull",
						"in": "query",
						"description": "Filter on CTM-TYP using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-TYP using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.Like",
						"in": "query",
						"description": "Filter on CTM-TYP using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.NotLike",
						"in": "query",
						"description": "Filter on CTM-TYP using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.Contains",
						"in": "query",
						"description": "Filter on CTM-TYP using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.NotContains",
						"in": "query",
						"description": "Filter on CTM-TYP using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.StartsWith",
						"in": "query",
						"description": "Filter on CTM-TYP using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-TYP using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.EndsWith",
						"in": "query",
						"description": "Filter on CTM-TYP using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-TYP using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.In",
						"in": "query",
						"description": "Filter on CTM-TYP using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.Between",
						"in": "query",
						"description": "Filter on CTM-TYP using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.NotEqual",
						"in": "query",
						"description": "Filter on PROMO using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.Less",
						"in": "query",
						"description": "Filter on PROMO using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.LessOrEqual",
						"in": "query",
						"description": "Filter on PROMO using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.Greater",
						"in": "query",
						"description": "Filter on PROMO using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PROMO using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.IsNull",
						"in": "query",
						"description": "Filter on PROMO using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.IsNotNull",
						"in": "query",
						"description": "Filter on PROMO using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.Like",
						"in": "query",
						"description": "Filter on PROMO using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.NotLike",
						"in": "query",
						"description": "Filter on PROMO using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.Contains",
						"in": "query",
						"description": "Filter on PROMO using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.NotContains",
						"in": "query",
						"description": "Filter on PROMO using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.StartsWith",
						"in": "query",
						"description": "Filter on PROMO using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.NotStartsWith",
						"in": "query",
						"description": "Filter on PROMO using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.EndsWith",
						"in": "query",
						"description": "Filter on PROMO using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.NotEndsWith",
						"in": "query",
						"description": "Filter on PROMO using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.In",
						"in": "query",
						"description": "Filter on PROMO using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.Between",
						"in": "query",
						"description": "Filter on PROMO using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.NotEqual",
						"in": "query",
						"description": "Filter on PMO-PTR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.Less",
						"in": "query",
						"description": "Filter on PMO-PTR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-PTR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.Greater",
						"in": "query",
						"description": "Filter on PMO-PTR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-PTR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.IsNull",
						"in": "query",
						"description": "Filter on PMO-PTR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-PTR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.Like",
						"in": "query",
						"description": "Filter on PMO-PTR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.NotLike",
						"in": "query",
						"description": "Filter on PMO-PTR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.Contains",
						"in": "query",
						"description": "Filter on PMO-PTR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.NotContains",
						"in": "query",
						"description": "Filter on PMO-PTR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.StartsWith",
						"in": "query",
						"description": "Filter on PMO-PTR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-PTR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.EndsWith",
						"in": "query",
						"description": "Filter on PMO-PTR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-PTR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.In",
						"in": "query",
						"description": "Filter on PMO-PTR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.Between",
						"in": "query",
						"description": "Filter on PMO-PTR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.NotEqual",
						"in": "query",
						"description": "Filter on PMO-PHN using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.Less",
						"in": "query",
						"description": "Filter on PMO-PHN using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-PHN using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.Greater",
						"in": "query",
						"description": "Filter on PMO-PHN using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-PHN using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.IsNull",
						"in": "query",
						"description": "Filter on PMO-PHN using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-PHN using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.Like",
						"in": "query",
						"description": "Filter on PMO-PHN using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.NotLike",
						"in": "query",
						"description": "Filter on PMO-PHN using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.Contains",
						"in": "query",
						"description": "Filter on PMO-PHN using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.NotContains",
						"in": "query",
						"description": "Filter on PMO-PHN using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.StartsWith",
						"in": "query",
						"description": "Filter on PMO-PHN using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-PHN using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.EndsWith",
						"in": "query",
						"description": "Filter on PMO-PHN using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-PHN using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.In",
						"in": "query",
						"description": "Filter on PMO-PHN using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.Between",
						"in": "query",
						"description": "Filter on PMO-PHN using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.NotEqual",
						"in": "query",
						"description": "Filter on PMO-FAX using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.Less",
						"in": "query",
						"description": "Filter on PMO-FAX using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-FAX using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.Greater",
						"in": "query",
						"description": "Filter on PMO-FAX using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-FAX using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.IsNull",
						"in": "query",
						"description": "Filter on PMO-FAX using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-FAX using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.Like",
						"in": "query",
						"description": "Filter on PMO-FAX using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.NotLike",
						"in": "query",
						"description": "Filter on PMO-FAX using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.Contains",
						"in": "query",
						"description": "Filter on PMO-FAX using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.NotContains",
						"in": "query",
						"description": "Filter on PMO-FAX using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.StartsWith",
						"in": "query",
						"description": "Filter on PMO-FAX using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-FAX using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.EndsWith",
						"in": "query",
						"description": "Filter on PMO-FAX using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-FAX using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.In",
						"in": "query",
						"description": "Filter on PMO-FAX using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.Between",
						"in": "query",
						"description": "Filter on PMO-FAX using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.NotEqual",
						"in": "query",
						"description": "Filter on PMO-EML using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.Less",
						"in": "query",
						"description": "Filter on PMO-EML using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-EML using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.Greater",
						"in": "query",
						"description": "Filter on PMO-EML using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-EML using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.IsNull",
						"in": "query",
						"description": "Filter on PMO-EML using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-EML using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.Like",
						"in": "query",
						"description": "Filter on PMO-EML using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.NotLike",
						"in": "query",
						"description": "Filter on PMO-EML using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.Contains",
						"in": "query",
						"description": "Filter on PMO-EML using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.NotContains",
						"in": "query",
						"description": "Filter on PMO-EML using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.StartsWith",
						"in": "query",
						"description": "Filter on PMO-EML using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-EML using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.EndsWith",
						"in": "query",
						"description": "Filter on PMO-EML using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-EML using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.In",
						"in": "query",
						"description": "Filter on PMO-EML using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.Between",
						"in": "query",
						"description": "Filter on PMO-EML using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.NotEqual",
						"in": "query",
						"description": "Filter on PMO-ADR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.Less",
						"in": "query",
						"description": "Filter on PMO-ADR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-ADR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.Greater",
						"in": "query",
						"description": "Filter on PMO-ADR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-ADR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.IsNull",
						"in": "query",
						"description": "Filter on PMO-ADR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-ADR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.Like",
						"in": "query",
						"description": "Filter on PMO-ADR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.NotLike",
						"in": "query",
						"description": "Filter on PMO-ADR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.Contains",
						"in": "query",
						"description": "Filter on PMO-ADR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.NotContains",
						"in": "query",
						"description": "Filter on PMO-ADR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.StartsWith",
						"in": "query",
						"description": "Filter on PMO-ADR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-ADR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.EndsWith",
						"in": "query",
						"description": "Filter on PMO-ADR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-ADR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.In",
						"in": "query",
						"description": "Filter on PMO-ADR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.Between",
						"in": "query",
						"description": "Filter on PMO-ADR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.NotEqual",
						"in": "query",
						"description": "Filter on PMO-SMS using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.Less",
						"in": "query",
						"description": "Filter on PMO-SMS using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-SMS using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.Greater",
						"in": "query",
						"description": "Filter on PMO-SMS using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-SMS using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.IsNull",
						"in": "query",
						"description": "Filter on PMO-SMS using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-SMS using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.Like",
						"in": "query",
						"description": "Filter on PMO-SMS using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.NotLike",
						"in": "query",
						"description": "Filter on PMO-SMS using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.Contains",
						"in": "query",
						"description": "Filter on PMO-SMS using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.NotContains",
						"in": "query",
						"description": "Filter on PMO-SMS using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.StartsWith",
						"in": "query",
						"description": "Filter on PMO-SMS using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-SMS using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.EndsWith",
						"in": "query",
						"description": "Filter on PMO-SMS using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-SMS using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.In",
						"in": "query",
						"description": "Filter on PMO-SMS using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.Between",
						"in": "query",
						"description": "Filter on PMO-SMS using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.NotEqual",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.Less",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.Greater",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.IsNull",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.Like",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.NotLike",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.Contains",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.NotContains",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.StartsWith",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.EndsWith",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.In",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.Between",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.NotEqual",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.Less",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.Greater",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.IsNull",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.Like",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.NotLike",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.Contains",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.NotContains",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.StartsWith",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.EndsWith",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.In",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.Between",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.NotEqual",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.Less",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.Greater",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.IsNull",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.Like",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.NotLike",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.Contains",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.NotContains",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.StartsWith",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.EndsWith",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.In",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.Between",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.NotEqual",
						"in": "query",
						"description": "Filter on CTM-TTL using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.Less",
						"in": "query",
						"description": "Filter on CTM-TTL using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-TTL using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.Greater",
						"in": "query",
						"description": "Filter on CTM-TTL using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-TTL using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.IsNull",
						"in": "query",
						"description": "Filter on CTM-TTL using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-TTL using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.Like",
						"in": "query",
						"description": "Filter on CTM-TTL using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.NotLike",
						"in": "query",
						"description": "Filter on CTM-TTL using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.Contains",
						"in": "query",
						"description": "Filter on CTM-TTL using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.NotContains",
						"in": "query",
						"description": "Filter on CTM-TTL using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.StartsWith",
						"in": "query",
						"description": "Filter on CTM-TTL using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-TTL using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.EndsWith",
						"in": "query",
						"description": "Filter on CTM-TTL using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-TTL using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.In",
						"in": "query",
						"description": "Filter on CTM-TTL using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.Between",
						"in": "query",
						"description": "Filter on CTM-TTL using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.NotEqual",
						"in": "query",
						"description": "Filter on ATN-1ST using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.Less",
						"in": "query",
						"description": "Filter on ATN-1ST using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.LessOrEqual",
						"in": "query",
						"description": "Filter on ATN-1ST using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.Greater",
						"in": "query",
						"description": "Filter on ATN-1ST using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ATN-1ST using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.IsNull",
						"in": "query",
						"description": "Filter on ATN-1ST using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.IsNotNull",
						"in": "query",
						"description": "Filter on ATN-1ST using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.Like",
						"in": "query",
						"description": "Filter on ATN-1ST using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.NotLike",
						"in": "query",
						"description": "Filter on ATN-1ST using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.Contains",
						"in": "query",
						"description": "Filter on ATN-1ST using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.NotContains",
						"in": "query",
						"description": "Filter on ATN-1ST using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.StartsWith",
						"in": "query",
						"description": "Filter on ATN-1ST using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.NotStartsWith",
						"in": "query",
						"description": "Filter on ATN-1ST using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.EndsWith",
						"in": "query",
						"description": "Filter on ATN-1ST using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.NotEndsWith",
						"in": "query",
						"description": "Filter on ATN-1ST using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.In",
						"in": "query",
						"description": "Filter on ATN-1ST using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.Between",
						"in": "query",
						"description": "Filter on ATN-1ST using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.NotEqual",
						"in": "query",
						"description": "Filter on ATN-MID using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.Less",
						"in": "query",
						"description": "Filter on ATN-MID using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.LessOrEqual",
						"in": "query",
						"description": "Filter on ATN-MID using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.Greater",
						"in": "query",
						"description": "Filter on ATN-MID using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ATN-MID using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.IsNull",
						"in": "query",
						"description": "Filter on ATN-MID using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.IsNotNull",
						"in": "query",
						"description": "Filter on ATN-MID using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.Like",
						"in": "query",
						"description": "Filter on ATN-MID using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.NotLike",
						"in": "query",
						"description": "Filter on ATN-MID using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.Contains",
						"in": "query",
						"description": "Filter on ATN-MID using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.NotContains",
						"in": "query",
						"description": "Filter on ATN-MID using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.StartsWith",
						"in": "query",
						"description": "Filter on ATN-MID using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.NotStartsWith",
						"in": "query",
						"description": "Filter on ATN-MID using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.EndsWith",
						"in": "query",
						"description": "Filter on ATN-MID using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.NotEndsWith",
						"in": "query",
						"description": "Filter on ATN-MID using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.In",
						"in": "query",
						"description": "Filter on ATN-MID using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.Between",
						"in": "query",
						"description": "Filter on ATN-MID using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.NotEqual",
						"in": "query",
						"description": "Filter on ATN-END using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.Less",
						"in": "query",
						"description": "Filter on ATN-END using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.LessOrEqual",
						"in": "query",
						"description": "Filter on ATN-END using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.Greater",
						"in": "query",
						"description": "Filter on ATN-END using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ATN-END using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.IsNull",
						"in": "query",
						"description": "Filter on ATN-END using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.IsNotNull",
						"in": "query",
						"description": "Filter on ATN-END using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.Like",
						"in": "query",
						"description": "Filter on ATN-END using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.NotLike",
						"in": "query",
						"description": "Filter on ATN-END using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.Contains",
						"in": "query",
						"description": "Filter on ATN-END using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.NotContains",
						"in": "query",
						"description": "Filter on ATN-END using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.StartsWith",
						"in": "query",
						"description": "Filter on ATN-END using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.NotStartsWith",
						"in": "query",
						"description": "Filter on ATN-END using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.EndsWith",
						"in": "query",
						"description": "Filter on ATN-END using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.NotEndsWith",
						"in": "query",
						"description": "Filter on ATN-END using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.In",
						"in": "query",
						"description": "Filter on ATN-END using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.Between",
						"in": "query",
						"description": "Filter on ATN-END using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.NotEqual",
						"in": "query",
						"description": "Filter on CTM-SFX using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.Less",
						"in": "query",
						"description": "Filter on CTM-SFX using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-SFX using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.Greater",
						"in": "query",
						"description": "Filter on CTM-SFX using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-SFX using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.IsNull",
						"in": "query",
						"description": "Filter on CTM-SFX using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-SFX using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.Like",
						"in": "query",
						"description": "Filter on CTM-SFX using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.NotLike",
						"in": "query",
						"description": "Filter on CTM-SFX using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.Contains",
						"in": "query",
						"description": "Filter on CTM-SFX using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.NotContains",
						"in": "query",
						"description": "Filter on CTM-SFX using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.StartsWith",
						"in": "query",
						"description": "Filter on CTM-SFX using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-SFX using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.EndsWith",
						"in": "query",
						"description": "Filter on CTM-SFX using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-SFX using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.In",
						"in": "query",
						"description": "Filter on CTM-SFX using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.Between",
						"in": "query",
						"description": "Filter on CTM-SFX using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.NotEqual",
						"in": "query",
						"description": "Filter on JOB-TTL using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.Less",
						"in": "query",
						"description": "Filter on JOB-TTL using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.LessOrEqual",
						"in": "query",
						"description": "Filter on JOB-TTL using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.Greater",
						"in": "query",
						"description": "Filter on JOB-TTL using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.GreaterOrEqual",
						"in": "query",
						"description": "Filter on JOB-TTL using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.IsNull",
						"in": "query",
						"description": "Filter on JOB-TTL using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.IsNotNull",
						"in": "query",
						"description": "Filter on JOB-TTL using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.Like",
						"in": "query",
						"description": "Filter on JOB-TTL using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.NotLike",
						"in": "query",
						"description": "Filter on JOB-TTL using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.Contains",
						"in": "query",
						"description": "Filter on JOB-TTL using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.NotContains",
						"in": "query",
						"description": "Filter on JOB-TTL using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.StartsWith",
						"in": "query",
						"description": "Filter on JOB-TTL using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.NotStartsWith",
						"in": "query",
						"description": "Filter on JOB-TTL using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.EndsWith",
						"in": "query",
						"description": "Filter on JOB-TTL using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.NotEndsWith",
						"in": "query",
						"description": "Filter on JOB-TTL using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.In",
						"in": "query",
						"description": "Filter on JOB-TTL using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.Between",
						"in": "query",
						"description": "Filter on JOB-TTL using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.NotEqual",
						"in": "query",
						"description": "Filter on CTM-POS using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.Less",
						"in": "query",
						"description": "Filter on CTM-POS using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-POS using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.Greater",
						"in": "query",
						"description": "Filter on CTM-POS using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-POS using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.IsNull",
						"in": "query",
						"description": "Filter on CTM-POS using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-POS using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.Like",
						"in": "query",
						"description": "Filter on CTM-POS using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.NotLike",
						"in": "query",
						"description": "Filter on CTM-POS using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.Contains",
						"in": "query",
						"description": "Filter on CTM-POS using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.NotContains",
						"in": "query",
						"description": "Filter on CTM-POS using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.StartsWith",
						"in": "query",
						"description": "Filter on CTM-POS using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-POS using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.EndsWith",
						"in": "query",
						"description": "Filter on CTM-POS using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-POS using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.In",
						"in": "query",
						"description": "Filter on CTM-POS using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.Between",
						"in": "query",
						"description": "Filter on CTM-POS using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.NotEqual",
						"in": "query",
						"description": "Filter on COMM-PRF using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.Less",
						"in": "query",
						"description": "Filter on COMM-PRF using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.LessOrEqual",
						"in": "query",
						"description": "Filter on COMM-PRF using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.Greater",
						"in": "query",
						"description": "Filter on COMM-PRF using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.GreaterOrEqual",
						"in": "query",
						"description": "Filter on COMM-PRF using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.IsNull",
						"in": "query",
						"description": "Filter on COMM-PRF using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.IsNotNull",
						"in": "query",
						"description": "Filter on COMM-PRF using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.Like",
						"in": "query",
						"description": "Filter on COMM-PRF using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.NotLike",
						"in": "query",
						"description": "Filter on COMM-PRF using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.Contains",
						"in": "query",
						"description": "Filter on COMM-PRF using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.NotContains",
						"in": "query",
						"description": "Filter on COMM-PRF using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.StartsWith",
						"in": "query",
						"description": "Filter on COMM-PRF using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.NotStartsWith",
						"in": "query",
						"description": "Filter on COMM-PRF using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.EndsWith",
						"in": "query",
						"description": "Filter on COMM-PRF using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.NotEndsWith",
						"in": "query",
						"description": "Filter on COMM-PRF using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.In",
						"in": "query",
						"description": "Filter on COMM-PRF using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.Between",
						"in": "query",
						"description": "Filter on COMM-PRF using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.NotEqual",
						"in": "query",
						"description": "Filter on CTM-SRC using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.Less",
						"in": "query",
						"description": "Filter on CTM-SRC using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-SRC using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.Greater",
						"in": "query",
						"description": "Filter on CTM-SRC using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-SRC using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.IsNull",
						"in": "query",
						"description": "Filter on CTM-SRC using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-SRC using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.Like",
						"in": "query",
						"description": "Filter on CTM-SRC using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.NotLike",
						"in": "query",
						"description": "Filter on CTM-SRC using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.Contains",
						"in": "query",
						"description": "Filter on CTM-SRC using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.NotContains",
						"in": "query",
						"description": "Filter on CTM-SRC using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.StartsWith",
						"in": "query",
						"description": "Filter on CTM-SRC using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-SRC using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.EndsWith",
						"in": "query",
						"description": "Filter on CTM-SRC using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-SRC using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.In",
						"in": "query",
						"description": "Filter on CTM-SRC using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.Between",
						"in": "query",
						"description": "Filter on CTM-SRC using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.NotEqual",
						"in": "query",
						"description": "Filter on ADR-CDE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.Less",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.LessOrEqual",
						"in": "query",
						"description": "Filter on ADR-CDE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.Greater",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ADR-CDE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.IsNull",
						"in": "query",
						"description": "Filter on ADR-CDE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.IsNotNull",
						"in": "query",
						"description": "Filter on ADR-CDE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.Like",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.NotLike",
						"in": "query",
						"description": "Filter on ADR-CDE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.Contains",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.NotContains",
						"in": "query",
						"description": "Filter on ADR-CDE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.StartsWith",
						"in": "query",
						"description": "Filter on ADR-CDE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.NotStartsWith",
						"in": "query",
						"description": "Filter on ADR-CDE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.EndsWith",
						"in": "query",
						"description": "Filter on ADR-CDE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.NotEndsWith",
						"in": "query",
						"description": "Filter on ADR-CDE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.In",
						"in": "query",
						"description": "Filter on ADR-CDE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.Between",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.NotEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.Less",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.LessOrEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.Greater",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.GreaterOrEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.IsNull",
						"in": "query",
						"description": "Filter on BIL-CUR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.IsNotNull",
						"in": "query",
						"description": "Filter on BIL-CUR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.Like",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.NotLike",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.Contains",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.NotContains",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.StartsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.NotStartsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.EndsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.NotEndsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.In",
						"in": "query",
						"description": "Filter on BIL-CUR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.Between",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.NotEqual",
						"in": "query",
						"description": "Filter on DPT-NME using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.Less",
						"in": "query",
						"description": "Filter on DPT-NME using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.LessOrEqual",
						"in": "query",
						"description": "Filter on DPT-NME using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.Greater",
						"in": "query",
						"description": "Filter on DPT-NME using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.GreaterOrEqual",
						"in": "query",
						"description": "Filter on DPT-NME using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.IsNull",
						"in": "query",
						"description": "Filter on DPT-NME using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.IsNotNull",
						"in": "query",
						"description": "Filter on DPT-NME using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.Like",
						"in": "query",
						"description": "Filter on DPT-NME using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.NotLike",
						"in": "query",
						"description": "Filter on DPT-NME using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.Contains",
						"in": "query",
						"description": "Filter on DPT-NME using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.NotContains",
						"in": "query",
						"description": "Filter on DPT-NME using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.StartsWith",
						"in": "query",
						"description": "Filter on DPT-NME using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.NotStartsWith",
						"in": "query",
						"description": "Filter on DPT-NME using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.EndsWith",
						"in": "query",
						"description": "Filter on DPT-NME using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.NotEndsWith",
						"in": "query",
						"description": "Filter on DPT-NME using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.In",
						"in": "query",
						"description": "Filter on DPT-NME using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.Between",
						"in": "query",
						"description": "Filter on DPT-NME using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.NotEqual",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.Less",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.Greater",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.IsNull",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.Like",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.NotLike",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.Contains",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.NotContains",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.StartsWith",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.EndsWith",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.In",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.Between",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.NotEqual",
						"in": "query",
						"description": "Filter on PIN-CODE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.Less",
						"in": "query",
						"description": "Filter on PIN-CODE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.LessOrEqual",
						"in": "query",
						"description": "Filter on PIN-CODE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.Greater",
						"in": "query",
						"description": "Filter on PIN-CODE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PIN-CODE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.IsNull",
						"in": "query",
						"description": "Filter on PIN-CODE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.IsNotNull",
						"in": "query",
						"description": "Filter on PIN-CODE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.Like",
						"in": "query",
						"description": "Filter on PIN-CODE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.NotLike",
						"in": "query",
						"description": "Filter on PIN-CODE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.Contains",
						"in": "query",
						"description": "Filter on PIN-CODE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.NotContains",
						"in": "query",
						"description": "Filter on PIN-CODE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.StartsWith",
						"in": "query",
						"description": "Filter on PIN-CODE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.NotStartsWith",
						"in": "query",
						"description": "Filter on PIN-CODE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.EndsWith",
						"in": "query",
						"description": "Filter on PIN-CODE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.NotEndsWith",
						"in": "query",
						"description": "Filter on PIN-CODE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.In",
						"in": "query",
						"description": "Filter on PIN-CODE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.Between",
						"in": "query",
						"description": "Filter on PIN-CODE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.NotEqual",
						"in": "query",
						"description": "Filter on SOC-SEC using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.Less",
						"in": "query",
						"description": "Filter on SOC-SEC using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on SOC-SEC using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.Greater",
						"in": "query",
						"description": "Filter on SOC-SEC using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on SOC-SEC using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.IsNull",
						"in": "query",
						"description": "Filter on SOC-SEC using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.IsNotNull",
						"in": "query",
						"description": "Filter on SOC-SEC using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.Like",
						"in": "query",
						"description": "Filter on SOC-SEC using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.NotLike",
						"in": "query",
						"description": "Filter on SOC-SEC using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.Contains",
						"in": "query",
						"description": "Filter on SOC-SEC using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.NotContains",
						"in": "query",
						"description": "Filter on SOC-SEC using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.StartsWith",
						"in": "query",
						"description": "Filter on SOC-SEC using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on SOC-SEC using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.EndsWith",
						"in": "query",
						"description": "Filter on SOC-SEC using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on SOC-SEC using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.In",
						"in": "query",
						"description": "Filter on SOC-SEC using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.Between",
						"in": "query",
						"description": "Filter on SOC-SEC using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.NotEqual",
						"in": "query",
						"description": "Filter on FSTR-NME using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.Less",
						"in": "query",
						"description": "Filter on FSTR-NME using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.LessOrEqual",
						"in": "query",
						"description": "Filter on FSTR-NME using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.Greater",
						"in": "query",
						"description": "Filter on FSTR-NME using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.GreaterOrEqual",
						"in": "query",
						"description": "Filter on FSTR-NME using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.IsNull",
						"in": "query",
						"description": "Filter on FSTR-NME using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.IsNotNull",
						"in": "query",
						"description": "Filter on FSTR-NME using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.Like",
						"in": "query",
						"description": "Filter on FSTR-NME using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.NotLike",
						"in": "query",
						"description": "Filter on FSTR-NME using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.Contains",
						"in": "query",
						"description": "Filter on FSTR-NME using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.NotContains",
						"in": "query",
						"description": "Filter on FSTR-NME using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.StartsWith",
						"in": "query",
						"description": "Filter on FSTR-NME using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.NotStartsWith",
						"in": "query",
						"description": "Filter on FSTR-NME using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.EndsWith",
						"in": "query",
						"description": "Filter on FSTR-NME using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.NotEndsWith",
						"in": "query",
						"description": "Filter on FSTR-NME using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.In",
						"in": "query",
						"description": "Filter on FSTR-NME using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.Between",
						"in": "query",
						"description": "Filter on FSTR-NME using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.NotEqual",
						"in": "query",
						"description": "Filter on STR-TYP using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.Less",
						"in": "query",
						"description": "Filter on STR-TYP using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.LessOrEqual",
						"in": "query",
						"description": "Filter on STR-TYP using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.Greater",
						"in": "query",
						"description": "Filter on STR-TYP using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.GreaterOrEqual",
						"in": "query",
						"description": "Filter on STR-TYP using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.IsNull",
						"in": "query",
						"description": "Filter on STR-TYP using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.IsNotNull",
						"in": "query",
						"description": "Filter on STR-TYP using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.Like",
						"in": "query",
						"description": "Filter on STR-TYP using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.NotLike",
						"in": "query",
						"description": "Filter on STR-TYP using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.Contains",
						"in": "query",
						"description": "Filter on STR-TYP using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.NotContains",
						"in": "query",
						"description": "Filter on STR-TYP using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.StartsWith",
						"in": "query",
						"description": "Filter on STR-TYP using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.NotStartsWith",
						"in": "query",
						"description": "Filter on STR-TYP using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.EndsWith",
						"in": "query",
						"description": "Filter on STR-TYP using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.NotEndsWith",
						"in": "query",
						"description": "Filter on STR-TYP using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.In",
						"in": "query",
						"description": "Filter on STR-TYP using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.Between",
						"in": "query",
						"description": "Filter on STR-TYP using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.NotEqual",
						"in": "query",
						"description": "Filter on UPD-DTE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.Less",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.LessOrEqual",
						"in": "query",
						"description": "Filter on UPD-DTE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.Greater",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.GreaterOrEqual",
						"in": "query",
						"description": "Filter on UPD-DTE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.IsNull",
						"in": "query",
						"description": "Filter on UPD-DTE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.IsNotNull",
						"in": "query",
						"description": "Filter on UPD-DTE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.Like",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.NotLike",
						"in": "query",
						"description": "Filter on UPD-DTE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.Contains",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.NotContains",
						"in": "query",
						"description": "Filter on UPD-DTE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.StartsWith",
						"in": "query",
						"description": "Filter on UPD-DTE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.NotStartsWith",
						"in": "query",
						"description": "Filter on UPD-DTE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.EndsWith",
						"in": "query",
						"description": "Filter on UPD-DTE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.NotEndsWith",
						"in": "query",
						"description": "Filter on UPD-DTE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.In",
						"in": "query",
						"description": "Filter on UPD-DTE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.Between",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotEqual",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Less",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on ITM-NUM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Greater",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ITM-NUM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.IsNull",
						"in": "query",
						"description": "Filter on ITM-NUM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.IsNotNull",
						"in": "query",
						"description": "Filter on ITM-NUM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Like",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotLike",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Contains",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotContains",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.StartsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.EndsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.In",
						"in": "query",
						"description": "Filter on ITM-NUM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Between",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.NotEqual",
						"in": "query",
						"description": "Filter on END-SNDX using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.Less",
						"in": "query",
						"description": "Filter on END-SNDX using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.LessOrEqual",
						"in": "query",
						"description": "Filter on END-SNDX using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.Greater",
						"in": "query",
						"description": "Filter on END-SNDX using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.GreaterOrEqual",
						"in": "query",
						"description": "Filter on END-SNDX using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.IsNull",
						"in": "query",
						"description": "Filter on END-SNDX using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.IsNotNull",
						"in": "query",
						"description": "Filter on END-SNDX using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.Like",
						"in": "query",
						"description": "Filter on END-SNDX using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.NotLike",
						"in": "query",
						"description": "Filter on END-SNDX using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.Contains",
						"in": "query",
						"description": "Filter on END-SNDX using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.NotContains",
						"in": "query",
						"description": "Filter on END-SNDX using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.StartsWith",
						"in": "query",
						"description": "Filter on END-SNDX using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.NotStartsWith",
						"in": "query",
						"description": "Filter on END-SNDX using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.EndsWith",
						"in": "query",
						"description": "Filter on END-SNDX using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.NotEndsWith",
						"in": "query",
						"description": "Filter on END-SNDX using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.In",
						"in": "query",
						"description": "Filter on END-SNDX using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.Between",
						"in": "query",
						"description": "Filter on END-SNDX using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.NotEqual",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.Less",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.LessOrEqual",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.Greater",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.IsNull",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.IsNotNull",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.Like",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.NotLike",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.Contains",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.NotContains",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.StartsWith",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.NotStartsWith",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.EndsWith",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.NotEndsWith",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.In",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.Between",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'Between' operator",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Customer]"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Customer"
				],
				"summary": "Creates a new customer and optionally assigns a username/password to register the customer\r\non a website.\r\nIf the customer name is provided then the individual name fields (i.e. name title,\r\nname first, etc.) are ignored; their values will be derived by parsing the\r\ncustomer name parameter.  If the customer name is not provided then the individual\r\nname fields will be used to populate the customer address record instead.\r\nBy default, a search is made to see if this customer would be considered a duplicate.\r\nIf an \"exact\" match is found with an existing customer (see the WEB/DUPMTCEX option)\r\nthen a new customer is NOT created.  Instead, the existing customer number is returned.\r\nExamine the address code in the response to see which address code was used.  The address code may\r\nnot be the same as the requested address code if a duplicate customer was found.",
				"operationId": "Customer_Create",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "accountCreateRequest",
						"in": "body",
						"description": "An AccountCreateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AccountCreateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AccountCreateResponse"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/last-name/validate": {
			"post": {
				"tags": [
					"Customer"
				],
				"summary": "Validate that a customer number identifies a customer with the specified last name (surname).\r\nA 404 Not Found status is returned if validation fails.",
				"operationId": "Customer_ValidateLastName",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The advantage customer number to validate against.",
						"required": true,
						"type": "string"
					},
					{
						"name": "lastName",
						"in": "body",
						"description": "The last name of the customer to validate against.",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/customers/{customerNumber}/postal-code/validate": {
			"post": {
				"tags": [
					"Customer"
				],
				"summary": "Validate that a customer number identifies a customer with the specified country and postal code.\r\nA 404 Not Found status is returned if validation fails.",
				"operationId": "Customer_ValidatePostalCode",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The advantage customer number to validate against.",
						"required": true,
						"type": "string"
					},
					{
						"name": "request",
						"in": "body",
						"description": "The country code and postal code of the customer to validate against.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ValidateAccountPostalCodeRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/customers/{customerNumber}/activate": {
			"post": {
				"tags": [
					"Customer"
				],
				"summary": "Create a login and attach it to an already existing customer.",
				"operationId": "Customer_Activate",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number to create the login for.",
						"required": true,
						"type": "string"
					},
					{
						"name": "activateAccountRequest",
						"in": "body",
						"description": "An ActivateAccountRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ActivateAccountRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AccountCreateResponse"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Gets customer and address information for a given customer number.",
				"operationId": "Customer_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the address to find.",
						"required": true,
						"type": "string"
					},
					{
						"name": "includeAllAddresses",
						"in": "query",
						"description": "Include all customer addresses in the response or just the customer's default address?",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "includeCreditSummary",
						"in": "query",
						"description": "Include the customer's credit summary in the response.",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Customer"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Customer"
				],
				"summary": "Updates all of the customer addresses for the given customer.  If an address does not exist, it is added.\r\nIf it does exist, is updated with the information provided.\r\nIn the case of an address update:\r\nIf the address is a temporary address that is currently in effect, changes to the\r\naddress will not become effective until the CDS750 address swapping process runs.\r\nIn the case of a new address:\r\nIf the customer name is provided then the individual name fields (i.e. name title,\r\nname first, etc.) are ignored; their values will be derived by parsing the\r\ncustomer name parameter.  If the customer name is not provided then the individual\r\nname fields will be used to populate the customer address record instead.",
				"operationId": "Customer_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the customer to update.",
						"required": true,
						"type": "string"
					},
					{
						"name": "customerUpdateRequest",
						"in": "body",
						"description": "A CustomerUpdateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CustomerUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/customers/{customerNumber}/Emails": {
			"post": {
				"tags": [
					"Customer"
				],
				"summary": "Adds or Updates all of the customer email addresses in the list.  If an email address does not exist, it is added.\r\nIf it does exist, is updated with the information provided. The email address value must be provided in each element\r\nin the list. The email Id will be ignored if not provided.\r\nValues in the list which are null will not be updated. On a new record, IsEmailValid will default to true.",
				"operationId": "Customer_AddOrUpdateCustomerEmails",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the customer to update.",
						"required": true,
						"type": "string"
					},
					{
						"name": "customerEmailUpdates",
						"in": "body",
						"description": "A list of customer email update requests.",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/CustomerEmailUpdateRequest"
							}
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/customers/{customerNumber}/addresses": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Gets all of the addresses for a given customer.",
				"operationId": "Customer_GetAddresses",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the addresses to find.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/CustomerAddress"
							}
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/activity": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Gets all activity for a given customer.",
				"operationId": "Customer_GetActivity",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the activity to find.",
						"required": true,
						"type": "string"
					},
					{
						"name": "selectedFields",
						"in": "query",
						"description": "Indicates which properties of the model should be populated.\r\n            Selecting a limited number of fields may improve performance. Key fields and pager.OrderByFields fields are always included.\r\n            If null, all properties in the model will be populated.",
						"required": true,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"SystemName",
								"ProductType",
								"ItemNumber",
								"StatusDescription",
								"ActivityId",
								"TermNumber",
								"SequenceNumber",
								"Status",
								"CustomerNumber",
								"AddressCode",
								"SubReference",
								"AgreementId",
								"CustomerPoNumber",
								"OriginalOrderNumber",
								"OwningOrganization",
								"ItemDescription",
								"FinalExpireDate",
								"MembershipOrganization",
								"MembershipCategory",
								"ControlGroupDate",
								"ControlGroupId",
								"PromotionCode",
								"PromotionChoice",
								"Rate",
								"RemainingLiability",
								"BillingStatus",
								"BillingStatusDescription",
								"CirculationStatus",
								"CirculationStatusDescription"
							]
						},
						"collectionFormat": "multi"
					},
					{
						"name": "pager.orderByFields",
						"in": "query",
						"description": "Enumeration of order by columns",
						"required": false,
						"type": "array",
						"items": {},
						"collectionFormat": "multi"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "SystemName",
						"in": "query",
						"description": "Filter on ITM-SYS using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber",
						"in": "query",
						"description": "Filter on ORG-ORD using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SystemName.NotEqual",
						"in": "query",
						"description": "Filter on ITM-SYS using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SystemName.Less",
						"in": "query",
						"description": "Filter on ITM-SYS using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SystemName.LessOrEqual",
						"in": "query",
						"description": "Filter on ITM-SYS using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SystemName.Greater",
						"in": "query",
						"description": "Filter on ITM-SYS using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SystemName.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ITM-SYS using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SystemName.IsNull",
						"in": "query",
						"description": "Filter on ITM-SYS using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SystemName.IsNotNull",
						"in": "query",
						"description": "Filter on ITM-SYS using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SystemName.Like",
						"in": "query",
						"description": "Filter on ITM-SYS using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SystemName.NotLike",
						"in": "query",
						"description": "Filter on ITM-SYS using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SystemName.Contains",
						"in": "query",
						"description": "Filter on ITM-SYS using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SystemName.NotContains",
						"in": "query",
						"description": "Filter on ITM-SYS using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SystemName.StartsWith",
						"in": "query",
						"description": "Filter on ITM-SYS using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SystemName.NotStartsWith",
						"in": "query",
						"description": "Filter on ITM-SYS using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SystemName.EndsWith",
						"in": "query",
						"description": "Filter on ITM-SYS using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SystemName.NotEndsWith",
						"in": "query",
						"description": "Filter on ITM-SYS using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SystemName.In",
						"in": "query",
						"description": "Filter on ITM-SYS using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SystemName.Between",
						"in": "query",
						"description": "Filter on ITM-SYS using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber.NotEqual",
						"in": "query",
						"description": "Filter on ORG-ORD using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber.Less",
						"in": "query",
						"description": "Filter on ORG-ORD using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on ORG-ORD using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber.Greater",
						"in": "query",
						"description": "Filter on ORG-ORD using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ORG-ORD using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber.IsNull",
						"in": "query",
						"description": "Filter on ORG-ORD using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber.IsNotNull",
						"in": "query",
						"description": "Filter on ORG-ORD using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber.Like",
						"in": "query",
						"description": "Filter on ORG-ORD using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber.NotLike",
						"in": "query",
						"description": "Filter on ORG-ORD using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber.Contains",
						"in": "query",
						"description": "Filter on ORG-ORD using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber.NotContains",
						"in": "query",
						"description": "Filter on ORG-ORD using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber.StartsWith",
						"in": "query",
						"description": "Filter on ORG-ORD using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on ORG-ORD using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber.EndsWith",
						"in": "query",
						"description": "Filter on ORG-ORD using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on ORG-ORD using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber.In",
						"in": "query",
						"description": "Filter on ORG-ORD using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OriginalOrderNumber.Between",
						"in": "query",
						"description": "Filter on ORG-ORD using 'Between' operator",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResultWithCount[CustomerActivity]"
						}
					}
				}
			}
		},
		"/customers/activity/{systemModule}/{activityId}/{activityTerm}/accountsReceivable": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Gets all A/R tied to a specific customer activity.",
				"operationId": "Customer_GetCustomerActivityAr",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "systemModule",
						"in": "path",
						"description": "System module for the given customer activity",
						"required": true,
						"type": "string"
					},
					{
						"name": "activityId",
						"in": "path",
						"description": "Activity Id",
						"required": true,
						"type": "string"
					},
					{
						"name": "activityTerm",
						"in": "path",
						"description": "Activity Term",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/CustomerActivityAr"
							}
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/unpaid-invoices": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Retrieves a list of unpaid debits for the specified customer, as determined by the value of the DBT_PAD field.\r\nThis includes debits that have unposted credit applications for the remaining balance.",
				"operationId": "Customer_GetUnpaidDebits",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "Customer number",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Receivable"
							}
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/addresses/{addressCode}": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Find and return addresses for a given customer number and address code.",
				"operationId": "Customer_GetAddress",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the address to find.",
						"required": true,
						"type": "string"
					},
					{
						"name": "addressCode",
						"in": "path",
						"description": "The address code of the address to return.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CustomerAddress"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Customer"
				],
				"summary": "Update a customer address",
				"operationId": "Customer_UpdateCustomerAddress",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "Customer Number",
						"required": true,
						"type": "string"
					},
					{
						"name": "addressCode",
						"in": "path",
						"description": "Address Code",
						"required": true,
						"type": "string"
					},
					{
						"name": "customerAddressUpdateRequest",
						"in": "body",
						"description": "Customer Address Update Request object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CustomerAddressUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CustomerAddress"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/addresses/customer-default": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Find and return default address information for a given customer number.",
				"operationId": "Customer_GetDefaultAddress",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the address to find.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CustomerAddress"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/emails": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Gets all of the email addresses for a given customer.",
				"operationId": "Customer_GetEmails",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the email addresses to find.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/CustomerEmail"
							}
						}
					}
				}
			}
		},
		"/customer-types/{customerTypeCode}/defaults": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Get customer defaults by customer type.",
				"operationId": "Customer_GetCustomerDefaults",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerTypeCode",
						"in": "path",
						"description": "The customer type",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CustomerDefaults"
						}
					}
				}
			}
		},
		"/customer-addresses": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Gets customer addresses matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.\r\nFor example, /customer-addresses?FirstName.CN=Matt or /customer-addresses?FirstName.EQ=John&amp;LastName.EQ=Doe",
				"operationId": "Customer_SearchAddresses",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "CustomerNumber",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName",
						"in": "query",
						"description": "Filter on ATN-NME using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress",
						"in": "query",
						"description": "Filter on ADR-EML using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1",
						"in": "query",
						"description": "Filter on STR-1ST using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2",
						"in": "query",
						"description": "Filter on STR-2ND using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3",
						"in": "query",
						"description": "Filter on STR-3RD using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City",
						"in": "query",
						"description": "Filter on CTM-CTY using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State",
						"in": "query",
						"description": "Filter on CTM-STE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode",
						"in": "query",
						"description": "Filter on CUN-TYP using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber",
						"in": "query",
						"description": "Filter on FAX-NBR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company",
						"in": "query",
						"description": "Filter on CMP-NME using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType",
						"in": "query",
						"description": "Filter on CTM-TYP using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag",
						"in": "query",
						"description": "Filter on PROMO using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners",
						"in": "query",
						"description": "Filter on PMO-PTR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone",
						"in": "query",
						"description": "Filter on PMO-PHN using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax",
						"in": "query",
						"description": "Filter on PMO-FAX using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail",
						"in": "query",
						"description": "Filter on PMO-EML using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail",
						"in": "query",
						"description": "Filter on PMO-ADR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms",
						"in": "query",
						"description": "Filter on PMO-SMS using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title",
						"in": "query",
						"description": "Filter on CTM-TTL using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName",
						"in": "query",
						"description": "Filter on ATN-1ST using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial",
						"in": "query",
						"description": "Filter on ATN-MID using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName",
						"in": "query",
						"description": "Filter on ATN-END using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix",
						"in": "query",
						"description": "Filter on CTM-SFX using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle",
						"in": "query",
						"description": "Filter on JOB-TTL using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode",
						"in": "query",
						"description": "Filter on CTM-POS using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference",
						"in": "query",
						"description": "Filter on COMM-PRF using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion",
						"in": "query",
						"description": "Filter on CTM-SRC using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department",
						"in": "query",
						"description": "Filter on DPT-NME using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode",
						"in": "query",
						"description": "Filter on PIN-CODE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber",
						"in": "query",
						"description": "Filter on SOC-SEC using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName",
						"in": "query",
						"description": "Filter on FSTR-NME using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType",
						"in": "query",
						"description": "Filter on STR-TYP using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex",
						"in": "query",
						"description": "Filter on END-SNDX using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Less",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Greater",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.IsNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Like",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotLike",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Contains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotContains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.StartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.EndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.In",
						"in": "query",
						"description": "Filter on CTM-NBR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Between",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.NotEqual",
						"in": "query",
						"description": "Filter on ATN-NME using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.Less",
						"in": "query",
						"description": "Filter on ATN-NME using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.LessOrEqual",
						"in": "query",
						"description": "Filter on ATN-NME using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.Greater",
						"in": "query",
						"description": "Filter on ATN-NME using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ATN-NME using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.IsNull",
						"in": "query",
						"description": "Filter on ATN-NME using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.IsNotNull",
						"in": "query",
						"description": "Filter on ATN-NME using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.Like",
						"in": "query",
						"description": "Filter on ATN-NME using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.NotLike",
						"in": "query",
						"description": "Filter on ATN-NME using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.Contains",
						"in": "query",
						"description": "Filter on ATN-NME using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.NotContains",
						"in": "query",
						"description": "Filter on ATN-NME using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.StartsWith",
						"in": "query",
						"description": "Filter on ATN-NME using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.NotStartsWith",
						"in": "query",
						"description": "Filter on ATN-NME using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.EndsWith",
						"in": "query",
						"description": "Filter on ATN-NME using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.NotEndsWith",
						"in": "query",
						"description": "Filter on ATN-NME using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.In",
						"in": "query",
						"description": "Filter on ATN-NME using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FullName.Between",
						"in": "query",
						"description": "Filter on ATN-NME using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.NotEqual",
						"in": "query",
						"description": "Filter on ADR-EML using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.Less",
						"in": "query",
						"description": "Filter on ADR-EML using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.LessOrEqual",
						"in": "query",
						"description": "Filter on ADR-EML using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.Greater",
						"in": "query",
						"description": "Filter on ADR-EML using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ADR-EML using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.IsNull",
						"in": "query",
						"description": "Filter on ADR-EML using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.IsNotNull",
						"in": "query",
						"description": "Filter on ADR-EML using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.Like",
						"in": "query",
						"description": "Filter on ADR-EML using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.NotLike",
						"in": "query",
						"description": "Filter on ADR-EML using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.Contains",
						"in": "query",
						"description": "Filter on ADR-EML using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.NotContains",
						"in": "query",
						"description": "Filter on ADR-EML using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.StartsWith",
						"in": "query",
						"description": "Filter on ADR-EML using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.NotStartsWith",
						"in": "query",
						"description": "Filter on ADR-EML using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.EndsWith",
						"in": "query",
						"description": "Filter on ADR-EML using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.NotEndsWith",
						"in": "query",
						"description": "Filter on ADR-EML using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.In",
						"in": "query",
						"description": "Filter on ADR-EML using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "EmailAddress.Between",
						"in": "query",
						"description": "Filter on ADR-EML using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.NotEqual",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.Less",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.Greater",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.IsNull",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.IsNotNull",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.Like",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.NotLike",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.Contains",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.NotContains",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.StartsWith",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.EndsWith",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.In",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber.Between",
						"in": "query",
						"description": "Filter on PHO1-IDX using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.NotEqual",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.Less",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.LessOrEqual",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.Greater",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.IsNull",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.IsNotNull",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.Like",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.NotLike",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.Contains",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.NotContains",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.StartsWith",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.NotStartsWith",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.EndsWith",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.NotEndsWith",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.In",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber2.Between",
						"in": "query",
						"description": "Filter on PHO2-IDX using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.NotEqual",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.Less",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.LessOrEqual",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.Greater",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.IsNull",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.IsNotNull",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.Like",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.NotLike",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.Contains",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.NotContains",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.StartsWith",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.NotStartsWith",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.EndsWith",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.NotEndsWith",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.In",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PhoneNumber3.Between",
						"in": "query",
						"description": "Filter on PHO3-IDX using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.NotEqual",
						"in": "query",
						"description": "Filter on STR-1ST using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.Less",
						"in": "query",
						"description": "Filter on STR-1ST using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.LessOrEqual",
						"in": "query",
						"description": "Filter on STR-1ST using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.Greater",
						"in": "query",
						"description": "Filter on STR-1ST using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.GreaterOrEqual",
						"in": "query",
						"description": "Filter on STR-1ST using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.IsNull",
						"in": "query",
						"description": "Filter on STR-1ST using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.IsNotNull",
						"in": "query",
						"description": "Filter on STR-1ST using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.Like",
						"in": "query",
						"description": "Filter on STR-1ST using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.NotLike",
						"in": "query",
						"description": "Filter on STR-1ST using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.Contains",
						"in": "query",
						"description": "Filter on STR-1ST using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.NotContains",
						"in": "query",
						"description": "Filter on STR-1ST using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.StartsWith",
						"in": "query",
						"description": "Filter on STR-1ST using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.NotStartsWith",
						"in": "query",
						"description": "Filter on STR-1ST using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.EndsWith",
						"in": "query",
						"description": "Filter on STR-1ST using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.NotEndsWith",
						"in": "query",
						"description": "Filter on STR-1ST using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.In",
						"in": "query",
						"description": "Filter on STR-1ST using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street1.Between",
						"in": "query",
						"description": "Filter on STR-1ST using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.NotEqual",
						"in": "query",
						"description": "Filter on STR-2ND using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.Less",
						"in": "query",
						"description": "Filter on STR-2ND using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.LessOrEqual",
						"in": "query",
						"description": "Filter on STR-2ND using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.Greater",
						"in": "query",
						"description": "Filter on STR-2ND using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.GreaterOrEqual",
						"in": "query",
						"description": "Filter on STR-2ND using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.IsNull",
						"in": "query",
						"description": "Filter on STR-2ND using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.IsNotNull",
						"in": "query",
						"description": "Filter on STR-2ND using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.Like",
						"in": "query",
						"description": "Filter on STR-2ND using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.NotLike",
						"in": "query",
						"description": "Filter on STR-2ND using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.Contains",
						"in": "query",
						"description": "Filter on STR-2ND using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.NotContains",
						"in": "query",
						"description": "Filter on STR-2ND using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.StartsWith",
						"in": "query",
						"description": "Filter on STR-2ND using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.NotStartsWith",
						"in": "query",
						"description": "Filter on STR-2ND using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.EndsWith",
						"in": "query",
						"description": "Filter on STR-2ND using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.NotEndsWith",
						"in": "query",
						"description": "Filter on STR-2ND using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.In",
						"in": "query",
						"description": "Filter on STR-2ND using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street2.Between",
						"in": "query",
						"description": "Filter on STR-2ND using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.NotEqual",
						"in": "query",
						"description": "Filter on STR-3RD using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.Less",
						"in": "query",
						"description": "Filter on STR-3RD using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.LessOrEqual",
						"in": "query",
						"description": "Filter on STR-3RD using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.Greater",
						"in": "query",
						"description": "Filter on STR-3RD using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.GreaterOrEqual",
						"in": "query",
						"description": "Filter on STR-3RD using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.IsNull",
						"in": "query",
						"description": "Filter on STR-3RD using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.IsNotNull",
						"in": "query",
						"description": "Filter on STR-3RD using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.Like",
						"in": "query",
						"description": "Filter on STR-3RD using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.NotLike",
						"in": "query",
						"description": "Filter on STR-3RD using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.Contains",
						"in": "query",
						"description": "Filter on STR-3RD using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.NotContains",
						"in": "query",
						"description": "Filter on STR-3RD using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.StartsWith",
						"in": "query",
						"description": "Filter on STR-3RD using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.NotStartsWith",
						"in": "query",
						"description": "Filter on STR-3RD using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.EndsWith",
						"in": "query",
						"description": "Filter on STR-3RD using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.NotEndsWith",
						"in": "query",
						"description": "Filter on STR-3RD using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.In",
						"in": "query",
						"description": "Filter on STR-3RD using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Street3.Between",
						"in": "query",
						"description": "Filter on STR-3RD using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.NotEqual",
						"in": "query",
						"description": "Filter on CTM-CTY using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.Less",
						"in": "query",
						"description": "Filter on CTM-CTY using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-CTY using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.Greater",
						"in": "query",
						"description": "Filter on CTM-CTY using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-CTY using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.IsNull",
						"in": "query",
						"description": "Filter on CTM-CTY using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-CTY using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.Like",
						"in": "query",
						"description": "Filter on CTM-CTY using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.NotLike",
						"in": "query",
						"description": "Filter on CTM-CTY using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.Contains",
						"in": "query",
						"description": "Filter on CTM-CTY using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.NotContains",
						"in": "query",
						"description": "Filter on CTM-CTY using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.StartsWith",
						"in": "query",
						"description": "Filter on CTM-CTY using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-CTY using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.EndsWith",
						"in": "query",
						"description": "Filter on CTM-CTY using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-CTY using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.In",
						"in": "query",
						"description": "Filter on CTM-CTY using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "City.Between",
						"in": "query",
						"description": "Filter on CTM-CTY using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.NotEqual",
						"in": "query",
						"description": "Filter on CTM-STE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.Less",
						"in": "query",
						"description": "Filter on CTM-STE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-STE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.Greater",
						"in": "query",
						"description": "Filter on CTM-STE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-STE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.IsNull",
						"in": "query",
						"description": "Filter on CTM-STE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-STE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.Like",
						"in": "query",
						"description": "Filter on CTM-STE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.NotLike",
						"in": "query",
						"description": "Filter on CTM-STE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.Contains",
						"in": "query",
						"description": "Filter on CTM-STE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.NotContains",
						"in": "query",
						"description": "Filter on CTM-STE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.StartsWith",
						"in": "query",
						"description": "Filter on CTM-STE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-STE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.EndsWith",
						"in": "query",
						"description": "Filter on CTM-STE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-STE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.In",
						"in": "query",
						"description": "Filter on CTM-STE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "State.Between",
						"in": "query",
						"description": "Filter on CTM-STE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.NotEqual",
						"in": "query",
						"description": "Filter on CUN-TYP using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.Less",
						"in": "query",
						"description": "Filter on CUN-TYP using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.LessOrEqual",
						"in": "query",
						"description": "Filter on CUN-TYP using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.Greater",
						"in": "query",
						"description": "Filter on CUN-TYP using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CUN-TYP using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.IsNull",
						"in": "query",
						"description": "Filter on CUN-TYP using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.IsNotNull",
						"in": "query",
						"description": "Filter on CUN-TYP using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.Like",
						"in": "query",
						"description": "Filter on CUN-TYP using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.NotLike",
						"in": "query",
						"description": "Filter on CUN-TYP using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.Contains",
						"in": "query",
						"description": "Filter on CUN-TYP using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.NotContains",
						"in": "query",
						"description": "Filter on CUN-TYP using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.StartsWith",
						"in": "query",
						"description": "Filter on CUN-TYP using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.NotStartsWith",
						"in": "query",
						"description": "Filter on CUN-TYP using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.EndsWith",
						"in": "query",
						"description": "Filter on CUN-TYP using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.NotEndsWith",
						"in": "query",
						"description": "Filter on CUN-TYP using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.In",
						"in": "query",
						"description": "Filter on CUN-TYP using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CountryCode.Between",
						"in": "query",
						"description": "Filter on CUN-TYP using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.NotEqual",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.Less",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.LessOrEqual",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.Greater",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.IsNull",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.IsNotNull",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.Like",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.NotLike",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.Contains",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.NotContains",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.StartsWith",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.NotStartsWith",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.EndsWith",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.NotEndsWith",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.In",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PostalCode.Between",
						"in": "query",
						"description": "Filter on ZIP-CDE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.NotEqual",
						"in": "query",
						"description": "Filter on FAX-NBR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.Less",
						"in": "query",
						"description": "Filter on FAX-NBR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on FAX-NBR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.Greater",
						"in": "query",
						"description": "Filter on FAX-NBR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on FAX-NBR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.IsNull",
						"in": "query",
						"description": "Filter on FAX-NBR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.IsNotNull",
						"in": "query",
						"description": "Filter on FAX-NBR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.Like",
						"in": "query",
						"description": "Filter on FAX-NBR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.NotLike",
						"in": "query",
						"description": "Filter on FAX-NBR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.Contains",
						"in": "query",
						"description": "Filter on FAX-NBR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.NotContains",
						"in": "query",
						"description": "Filter on FAX-NBR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.StartsWith",
						"in": "query",
						"description": "Filter on FAX-NBR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on FAX-NBR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.EndsWith",
						"in": "query",
						"description": "Filter on FAX-NBR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on FAX-NBR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.In",
						"in": "query",
						"description": "Filter on FAX-NBR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FaxNumber.Between",
						"in": "query",
						"description": "Filter on FAX-NBR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.NotEqual",
						"in": "query",
						"description": "Filter on CMP-NME using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.Less",
						"in": "query",
						"description": "Filter on CMP-NME using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.LessOrEqual",
						"in": "query",
						"description": "Filter on CMP-NME using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.Greater",
						"in": "query",
						"description": "Filter on CMP-NME using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CMP-NME using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.IsNull",
						"in": "query",
						"description": "Filter on CMP-NME using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.IsNotNull",
						"in": "query",
						"description": "Filter on CMP-NME using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.Like",
						"in": "query",
						"description": "Filter on CMP-NME using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.NotLike",
						"in": "query",
						"description": "Filter on CMP-NME using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.Contains",
						"in": "query",
						"description": "Filter on CMP-NME using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.NotContains",
						"in": "query",
						"description": "Filter on CMP-NME using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.StartsWith",
						"in": "query",
						"description": "Filter on CMP-NME using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.NotStartsWith",
						"in": "query",
						"description": "Filter on CMP-NME using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.EndsWith",
						"in": "query",
						"description": "Filter on CMP-NME using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.NotEndsWith",
						"in": "query",
						"description": "Filter on CMP-NME using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.In",
						"in": "query",
						"description": "Filter on CMP-NME using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Company.Between",
						"in": "query",
						"description": "Filter on CMP-NME using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.NotEqual",
						"in": "query",
						"description": "Filter on CTM-TYP using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.Less",
						"in": "query",
						"description": "Filter on CTM-TYP using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-TYP using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.Greater",
						"in": "query",
						"description": "Filter on CTM-TYP using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-TYP using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.IsNull",
						"in": "query",
						"description": "Filter on CTM-TYP using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-TYP using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.Like",
						"in": "query",
						"description": "Filter on CTM-TYP using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.NotLike",
						"in": "query",
						"description": "Filter on CTM-TYP using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.Contains",
						"in": "query",
						"description": "Filter on CTM-TYP using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.NotContains",
						"in": "query",
						"description": "Filter on CTM-TYP using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.StartsWith",
						"in": "query",
						"description": "Filter on CTM-TYP using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-TYP using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.EndsWith",
						"in": "query",
						"description": "Filter on CTM-TYP using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-TYP using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.In",
						"in": "query",
						"description": "Filter on CTM-TYP using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerType.Between",
						"in": "query",
						"description": "Filter on CTM-TYP using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.NotEqual",
						"in": "query",
						"description": "Filter on PROMO using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.Less",
						"in": "query",
						"description": "Filter on PROMO using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.LessOrEqual",
						"in": "query",
						"description": "Filter on PROMO using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.Greater",
						"in": "query",
						"description": "Filter on PROMO using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PROMO using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.IsNull",
						"in": "query",
						"description": "Filter on PROMO using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.IsNotNull",
						"in": "query",
						"description": "Filter on PROMO using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.Like",
						"in": "query",
						"description": "Filter on PROMO using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.NotLike",
						"in": "query",
						"description": "Filter on PROMO using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.Contains",
						"in": "query",
						"description": "Filter on PROMO using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.NotContains",
						"in": "query",
						"description": "Filter on PROMO using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.StartsWith",
						"in": "query",
						"description": "Filter on PROMO using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.NotStartsWith",
						"in": "query",
						"description": "Filter on PROMO using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.EndsWith",
						"in": "query",
						"description": "Filter on PROMO using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.NotEndsWith",
						"in": "query",
						"description": "Filter on PROMO using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.In",
						"in": "query",
						"description": "Filter on PROMO using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteFlag.Between",
						"in": "query",
						"description": "Filter on PROMO using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.NotEqual",
						"in": "query",
						"description": "Filter on PMO-PTR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.Less",
						"in": "query",
						"description": "Filter on PMO-PTR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-PTR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.Greater",
						"in": "query",
						"description": "Filter on PMO-PTR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-PTR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.IsNull",
						"in": "query",
						"description": "Filter on PMO-PTR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-PTR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.Like",
						"in": "query",
						"description": "Filter on PMO-PTR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.NotLike",
						"in": "query",
						"description": "Filter on PMO-PTR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.Contains",
						"in": "query",
						"description": "Filter on PMO-PTR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.NotContains",
						"in": "query",
						"description": "Filter on PMO-PTR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.StartsWith",
						"in": "query",
						"description": "Filter on PMO-PTR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-PTR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.EndsWith",
						"in": "query",
						"description": "Filter on PMO-PTR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-PTR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.In",
						"in": "query",
						"description": "Filter on PMO-PTR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPartners.Between",
						"in": "query",
						"description": "Filter on PMO-PTR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.NotEqual",
						"in": "query",
						"description": "Filter on PMO-PHN using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.Less",
						"in": "query",
						"description": "Filter on PMO-PHN using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-PHN using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.Greater",
						"in": "query",
						"description": "Filter on PMO-PHN using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-PHN using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.IsNull",
						"in": "query",
						"description": "Filter on PMO-PHN using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-PHN using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.Like",
						"in": "query",
						"description": "Filter on PMO-PHN using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.NotLike",
						"in": "query",
						"description": "Filter on PMO-PHN using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.Contains",
						"in": "query",
						"description": "Filter on PMO-PHN using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.NotContains",
						"in": "query",
						"description": "Filter on PMO-PHN using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.StartsWith",
						"in": "query",
						"description": "Filter on PMO-PHN using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-PHN using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.EndsWith",
						"in": "query",
						"description": "Filter on PMO-PHN using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-PHN using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.In",
						"in": "query",
						"description": "Filter on PMO-PHN using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone.Between",
						"in": "query",
						"description": "Filter on PMO-PHN using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.NotEqual",
						"in": "query",
						"description": "Filter on PMO-FAX using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.Less",
						"in": "query",
						"description": "Filter on PMO-FAX using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-FAX using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.Greater",
						"in": "query",
						"description": "Filter on PMO-FAX using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-FAX using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.IsNull",
						"in": "query",
						"description": "Filter on PMO-FAX using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-FAX using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.Like",
						"in": "query",
						"description": "Filter on PMO-FAX using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.NotLike",
						"in": "query",
						"description": "Filter on PMO-FAX using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.Contains",
						"in": "query",
						"description": "Filter on PMO-FAX using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.NotContains",
						"in": "query",
						"description": "Filter on PMO-FAX using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.StartsWith",
						"in": "query",
						"description": "Filter on PMO-FAX using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-FAX using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.EndsWith",
						"in": "query",
						"description": "Filter on PMO-FAX using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-FAX using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.In",
						"in": "query",
						"description": "Filter on PMO-FAX using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByFax.Between",
						"in": "query",
						"description": "Filter on PMO-FAX using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.NotEqual",
						"in": "query",
						"description": "Filter on PMO-EML using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.Less",
						"in": "query",
						"description": "Filter on PMO-EML using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-EML using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.Greater",
						"in": "query",
						"description": "Filter on PMO-EML using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-EML using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.IsNull",
						"in": "query",
						"description": "Filter on PMO-EML using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-EML using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.Like",
						"in": "query",
						"description": "Filter on PMO-EML using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.NotLike",
						"in": "query",
						"description": "Filter on PMO-EML using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.Contains",
						"in": "query",
						"description": "Filter on PMO-EML using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.NotContains",
						"in": "query",
						"description": "Filter on PMO-EML using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.StartsWith",
						"in": "query",
						"description": "Filter on PMO-EML using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-EML using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.EndsWith",
						"in": "query",
						"description": "Filter on PMO-EML using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-EML using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.In",
						"in": "query",
						"description": "Filter on PMO-EML using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByEmail.Between",
						"in": "query",
						"description": "Filter on PMO-EML using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.NotEqual",
						"in": "query",
						"description": "Filter on PMO-ADR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.Less",
						"in": "query",
						"description": "Filter on PMO-ADR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-ADR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.Greater",
						"in": "query",
						"description": "Filter on PMO-ADR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-ADR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.IsNull",
						"in": "query",
						"description": "Filter on PMO-ADR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-ADR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.Like",
						"in": "query",
						"description": "Filter on PMO-ADR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.NotLike",
						"in": "query",
						"description": "Filter on PMO-ADR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.Contains",
						"in": "query",
						"description": "Filter on PMO-ADR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.NotContains",
						"in": "query",
						"description": "Filter on PMO-ADR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.StartsWith",
						"in": "query",
						"description": "Filter on PMO-ADR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-ADR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.EndsWith",
						"in": "query",
						"description": "Filter on PMO-ADR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-ADR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.In",
						"in": "query",
						"description": "Filter on PMO-ADR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByMail.Between",
						"in": "query",
						"description": "Filter on PMO-ADR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.NotEqual",
						"in": "query",
						"description": "Filter on PMO-SMS using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.Less",
						"in": "query",
						"description": "Filter on PMO-SMS using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-SMS using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.Greater",
						"in": "query",
						"description": "Filter on PMO-SMS using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-SMS using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.IsNull",
						"in": "query",
						"description": "Filter on PMO-SMS using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-SMS using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.Like",
						"in": "query",
						"description": "Filter on PMO-SMS using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.NotLike",
						"in": "query",
						"description": "Filter on PMO-SMS using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.Contains",
						"in": "query",
						"description": "Filter on PMO-SMS using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.NotContains",
						"in": "query",
						"description": "Filter on PMO-SMS using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.StartsWith",
						"in": "query",
						"description": "Filter on PMO-SMS using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-SMS using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.EndsWith",
						"in": "query",
						"description": "Filter on PMO-SMS using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-SMS using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.In",
						"in": "query",
						"description": "Filter on PMO-SMS using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteBySms.Between",
						"in": "query",
						"description": "Filter on PMO-SMS using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.NotEqual",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.Less",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.Greater",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.IsNull",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.Like",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.NotLike",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.Contains",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.NotContains",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.StartsWith",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.EndsWith",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.In",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone1.Between",
						"in": "query",
						"description": "Filter on PMO-PH1 using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.NotEqual",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.Less",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.Greater",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.IsNull",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.Like",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.NotLike",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.Contains",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.NotContains",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.StartsWith",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.EndsWith",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.In",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone2.Between",
						"in": "query",
						"description": "Filter on PMO-PH2 using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.NotEqual",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.Less",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.Greater",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.IsNull",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.Like",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.NotLike",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.Contains",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.NotContains",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.StartsWith",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.EndsWith",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.In",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromoteByPhone3.Between",
						"in": "query",
						"description": "Filter on PMO-PH3 using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.NotEqual",
						"in": "query",
						"description": "Filter on CTM-TTL using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.Less",
						"in": "query",
						"description": "Filter on CTM-TTL using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-TTL using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.Greater",
						"in": "query",
						"description": "Filter on CTM-TTL using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-TTL using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.IsNull",
						"in": "query",
						"description": "Filter on CTM-TTL using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-TTL using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.Like",
						"in": "query",
						"description": "Filter on CTM-TTL using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.NotLike",
						"in": "query",
						"description": "Filter on CTM-TTL using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.Contains",
						"in": "query",
						"description": "Filter on CTM-TTL using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.NotContains",
						"in": "query",
						"description": "Filter on CTM-TTL using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.StartsWith",
						"in": "query",
						"description": "Filter on CTM-TTL using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-TTL using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.EndsWith",
						"in": "query",
						"description": "Filter on CTM-TTL using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-TTL using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.In",
						"in": "query",
						"description": "Filter on CTM-TTL using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Title.Between",
						"in": "query",
						"description": "Filter on CTM-TTL using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.NotEqual",
						"in": "query",
						"description": "Filter on ATN-1ST using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.Less",
						"in": "query",
						"description": "Filter on ATN-1ST using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.LessOrEqual",
						"in": "query",
						"description": "Filter on ATN-1ST using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.Greater",
						"in": "query",
						"description": "Filter on ATN-1ST using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ATN-1ST using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.IsNull",
						"in": "query",
						"description": "Filter on ATN-1ST using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.IsNotNull",
						"in": "query",
						"description": "Filter on ATN-1ST using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.Like",
						"in": "query",
						"description": "Filter on ATN-1ST using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.NotLike",
						"in": "query",
						"description": "Filter on ATN-1ST using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.Contains",
						"in": "query",
						"description": "Filter on ATN-1ST using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.NotContains",
						"in": "query",
						"description": "Filter on ATN-1ST using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.StartsWith",
						"in": "query",
						"description": "Filter on ATN-1ST using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.NotStartsWith",
						"in": "query",
						"description": "Filter on ATN-1ST using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.EndsWith",
						"in": "query",
						"description": "Filter on ATN-1ST using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.NotEndsWith",
						"in": "query",
						"description": "Filter on ATN-1ST using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.In",
						"in": "query",
						"description": "Filter on ATN-1ST using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "FirstName.Between",
						"in": "query",
						"description": "Filter on ATN-1ST using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.NotEqual",
						"in": "query",
						"description": "Filter on ATN-MID using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.Less",
						"in": "query",
						"description": "Filter on ATN-MID using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.LessOrEqual",
						"in": "query",
						"description": "Filter on ATN-MID using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.Greater",
						"in": "query",
						"description": "Filter on ATN-MID using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ATN-MID using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.IsNull",
						"in": "query",
						"description": "Filter on ATN-MID using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.IsNotNull",
						"in": "query",
						"description": "Filter on ATN-MID using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.Like",
						"in": "query",
						"description": "Filter on ATN-MID using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.NotLike",
						"in": "query",
						"description": "Filter on ATN-MID using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.Contains",
						"in": "query",
						"description": "Filter on ATN-MID using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.NotContains",
						"in": "query",
						"description": "Filter on ATN-MID using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.StartsWith",
						"in": "query",
						"description": "Filter on ATN-MID using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.NotStartsWith",
						"in": "query",
						"description": "Filter on ATN-MID using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.EndsWith",
						"in": "query",
						"description": "Filter on ATN-MID using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.NotEndsWith",
						"in": "query",
						"description": "Filter on ATN-MID using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.In",
						"in": "query",
						"description": "Filter on ATN-MID using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "MiddleInitial.Between",
						"in": "query",
						"description": "Filter on ATN-MID using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.NotEqual",
						"in": "query",
						"description": "Filter on ATN-END using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.Less",
						"in": "query",
						"description": "Filter on ATN-END using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.LessOrEqual",
						"in": "query",
						"description": "Filter on ATN-END using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.Greater",
						"in": "query",
						"description": "Filter on ATN-END using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ATN-END using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.IsNull",
						"in": "query",
						"description": "Filter on ATN-END using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.IsNotNull",
						"in": "query",
						"description": "Filter on ATN-END using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.Like",
						"in": "query",
						"description": "Filter on ATN-END using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.NotLike",
						"in": "query",
						"description": "Filter on ATN-END using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.Contains",
						"in": "query",
						"description": "Filter on ATN-END using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.NotContains",
						"in": "query",
						"description": "Filter on ATN-END using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.StartsWith",
						"in": "query",
						"description": "Filter on ATN-END using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.NotStartsWith",
						"in": "query",
						"description": "Filter on ATN-END using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.EndsWith",
						"in": "query",
						"description": "Filter on ATN-END using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.NotEndsWith",
						"in": "query",
						"description": "Filter on ATN-END using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.In",
						"in": "query",
						"description": "Filter on ATN-END using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastName.Between",
						"in": "query",
						"description": "Filter on ATN-END using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.NotEqual",
						"in": "query",
						"description": "Filter on CTM-SFX using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.Less",
						"in": "query",
						"description": "Filter on CTM-SFX using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-SFX using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.Greater",
						"in": "query",
						"description": "Filter on CTM-SFX using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-SFX using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.IsNull",
						"in": "query",
						"description": "Filter on CTM-SFX using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-SFX using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.Like",
						"in": "query",
						"description": "Filter on CTM-SFX using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.NotLike",
						"in": "query",
						"description": "Filter on CTM-SFX using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.Contains",
						"in": "query",
						"description": "Filter on CTM-SFX using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.NotContains",
						"in": "query",
						"description": "Filter on CTM-SFX using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.StartsWith",
						"in": "query",
						"description": "Filter on CTM-SFX using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-SFX using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.EndsWith",
						"in": "query",
						"description": "Filter on CTM-SFX using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-SFX using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.In",
						"in": "query",
						"description": "Filter on CTM-SFX using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Suffix.Between",
						"in": "query",
						"description": "Filter on CTM-SFX using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.NotEqual",
						"in": "query",
						"description": "Filter on JOB-TTL using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.Less",
						"in": "query",
						"description": "Filter on JOB-TTL using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.LessOrEqual",
						"in": "query",
						"description": "Filter on JOB-TTL using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.Greater",
						"in": "query",
						"description": "Filter on JOB-TTL using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.GreaterOrEqual",
						"in": "query",
						"description": "Filter on JOB-TTL using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.IsNull",
						"in": "query",
						"description": "Filter on JOB-TTL using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.IsNotNull",
						"in": "query",
						"description": "Filter on JOB-TTL using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.Like",
						"in": "query",
						"description": "Filter on JOB-TTL using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.NotLike",
						"in": "query",
						"description": "Filter on JOB-TTL using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.Contains",
						"in": "query",
						"description": "Filter on JOB-TTL using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.NotContains",
						"in": "query",
						"description": "Filter on JOB-TTL using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.StartsWith",
						"in": "query",
						"description": "Filter on JOB-TTL using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.NotStartsWith",
						"in": "query",
						"description": "Filter on JOB-TTL using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.EndsWith",
						"in": "query",
						"description": "Filter on JOB-TTL using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.NotEndsWith",
						"in": "query",
						"description": "Filter on JOB-TTL using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.In",
						"in": "query",
						"description": "Filter on JOB-TTL using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobTitle.Between",
						"in": "query",
						"description": "Filter on JOB-TTL using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.NotEqual",
						"in": "query",
						"description": "Filter on CTM-POS using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.Less",
						"in": "query",
						"description": "Filter on CTM-POS using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-POS using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.Greater",
						"in": "query",
						"description": "Filter on CTM-POS using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-POS using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.IsNull",
						"in": "query",
						"description": "Filter on CTM-POS using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-POS using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.Like",
						"in": "query",
						"description": "Filter on CTM-POS using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.NotLike",
						"in": "query",
						"description": "Filter on CTM-POS using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.Contains",
						"in": "query",
						"description": "Filter on CTM-POS using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.NotContains",
						"in": "query",
						"description": "Filter on CTM-POS using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.StartsWith",
						"in": "query",
						"description": "Filter on CTM-POS using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-POS using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.EndsWith",
						"in": "query",
						"description": "Filter on CTM-POS using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-POS using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.In",
						"in": "query",
						"description": "Filter on CTM-POS using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "JobPositionCode.Between",
						"in": "query",
						"description": "Filter on CTM-POS using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.NotEqual",
						"in": "query",
						"description": "Filter on COMM-PRF using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.Less",
						"in": "query",
						"description": "Filter on COMM-PRF using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.LessOrEqual",
						"in": "query",
						"description": "Filter on COMM-PRF using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.Greater",
						"in": "query",
						"description": "Filter on COMM-PRF using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.GreaterOrEqual",
						"in": "query",
						"description": "Filter on COMM-PRF using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.IsNull",
						"in": "query",
						"description": "Filter on COMM-PRF using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.IsNotNull",
						"in": "query",
						"description": "Filter on COMM-PRF using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.Like",
						"in": "query",
						"description": "Filter on COMM-PRF using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.NotLike",
						"in": "query",
						"description": "Filter on COMM-PRF using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.Contains",
						"in": "query",
						"description": "Filter on COMM-PRF using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.NotContains",
						"in": "query",
						"description": "Filter on COMM-PRF using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.StartsWith",
						"in": "query",
						"description": "Filter on COMM-PRF using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.NotStartsWith",
						"in": "query",
						"description": "Filter on COMM-PRF using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.EndsWith",
						"in": "query",
						"description": "Filter on COMM-PRF using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.NotEndsWith",
						"in": "query",
						"description": "Filter on COMM-PRF using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.In",
						"in": "query",
						"description": "Filter on COMM-PRF using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CommunicationPreference.Between",
						"in": "query",
						"description": "Filter on COMM-PRF using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.NotEqual",
						"in": "query",
						"description": "Filter on CTM-SRC using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.Less",
						"in": "query",
						"description": "Filter on CTM-SRC using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-SRC using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.Greater",
						"in": "query",
						"description": "Filter on CTM-SRC using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-SRC using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.IsNull",
						"in": "query",
						"description": "Filter on CTM-SRC using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-SRC using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.Like",
						"in": "query",
						"description": "Filter on CTM-SRC using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.NotLike",
						"in": "query",
						"description": "Filter on CTM-SRC using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.Contains",
						"in": "query",
						"description": "Filter on CTM-SRC using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.NotContains",
						"in": "query",
						"description": "Filter on CTM-SRC using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.StartsWith",
						"in": "query",
						"description": "Filter on CTM-SRC using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-SRC using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.EndsWith",
						"in": "query",
						"description": "Filter on CTM-SRC using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-SRC using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.In",
						"in": "query",
						"description": "Filter on CTM-SRC using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SourcePromotion.Between",
						"in": "query",
						"description": "Filter on CTM-SRC using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.NotEqual",
						"in": "query",
						"description": "Filter on ADR-CDE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.Less",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.LessOrEqual",
						"in": "query",
						"description": "Filter on ADR-CDE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.Greater",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ADR-CDE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.IsNull",
						"in": "query",
						"description": "Filter on ADR-CDE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.IsNotNull",
						"in": "query",
						"description": "Filter on ADR-CDE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.Like",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.NotLike",
						"in": "query",
						"description": "Filter on ADR-CDE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.Contains",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.NotContains",
						"in": "query",
						"description": "Filter on ADR-CDE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.StartsWith",
						"in": "query",
						"description": "Filter on ADR-CDE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.NotStartsWith",
						"in": "query",
						"description": "Filter on ADR-CDE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.EndsWith",
						"in": "query",
						"description": "Filter on ADR-CDE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.NotEndsWith",
						"in": "query",
						"description": "Filter on ADR-CDE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.In",
						"in": "query",
						"description": "Filter on ADR-CDE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AddressCode.Between",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.NotEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.Less",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.LessOrEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.Greater",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.GreaterOrEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.IsNull",
						"in": "query",
						"description": "Filter on BIL-CUR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.IsNotNull",
						"in": "query",
						"description": "Filter on BIL-CUR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.Like",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.NotLike",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.Contains",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.NotContains",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.StartsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.NotStartsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.EndsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.NotEndsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.In",
						"in": "query",
						"description": "Filter on BIL-CUR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultCurrency.Between",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.NotEqual",
						"in": "query",
						"description": "Filter on DPT-NME using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.Less",
						"in": "query",
						"description": "Filter on DPT-NME using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.LessOrEqual",
						"in": "query",
						"description": "Filter on DPT-NME using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.Greater",
						"in": "query",
						"description": "Filter on DPT-NME using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.GreaterOrEqual",
						"in": "query",
						"description": "Filter on DPT-NME using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.IsNull",
						"in": "query",
						"description": "Filter on DPT-NME using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.IsNotNull",
						"in": "query",
						"description": "Filter on DPT-NME using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.Like",
						"in": "query",
						"description": "Filter on DPT-NME using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.NotLike",
						"in": "query",
						"description": "Filter on DPT-NME using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.Contains",
						"in": "query",
						"description": "Filter on DPT-NME using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.NotContains",
						"in": "query",
						"description": "Filter on DPT-NME using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.StartsWith",
						"in": "query",
						"description": "Filter on DPT-NME using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.NotStartsWith",
						"in": "query",
						"description": "Filter on DPT-NME using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.EndsWith",
						"in": "query",
						"description": "Filter on DPT-NME using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.NotEndsWith",
						"in": "query",
						"description": "Filter on DPT-NME using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.In",
						"in": "query",
						"description": "Filter on DPT-NME using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "Department.Between",
						"in": "query",
						"description": "Filter on DPT-NME using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.NotEqual",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.Less",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.Greater",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.IsNull",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.Like",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.NotLike",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.Contains",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.NotContains",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.StartsWith",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.EndsWith",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.In",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "County.Between",
						"in": "query",
						"description": "Filter on CTM-CNTY using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.NotEqual",
						"in": "query",
						"description": "Filter on PIN-CODE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.Less",
						"in": "query",
						"description": "Filter on PIN-CODE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.LessOrEqual",
						"in": "query",
						"description": "Filter on PIN-CODE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.Greater",
						"in": "query",
						"description": "Filter on PIN-CODE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PIN-CODE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.IsNull",
						"in": "query",
						"description": "Filter on PIN-CODE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.IsNotNull",
						"in": "query",
						"description": "Filter on PIN-CODE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.Like",
						"in": "query",
						"description": "Filter on PIN-CODE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.NotLike",
						"in": "query",
						"description": "Filter on PIN-CODE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.Contains",
						"in": "query",
						"description": "Filter on PIN-CODE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.NotContains",
						"in": "query",
						"description": "Filter on PIN-CODE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.StartsWith",
						"in": "query",
						"description": "Filter on PIN-CODE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.NotStartsWith",
						"in": "query",
						"description": "Filter on PIN-CODE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.EndsWith",
						"in": "query",
						"description": "Filter on PIN-CODE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.NotEndsWith",
						"in": "query",
						"description": "Filter on PIN-CODE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.In",
						"in": "query",
						"description": "Filter on PIN-CODE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PinCode.Between",
						"in": "query",
						"description": "Filter on PIN-CODE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.NotEqual",
						"in": "query",
						"description": "Filter on SOC-SEC using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.Less",
						"in": "query",
						"description": "Filter on SOC-SEC using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on SOC-SEC using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.Greater",
						"in": "query",
						"description": "Filter on SOC-SEC using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on SOC-SEC using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.IsNull",
						"in": "query",
						"description": "Filter on SOC-SEC using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.IsNotNull",
						"in": "query",
						"description": "Filter on SOC-SEC using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.Like",
						"in": "query",
						"description": "Filter on SOC-SEC using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.NotLike",
						"in": "query",
						"description": "Filter on SOC-SEC using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.Contains",
						"in": "query",
						"description": "Filter on SOC-SEC using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.NotContains",
						"in": "query",
						"description": "Filter on SOC-SEC using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.StartsWith",
						"in": "query",
						"description": "Filter on SOC-SEC using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on SOC-SEC using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.EndsWith",
						"in": "query",
						"description": "Filter on SOC-SEC using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on SOC-SEC using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.In",
						"in": "query",
						"description": "Filter on SOC-SEC using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SocialSecurityNumber.Between",
						"in": "query",
						"description": "Filter on SOC-SEC using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.NotEqual",
						"in": "query",
						"description": "Filter on FSTR-NME using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.Less",
						"in": "query",
						"description": "Filter on FSTR-NME using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.LessOrEqual",
						"in": "query",
						"description": "Filter on FSTR-NME using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.Greater",
						"in": "query",
						"description": "Filter on FSTR-NME using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.GreaterOrEqual",
						"in": "query",
						"description": "Filter on FSTR-NME using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.IsNull",
						"in": "query",
						"description": "Filter on FSTR-NME using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.IsNotNull",
						"in": "query",
						"description": "Filter on FSTR-NME using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.Like",
						"in": "query",
						"description": "Filter on FSTR-NME using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.NotLike",
						"in": "query",
						"description": "Filter on FSTR-NME using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.Contains",
						"in": "query",
						"description": "Filter on FSTR-NME using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.NotContains",
						"in": "query",
						"description": "Filter on FSTR-NME using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.StartsWith",
						"in": "query",
						"description": "Filter on FSTR-NME using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.NotStartsWith",
						"in": "query",
						"description": "Filter on FSTR-NME using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.EndsWith",
						"in": "query",
						"description": "Filter on FSTR-NME using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.NotEndsWith",
						"in": "query",
						"description": "Filter on FSTR-NME using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.In",
						"in": "query",
						"description": "Filter on FSTR-NME using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetName.Between",
						"in": "query",
						"description": "Filter on FSTR-NME using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.NotEqual",
						"in": "query",
						"description": "Filter on STR-TYP using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.Less",
						"in": "query",
						"description": "Filter on STR-TYP using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.LessOrEqual",
						"in": "query",
						"description": "Filter on STR-TYP using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.Greater",
						"in": "query",
						"description": "Filter on STR-TYP using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.GreaterOrEqual",
						"in": "query",
						"description": "Filter on STR-TYP using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.IsNull",
						"in": "query",
						"description": "Filter on STR-TYP using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.IsNotNull",
						"in": "query",
						"description": "Filter on STR-TYP using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.Like",
						"in": "query",
						"description": "Filter on STR-TYP using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.NotLike",
						"in": "query",
						"description": "Filter on STR-TYP using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.Contains",
						"in": "query",
						"description": "Filter on STR-TYP using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.NotContains",
						"in": "query",
						"description": "Filter on STR-TYP using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.StartsWith",
						"in": "query",
						"description": "Filter on STR-TYP using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.NotStartsWith",
						"in": "query",
						"description": "Filter on STR-TYP using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.EndsWith",
						"in": "query",
						"description": "Filter on STR-TYP using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.NotEndsWith",
						"in": "query",
						"description": "Filter on STR-TYP using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.In",
						"in": "query",
						"description": "Filter on STR-TYP using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "StreetType.Between",
						"in": "query",
						"description": "Filter on STR-TYP using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.NotEqual",
						"in": "query",
						"description": "Filter on UPD-DTE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.Less",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.LessOrEqual",
						"in": "query",
						"description": "Filter on UPD-DTE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.Greater",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.GreaterOrEqual",
						"in": "query",
						"description": "Filter on UPD-DTE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.IsNull",
						"in": "query",
						"description": "Filter on UPD-DTE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.IsNotNull",
						"in": "query",
						"description": "Filter on UPD-DTE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.Like",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.NotLike",
						"in": "query",
						"description": "Filter on UPD-DTE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.Contains",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.NotContains",
						"in": "query",
						"description": "Filter on UPD-DTE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.StartsWith",
						"in": "query",
						"description": "Filter on UPD-DTE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.NotStartsWith",
						"in": "query",
						"description": "Filter on UPD-DTE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.EndsWith",
						"in": "query",
						"description": "Filter on UPD-DTE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.NotEndsWith",
						"in": "query",
						"description": "Filter on UPD-DTE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.In",
						"in": "query",
						"description": "Filter on UPD-DTE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastUpdatedOn.Between",
						"in": "query",
						"description": "Filter on UPD-DTE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotEqual",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Less",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on ITM-NUM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Greater",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ITM-NUM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.IsNull",
						"in": "query",
						"description": "Filter on ITM-NUM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.IsNotNull",
						"in": "query",
						"description": "Filter on ITM-NUM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Like",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotLike",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Contains",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotContains",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.StartsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.EndsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.In",
						"in": "query",
						"description": "Filter on ITM-NUM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Between",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.NotEqual",
						"in": "query",
						"description": "Filter on END-SNDX using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.Less",
						"in": "query",
						"description": "Filter on END-SNDX using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.LessOrEqual",
						"in": "query",
						"description": "Filter on END-SNDX using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.Greater",
						"in": "query",
						"description": "Filter on END-SNDX using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.GreaterOrEqual",
						"in": "query",
						"description": "Filter on END-SNDX using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.IsNull",
						"in": "query",
						"description": "Filter on END-SNDX using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.IsNotNull",
						"in": "query",
						"description": "Filter on END-SNDX using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.Like",
						"in": "query",
						"description": "Filter on END-SNDX using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.NotLike",
						"in": "query",
						"description": "Filter on END-SNDX using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.Contains",
						"in": "query",
						"description": "Filter on END-SNDX using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.NotContains",
						"in": "query",
						"description": "Filter on END-SNDX using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.StartsWith",
						"in": "query",
						"description": "Filter on END-SNDX using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.NotStartsWith",
						"in": "query",
						"description": "Filter on END-SNDX using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.EndsWith",
						"in": "query",
						"description": "Filter on END-SNDX using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.NotEndsWith",
						"in": "query",
						"description": "Filter on END-SNDX using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.In",
						"in": "query",
						"description": "Filter on END-SNDX using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "LastNameSoundex.Between",
						"in": "query",
						"description": "Filter on END-SNDX using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.NotEqual",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.Less",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.LessOrEqual",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.Greater",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.IsNull",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.IsNotNull",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.Like",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.NotLike",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.Contains",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.NotContains",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.StartsWith",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.NotStartsWith",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.EndsWith",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.NotEndsWith",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.In",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CompanyNameSoundex.Between",
						"in": "query",
						"description": "Filter on CMP-SNDX using 'Between' operator",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[CustomerAddress]"
						}
					}
				}
			}
		},
		"/customers/by-bank-account/{bankId}/{accountNumber}": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Search for customers by bank account.\r\nThis is a preliminary API, subject to change.",
				"operationId": "Customer_GetByBankAccount",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "bankId",
						"in": "path",
						"description": "The bank ID (routing number)",
						"required": true,
						"type": "string"
					},
					{
						"name": "accountNumber",
						"in": "path",
						"description": "The account number at the given bank",
						"required": true,
						"type": "string"
					},
					{
						"name": "paymentMethodCode",
						"in": "query",
						"description": "Limit search to direct debit payments using the given direct debit payment code (DDP-CDE).",
						"required": true,
						"type": "string"
					},
					{
						"name": "includeAllAddresses",
						"in": "query",
						"description": "Include all customer addresses in the response or just the customer's default address?",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "includeCreditSummary",
						"in": "query",
						"description": "Include the customer's credit summary in the response.",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Customer]"
						}
					}
				}
			}
		},
		"/customers/by-credit-card/{cardNumber}": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Search for customers by bank account.  This is a preliminary API, subject to change.",
				"operationId": "Customer_GetByCreditCard",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "cardNumber",
						"in": "path",
						"description": "The account number at the given bank",
						"required": true,
						"type": "string"
					},
					{
						"name": "paymentMethodCode",
						"in": "query",
						"description": "Limit search to the given card type (PAY-CODE).",
						"required": true,
						"type": "string"
					},
					{
						"name": "includeAllAddresses",
						"in": "query",
						"description": "Include all customer addresses in the response or just the customer's default address?",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "includeCreditSummary",
						"in": "query",
						"description": "Include the customer's credit summary in the response.",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Customer]"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/account-balance": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Get the account balance for the given customer.",
				"operationId": "Customer_GetAccountBalance",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number.",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "query",
						"description": "The currency code of the currency in which to present the balance.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AccountBalance"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/users": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Gets all users for the given customer.",
				"operationId": "Customer_GetUsers",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the customer.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[User]"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/users/{authenticationGroupCode}": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Gets all users for the given customer.",
				"operationId": "Customer_GetUsers",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the customer.",
						"required": true,
						"type": "string"
					},
					{
						"name": "authenticationGroupCode",
						"in": "path",
						"description": "Find users within this authentication group.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[User]"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/available-credits/{currencyCode}/total": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Gets the amount of credits available on the customers account.",
				"operationId": "Customer_GetAvailableCreditAmount",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "An Advantage customer number.",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "path",
						"description": "The currency code of the currency to filter by",
						"required": true,
						"type": "string"
					},
					{
						"name": "organizationCode",
						"in": "query",
						"description": "Organization to filter by.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AccountBalance"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/available-credits": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Gets the unapplied credits available on the customers account.",
				"operationId": "Customer_SearchAvailableCredits",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "An Advantage customer number.",
						"required": true,
						"type": "string"
					},
					{
						"name": "CreditReasonCode",
						"in": "query",
						"description": "Filter on CRD-RSN using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreditReasonCode.NotEqual",
						"in": "query",
						"description": "Filter on CRD-RSN using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreditReasonCode.Less",
						"in": "query",
						"description": "Filter on CRD-RSN using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreditReasonCode.LessOrEqual",
						"in": "query",
						"description": "Filter on CRD-RSN using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreditReasonCode.Greater",
						"in": "query",
						"description": "Filter on CRD-RSN using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreditReasonCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CRD-RSN using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreditReasonCode.IsNull",
						"in": "query",
						"description": "Filter on CRD-RSN using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreditReasonCode.IsNotNull",
						"in": "query",
						"description": "Filter on CRD-RSN using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreditReasonCode.Like",
						"in": "query",
						"description": "Filter on CRD-RSN using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreditReasonCode.NotLike",
						"in": "query",
						"description": "Filter on CRD-RSN using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreditReasonCode.Contains",
						"in": "query",
						"description": "Filter on CRD-RSN using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreditReasonCode.NotContains",
						"in": "query",
						"description": "Filter on CRD-RSN using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreditReasonCode.StartsWith",
						"in": "query",
						"description": "Filter on CRD-RSN using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreditReasonCode.NotStartsWith",
						"in": "query",
						"description": "Filter on CRD-RSN using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreditReasonCode.EndsWith",
						"in": "query",
						"description": "Filter on CRD-RSN using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreditReasonCode.NotEndsWith",
						"in": "query",
						"description": "Filter on CRD-RSN using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreditReasonCode.In",
						"in": "query",
						"description": "Filter on CRD-RSN using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CreditReasonCode.Between",
						"in": "query",
						"description": "Filter on CRD-RSN using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Less",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.LessOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Greater",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.IsNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.IsNotNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Like",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotLike",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Contains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotContains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.StartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotStartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.EndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotEndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.In",
						"in": "query",
						"description": "Filter on BIL-ORG using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Between",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Between' operator",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/UnappliedCredit"
							}
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/ordered-products": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Get a list of items purchased by this customer. Filtered by new, renewal and complimentary items.  This is a preliminary API, subject to change.",
				"operationId": "Customer_SearchOrderedProducts",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number.",
						"required": true,
						"type": "string"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "ItemNumber",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode",
						"in": "query",
						"description": "Filter on FOR-MAT using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotEqual",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Less",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on ITM-NUM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Greater",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ITM-NUM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.IsNull",
						"in": "query",
						"description": "Filter on ITM-NUM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.IsNotNull",
						"in": "query",
						"description": "Filter on ITM-NUM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Like",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotLike",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Contains",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotContains",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.StartsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.EndsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.In",
						"in": "query",
						"description": "Filter on ITM-NUM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Between",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.NotEqual",
						"in": "query",
						"description": "Filter on FOR-MAT using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.Less",
						"in": "query",
						"description": "Filter on FOR-MAT using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.LessOrEqual",
						"in": "query",
						"description": "Filter on FOR-MAT using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.Greater",
						"in": "query",
						"description": "Filter on FOR-MAT using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on FOR-MAT using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.IsNull",
						"in": "query",
						"description": "Filter on FOR-MAT using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.IsNotNull",
						"in": "query",
						"description": "Filter on FOR-MAT using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.Like",
						"in": "query",
						"description": "Filter on FOR-MAT using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.NotLike",
						"in": "query",
						"description": "Filter on FOR-MAT using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.Contains",
						"in": "query",
						"description": "Filter on FOR-MAT using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.NotContains",
						"in": "query",
						"description": "Filter on FOR-MAT using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.StartsWith",
						"in": "query",
						"description": "Filter on FOR-MAT using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.NotStartsWith",
						"in": "query",
						"description": "Filter on FOR-MAT using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.EndsWith",
						"in": "query",
						"description": "Filter on FOR-MAT using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.NotEndsWith",
						"in": "query",
						"description": "Filter on FOR-MAT using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.In",
						"in": "query",
						"description": "Filter on FOR-MAT using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.Between",
						"in": "query",
						"description": "Filter on FOR-MAT using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Less",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.LessOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Greater",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.IsNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.IsNotNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Like",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotLike",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Contains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotContains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.StartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotStartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.EndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotEndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.In",
						"in": "query",
						"description": "Filter on BIL-ORG using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Between",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.NotEqual",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.Less",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.LessOrEqual",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.Greater",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.IsNull",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.IsNotNull",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.Like",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.NotLike",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.Contains",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.NotContains",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.StartsWith",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.NotStartsWith",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.EndsWith",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.NotEndsWith",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.In",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.Between",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.NotEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.Less",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.Greater",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.IsNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.Like",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.NotLike",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.Contains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.NotContains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.StartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.EndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.In",
						"in": "query",
						"description": "Filter on CTM-NBR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.Between",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.NotEqual",
						"in": "query",
						"description": "Filter on SHP-CTM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.Less",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.LessOrEqual",
						"in": "query",
						"description": "Filter on SHP-CTM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.Greater",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.GreaterOrEqual",
						"in": "query",
						"description": "Filter on SHP-CTM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.IsNull",
						"in": "query",
						"description": "Filter on SHP-CTM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.IsNotNull",
						"in": "query",
						"description": "Filter on SHP-CTM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.Like",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.NotLike",
						"in": "query",
						"description": "Filter on SHP-CTM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.Contains",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.NotContains",
						"in": "query",
						"description": "Filter on SHP-CTM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.StartsWith",
						"in": "query",
						"description": "Filter on SHP-CTM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.NotStartsWith",
						"in": "query",
						"description": "Filter on SHP-CTM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.EndsWith",
						"in": "query",
						"description": "Filter on SHP-CTM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.NotEndsWith",
						"in": "query",
						"description": "Filter on SHP-CTM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.In",
						"in": "query",
						"description": "Filter on SHP-CTM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.Between",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Between' operator",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[PurchaseHistoryItem]"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/ordered-for-products": {
			"get": {
				"tags": [
					"Customer"
				],
				"operationId": "Customer_SearchOrderedForProducts",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "ItemNumber",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode",
						"in": "query",
						"description": "Filter on FOR-MAT using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotEqual",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Less",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on ITM-NUM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Greater",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ITM-NUM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.IsNull",
						"in": "query",
						"description": "Filter on ITM-NUM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.IsNotNull",
						"in": "query",
						"description": "Filter on ITM-NUM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Like",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotLike",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Contains",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotContains",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.StartsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.EndsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.In",
						"in": "query",
						"description": "Filter on ITM-NUM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Between",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.NotEqual",
						"in": "query",
						"description": "Filter on FOR-MAT using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.Less",
						"in": "query",
						"description": "Filter on FOR-MAT using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.LessOrEqual",
						"in": "query",
						"description": "Filter on FOR-MAT using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.Greater",
						"in": "query",
						"description": "Filter on FOR-MAT using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on FOR-MAT using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.IsNull",
						"in": "query",
						"description": "Filter on FOR-MAT using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.IsNotNull",
						"in": "query",
						"description": "Filter on FOR-MAT using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.Like",
						"in": "query",
						"description": "Filter on FOR-MAT using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.NotLike",
						"in": "query",
						"description": "Filter on FOR-MAT using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.Contains",
						"in": "query",
						"description": "Filter on FOR-MAT using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.NotContains",
						"in": "query",
						"description": "Filter on FOR-MAT using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.StartsWith",
						"in": "query",
						"description": "Filter on FOR-MAT using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.NotStartsWith",
						"in": "query",
						"description": "Filter on FOR-MAT using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.EndsWith",
						"in": "query",
						"description": "Filter on FOR-MAT using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.NotEndsWith",
						"in": "query",
						"description": "Filter on FOR-MAT using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.In",
						"in": "query",
						"description": "Filter on FOR-MAT using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ProductFormatCode.Between",
						"in": "query",
						"description": "Filter on FOR-MAT using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Less",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.LessOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Greater",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.IsNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.IsNotNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Like",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotLike",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Contains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotContains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.StartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotStartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.EndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotEndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.In",
						"in": "query",
						"description": "Filter on BIL-ORG using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Between",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.NotEqual",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.Less",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.LessOrEqual",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.Greater",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.IsNull",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.IsNotNull",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.Like",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.NotLike",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.Contains",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.NotContains",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.StartsWith",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.NotStartsWith",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.EndsWith",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.NotEndsWith",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.In",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.Between",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.NotEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.Less",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.Greater",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.IsNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.Like",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.NotLike",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.Contains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.NotContains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.StartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.EndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.In",
						"in": "query",
						"description": "Filter on CTM-NBR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomer.Between",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.NotEqual",
						"in": "query",
						"description": "Filter on SHP-CTM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.Less",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.LessOrEqual",
						"in": "query",
						"description": "Filter on SHP-CTM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.Greater",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.GreaterOrEqual",
						"in": "query",
						"description": "Filter on SHP-CTM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.IsNull",
						"in": "query",
						"description": "Filter on SHP-CTM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.IsNotNull",
						"in": "query",
						"description": "Filter on SHP-CTM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.Like",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.NotLike",
						"in": "query",
						"description": "Filter on SHP-CTM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.Contains",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.NotContains",
						"in": "query",
						"description": "Filter on SHP-CTM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.StartsWith",
						"in": "query",
						"description": "Filter on SHP-CTM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.NotStartsWith",
						"in": "query",
						"description": "Filter on SHP-CTM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.EndsWith",
						"in": "query",
						"description": "Filter on SHP-CTM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.NotEndsWith",
						"in": "query",
						"description": "Filter on SHP-CTM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.In",
						"in": "query",
						"description": "Filter on SHP-CTM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomer.Between",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Between' operator",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[PurchaseHistoryItem]"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/saved-payment-methods/credit-cards": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Get a list of saved credit cards for this customer.\r\nThis is a preliminary API, subject to change.",
				"operationId": "Customer_GetSavedCreditCards",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number.",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.promotionCode",
						"in": "query",
						"description": "Promotion Code",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.currencyCode",
						"in": "query",
						"description": "Currency Code",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.billingOrganizationCode",
						"in": "query",
						"description": "Billing Organization",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.webEnabledOnly",
						"in": "query",
						"description": "True to limit credit cards to those that are setup to be \"web enabled\"",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/SavedCreditCard"
							}
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/saved-payment-methods": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Get saved payments for the given customer",
				"operationId": "Customer_GetSavedPayments",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "Customer Number",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.billingOrganization",
						"in": "query",
						"description": "The Billing Organization of the saved payment to filter results by",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.billingCurrency",
						"in": "query",
						"description": "The Billing Currency of the saved payment to filter results by",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.promotionCode",
						"in": "query",
						"description": "The billing Promotion Code of the saved payment to filter results by",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.callListId",
						"in": "query",
						"description": "The Call List Id used to get an alternative billing organization",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.callListDate",
						"in": "query",
						"description": "The Call List Date used to get an alternative billing organization",
						"required": false,
						"type": "string",
						"format": "date-time"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[SavedPayment]"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/relationships": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Get a list of relationships for this customer.",
				"operationId": "Customer_GetRelationships",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The \"Related-From\" Advantage customer number.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/CustomerRelationship"
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"Customer"
				],
				"summary": "Creates a new customer relationship in Advantage",
				"operationId": "Customer_CreateRelationship",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The \"Related-From\" Advantage customer number.",
						"required": true,
						"type": "string"
					},
					{
						"name": "createRequest",
						"in": "body",
						"description": "A CustomerRelationshipCreateRequest object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CustomerRelationshipCreateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/customers/{customerNumber}/pending-premiums": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Get a list of pending premium items for this customer.",
				"operationId": "Customer_GetPendingPremiums",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[PendingPremium]"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/calls": {
			"get": {
				"tags": [
					"Customer"
				],
				"summary": "Gets list of calls for the given customer",
				"operationId": "Customer_GetCustomerCalls",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "Customer number",
						"required": true,
						"type": "string"
					},
					{
						"name": "includeSeparateListCallbacks",
						"in": "query",
						"description": "True to include separate list callbacks",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "includeCompletedCalls",
						"in": "query",
						"description": "True if completed calls are selected,\r\nFalse if completed calls are not selected",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "includeContacted",
						"in": "query",
						"description": "True to include calls where the customer has\r\nbeen contacted at least once",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Call"
							}
						}
					}
				}
			}
		},
		"/data-dictionary/fields/{fieldName}": {
			"get": {
				"tags": [
					"DataDictionary"
				],
				"summary": "Get field information from Advantage",
				"operationId": "DataDictionary_GetField",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "fieldName",
						"in": "path",
						"description": "The Actual Name of a field in the dictionary",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Field"
						}
					}
				}
			}
		},
		"/data-dictionary/fields/{fieldName}/valid-values": {
			"get": {
				"tags": [
					"DataDictionary"
				],
				"summary": "Gets a list of valid values for a specific field.",
				"operationId": "DataDictionary_GetValidValues",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "fieldName",
						"in": "path",
						"description": "The field name to get values for",
						"required": true,
						"type": "string"
					},
					{
						"name": "valueListFilters",
						"in": "query",
						"description": "Optional value list filters, \r\nformatted as a &lt;FLD-NME&gt;=&lt;Value&gt; (e.g. ADR-CDE=HOME)",
						"required": false,
						"type": "array",
						"items": {},
						"collectionFormat": "multi"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[FieldValidValue]"
						}
					}
				}
			}
		},
		"/data-dictionary/tables/{tableName}/fields/{referenceName}": {
			"get": {
				"tags": [
					"DataDictionary"
				],
				"summary": "Get field information from an inclusion on a table in Advantage",
				"operationId": "DataDictionary_GetFieldReference",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "referenceName",
						"in": "path",
						"description": "The Reference Name of a field included on the table",
						"required": true,
						"type": "string"
					},
					{
						"name": "tableName",
						"in": "path",
						"description": "The Table Name that includes the field",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Field"
						}
					}
				}
			}
		},
		"/distribution-runs/{distributionRunId}": {
			"post": {
				"tags": [
					"DistributionRun"
				],
				"summary": "Update an existing distribution run's status",
				"operationId": "DistributionRun_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "distributionRunId",
						"in": "path",
						"description": "The ID of the distribution run to update",
						"required": true,
						"type": "string"
					},
					{
						"name": "request",
						"in": "body",
						"description": "A DistributionRunUpdateRequest object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DistributionRunUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/documents/{docketNumber}": {
			"get": {
				"tags": [
					"Document"
				],
				"summary": "Streams a document from a location pointed to by a given docket number",
				"operationId": "Document_GetDocument",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "docketNumber",
						"in": "path",
						"description": "The docket number of the document to stream.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "object"
						}
					}
				}
			}
		},
		"/email-lists/{listCode}/registrations": {
			"get": {
				"tags": [
					"EmailList"
				],
				"summary": "Get the ListEmails that belong to an EmailList.",
				"operationId": "EmailList_GetRegistrations",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "listCode",
						"in": "path",
						"description": "The List ID of the list.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[EmailListRegistration]"
						}
					}
				}
			},
			"post": {
				"tags": [
					"EmailList"
				],
				"summary": "Adds or updates an email list registration.",
				"operationId": "EmailList_CreateOrUpdateEmailListRegistration",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "listCode",
						"in": "path",
						"description": "The list code ID for the target EmailList.",
						"required": true,
						"type": "string"
					},
					{
						"name": "listEmail",
						"in": "body",
						"description": "The ListEmail object to add or update on the target EmailList.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/EmailListRegistration"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/EmailListRegistration"
						}
					}
				}
			}
		},
		"/email-lists": {
			"get": {
				"tags": [
					"EmailList"
				],
				"summary": "Get all active web-enabled email lists.",
				"operationId": "EmailList_Search",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "listCategoryCode",
						"in": "query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[EmailList]"
						}
					}
				}
			},
			"post": {
				"tags": [
					"EmailList"
				],
				"summary": "Create a new EmailList.",
				"operationId": "EmailList_Create",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "emailList",
						"in": "body",
						"description": "An EmailList object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/EmailList"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/email-lists/{listCode}": {
			"get": {
				"tags": [
					"EmailList"
				],
				"summary": "Gets the EmailList details of the email list with the given list code.",
				"operationId": "EmailList_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "listCode",
						"in": "path",
						"description": "The list code of the desired EmailList.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/EmailList"
						}
					}
				}
			},
			"post": {
				"tags": [
					"EmailList"
				],
				"operationId": "EmailList_UpdateEmailList",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "listCode",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "emailListUpdateRequest",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/EmailListUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/customers/{customerNumber}/email-lists": {
			"get": {
				"tags": [
					"EmailList"
				],
				"summary": "Get all of the ListEmail objects that pertain to the given customer.",
				"operationId": "EmailList_GetEmailListParticipation",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "An Advantage customer number.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[EmailListRegistration]"
						}
					}
				}
			},
			"put": {
				"tags": [
					"EmailList"
				],
				"summary": "Update the entire email list membership for a given customer.\r\nWarning: This does remove the customer from any email list that is not in the requested collection.",
				"operationId": "EmailList_UpdateEmailListParticipation",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "An Advantage customer number.",
						"required": true,
						"type": "string"
					},
					{
						"name": "listParticipationUpdateRequest",
						"in": "body",
						"description": "A ListParticipationUpdateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/EmailListRegistrationReplacementRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/email-lists/{listCode}/registrations/{email}": {
			"delete": {
				"tags": [
					"EmailList"
				],
				"summary": "Remove a list email from an email list.",
				"operationId": "EmailList_RemoveFromEmailList",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "listCode",
						"in": "path",
						"description": "The list code that identifies the email list.",
						"required": true,
						"type": "string"
					},
					{
						"name": "email",
						"in": "path",
						"description": "The email address to be removed from the email list.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/websites/{siteCode}/email-lists": {
			"get": {
				"tags": [
					"EmailList"
				],
				"summary": "Get the details of the email lists for the given website. This only gets web-enabled active email lists.",
				"operationId": "EmailList_GetWebEmailLists",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "siteCode",
						"in": "path",
						"description": "A website ID.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[EmailList]"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/gift-certificates": {
			"get": {
				"tags": [
					"GiftCertificate"
				],
				"operationId": "GiftCertificate_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "webEnabledOnly",
						"in": "query",
						"required": true,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/GiftCertificate"
							}
						}
					}
				}
			}
		},
		"/invoices/{debitNumber}": {
			"get": {
				"tags": [
					"Invoice"
				],
				"summary": "Gets an invoice.",
				"operationId": "Invoice_GetInvoice",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "debitNumber",
						"in": "path",
						"description": "The debit number identifying the invoice to return",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/OrderInvoice"
						}
					}
				}
			}
		},
		"/invoices/{debitNumber}/payments/available-credits": {
			"post": {
				"tags": [
					"Invoice"
				],
				"summary": "Add a payment to a given debit using the customer's available credit.\r\nIf a specific amount is specified to use but there is less than that available, an error will be thrown.\r\nIf a zero amount is specified, all or any available credit will be used up to the amount due.",
				"operationId": "Invoice_AddAvailableCreditPayment",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "debitNumber",
						"in": "path",
						"description": "The debit number (usually an order number) to apply the credit to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "payment",
						"in": "body",
						"description": "An AvailableCreditPaymentRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/OrderAvailableCreditPaymentRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PaymentResponse"
						}
					}
				}
			}
		},
		"/invoices/{debitNumber}/payments/saved-credit-cards": {
			"post": {
				"tags": [
					"Invoice"
				],
				"summary": "Add a credit card payment to an existing order.",
				"operationId": "Invoice_AddSavedCreditCardPayment",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "debitNumber",
						"in": "path",
						"description": "The debit number (usually an order number) to apply the credit to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "payment",
						"in": "body",
						"description": "An credit card payment details.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/OrderSavedCreditCardPaymentRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PaymentResponse"
						}
					}
				}
			}
		},
		"/invoices/{debitNumber}/payments/credit-cards": {
			"post": {
				"tags": [
					"Invoice"
				],
				"summary": "Adds credit card payments to an existing open invoice for an existing order.",
				"operationId": "Invoice_AddCreditCardPayment",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "debitNumber",
						"in": "path",
						"description": "The debit number (usually an order number) to apply the credit to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "payment",
						"in": "body",
						"description": "The tokenized credit card payment details.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/OrderCreditCardPaymentRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PaymentResponse"
						}
					}
				}
			}
		},
		"/invoices/{debitNumber}/payments/credit-memos": {
			"post": {
				"tags": [
					"Invoice"
				],
				"summary": "Adds credit memo payments to existing invoices for the given order.\r\nThe amount will be applied to existing order until it has all been\r\nused",
				"operationId": "Invoice_AddOrderPaymentCreditMemo",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "debitNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "payment",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/OrderCreditMemoPaymentRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PaymentResponse"
						}
					}
				}
			}
		},
		"/invoices/{debitNumber}/payments/saved-bank-accounts": {
			"post": {
				"tags": [
					"Invoice"
				],
				"summary": "Add a direct debit payment to an existing order.",
				"operationId": "Invoice_AddSavedDirectDebitPayment",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "debitNumber",
						"in": "path",
						"description": "The debit number (usually an order number) to apply the credit to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "payment",
						"in": "body",
						"description": "The direct debit payment details",
						"required": true,
						"schema": {
							"$ref": "#/definitions/OrderSavedDirectDebitPaymentRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PaymentResponse"
						}
					}
				}
			}
		},
		"/invoices/{debitNumber}/payments/checks": {
			"post": {
				"tags": [
					"Invoice"
				],
				"summary": "Add a check payment to an existing order.",
				"operationId": "Invoice_AddOrderPaymentCheck",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "debitNumber",
						"in": "path",
						"description": "The debit number (usually an order number) to apply the credit to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "payment",
						"in": "body",
						"description": "The check payment details",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CheckPaymentRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PaymentResponse"
						}
					}
				}
			}
		},
		"/invoices/{debitNumber}/payments/digital-wallets": {
			"post": {
				"tags": [
					"Invoice"
				],
				"summary": "Add a Digital Wallet payment to an existing order",
				"operationId": "Invoice_AddOrderPaymentDigitalWallet",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "debitNumber",
						"in": "path",
						"description": "The debit number (usually an order number) to apply the payment to",
						"required": true,
						"type": "string"
					},
					{
						"name": "payment",
						"in": "body",
						"description": "Digital Wallet payment details",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DigitalWalletPaymentRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/invoices": {
			"get": {
				"tags": [
					"Invoice"
				],
				"summary": "Gets order invoices matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.\r\nFor example, /invoices?OrderNumber.EQ=12345 or /invoices?OrderNumber.EQ=12345&amp;CustomerNumber.EQ=1",
				"operationId": "Invoice_Search",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "OrderNumber",
						"in": "query",
						"description": "Filter on DBT-NBR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal",
						"in": "query",
						"description": "Filter on TOT-DBT using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid",
						"in": "query",
						"description": "Filter on TOT-PAD using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag",
						"in": "query",
						"description": "Filter on DBT-PAD using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate",
						"in": "query",
						"description": "Filter on DUE-INF using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber",
						"in": "query",
						"description": "Filter on SRC-CTM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.NotEqual",
						"in": "query",
						"description": "Filter on DBT-NBR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.Less",
						"in": "query",
						"description": "Filter on DBT-NBR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on DBT-NBR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.Greater",
						"in": "query",
						"description": "Filter on DBT-NBR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on DBT-NBR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.IsNull",
						"in": "query",
						"description": "Filter on DBT-NBR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.IsNotNull",
						"in": "query",
						"description": "Filter on DBT-NBR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.Like",
						"in": "query",
						"description": "Filter on DBT-NBR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.NotLike",
						"in": "query",
						"description": "Filter on DBT-NBR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.Contains",
						"in": "query",
						"description": "Filter on DBT-NBR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.NotContains",
						"in": "query",
						"description": "Filter on DBT-NBR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.StartsWith",
						"in": "query",
						"description": "Filter on DBT-NBR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on DBT-NBR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.EndsWith",
						"in": "query",
						"description": "Filter on DBT-NBR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on DBT-NBR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.In",
						"in": "query",
						"description": "Filter on DBT-NBR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.Between",
						"in": "query",
						"description": "Filter on DBT-NBR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.NotEqual",
						"in": "query",
						"description": "Filter on TOT-DBT using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.Less",
						"in": "query",
						"description": "Filter on TOT-DBT using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.LessOrEqual",
						"in": "query",
						"description": "Filter on TOT-DBT using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.Greater",
						"in": "query",
						"description": "Filter on TOT-DBT using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.GreaterOrEqual",
						"in": "query",
						"description": "Filter on TOT-DBT using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.IsNull",
						"in": "query",
						"description": "Filter on TOT-DBT using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.IsNotNull",
						"in": "query",
						"description": "Filter on TOT-DBT using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.Like",
						"in": "query",
						"description": "Filter on TOT-DBT using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.NotLike",
						"in": "query",
						"description": "Filter on TOT-DBT using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.Contains",
						"in": "query",
						"description": "Filter on TOT-DBT using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.NotContains",
						"in": "query",
						"description": "Filter on TOT-DBT using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.StartsWith",
						"in": "query",
						"description": "Filter on TOT-DBT using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.NotStartsWith",
						"in": "query",
						"description": "Filter on TOT-DBT using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.EndsWith",
						"in": "query",
						"description": "Filter on TOT-DBT using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.NotEndsWith",
						"in": "query",
						"description": "Filter on TOT-DBT using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.In",
						"in": "query",
						"description": "Filter on TOT-DBT using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.Between",
						"in": "query",
						"description": "Filter on TOT-DBT using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.NotEqual",
						"in": "query",
						"description": "Filter on TOT-PAD using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.Less",
						"in": "query",
						"description": "Filter on TOT-PAD using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.LessOrEqual",
						"in": "query",
						"description": "Filter on TOT-PAD using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.Greater",
						"in": "query",
						"description": "Filter on TOT-PAD using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.GreaterOrEqual",
						"in": "query",
						"description": "Filter on TOT-PAD using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.IsNull",
						"in": "query",
						"description": "Filter on TOT-PAD using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.IsNotNull",
						"in": "query",
						"description": "Filter on TOT-PAD using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.Like",
						"in": "query",
						"description": "Filter on TOT-PAD using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.NotLike",
						"in": "query",
						"description": "Filter on TOT-PAD using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.Contains",
						"in": "query",
						"description": "Filter on TOT-PAD using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.NotContains",
						"in": "query",
						"description": "Filter on TOT-PAD using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.StartsWith",
						"in": "query",
						"description": "Filter on TOT-PAD using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.NotStartsWith",
						"in": "query",
						"description": "Filter on TOT-PAD using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.EndsWith",
						"in": "query",
						"description": "Filter on TOT-PAD using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.NotEndsWith",
						"in": "query",
						"description": "Filter on TOT-PAD using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.In",
						"in": "query",
						"description": "Filter on TOT-PAD using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.Between",
						"in": "query",
						"description": "Filter on TOT-PAD using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.NotEqual",
						"in": "query",
						"description": "Filter on DBT-PAD using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.Less",
						"in": "query",
						"description": "Filter on DBT-PAD using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.LessOrEqual",
						"in": "query",
						"description": "Filter on DBT-PAD using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.Greater",
						"in": "query",
						"description": "Filter on DBT-PAD using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.GreaterOrEqual",
						"in": "query",
						"description": "Filter on DBT-PAD using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.IsNull",
						"in": "query",
						"description": "Filter on DBT-PAD using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.IsNotNull",
						"in": "query",
						"description": "Filter on DBT-PAD using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.Like",
						"in": "query",
						"description": "Filter on DBT-PAD using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.NotLike",
						"in": "query",
						"description": "Filter on DBT-PAD using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.Contains",
						"in": "query",
						"description": "Filter on DBT-PAD using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.NotContains",
						"in": "query",
						"description": "Filter on DBT-PAD using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.StartsWith",
						"in": "query",
						"description": "Filter on DBT-PAD using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.NotStartsWith",
						"in": "query",
						"description": "Filter on DBT-PAD using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.EndsWith",
						"in": "query",
						"description": "Filter on DBT-PAD using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.NotEndsWith",
						"in": "query",
						"description": "Filter on DBT-PAD using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.In",
						"in": "query",
						"description": "Filter on DBT-PAD using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.Between",
						"in": "query",
						"description": "Filter on DBT-PAD using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.NotEqual",
						"in": "query",
						"description": "Filter on DUE-INF using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.Less",
						"in": "query",
						"description": "Filter on DUE-INF using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.LessOrEqual",
						"in": "query",
						"description": "Filter on DUE-INF using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.Greater",
						"in": "query",
						"description": "Filter on DUE-INF using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.GreaterOrEqual",
						"in": "query",
						"description": "Filter on DUE-INF using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.IsNull",
						"in": "query",
						"description": "Filter on DUE-INF using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.IsNotNull",
						"in": "query",
						"description": "Filter on DUE-INF using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.Like",
						"in": "query",
						"description": "Filter on DUE-INF using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.NotLike",
						"in": "query",
						"description": "Filter on DUE-INF using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.Contains",
						"in": "query",
						"description": "Filter on DUE-INF using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.NotContains",
						"in": "query",
						"description": "Filter on DUE-INF using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.StartsWith",
						"in": "query",
						"description": "Filter on DUE-INF using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.NotStartsWith",
						"in": "query",
						"description": "Filter on DUE-INF using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.EndsWith",
						"in": "query",
						"description": "Filter on DUE-INF using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.NotEndsWith",
						"in": "query",
						"description": "Filter on DUE-INF using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.In",
						"in": "query",
						"description": "Filter on DUE-INF using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.Between",
						"in": "query",
						"description": "Filter on DUE-INF using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.NotEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.Less",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.LessOrEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.Greater",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.IsNull",
						"in": "query",
						"description": "Filter on BIL-CUR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.IsNotNull",
						"in": "query",
						"description": "Filter on BIL-CUR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.Like",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.NotLike",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.Contains",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.NotContains",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.StartsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.NotStartsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.EndsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.NotEndsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.In",
						"in": "query",
						"description": "Filter on BIL-CUR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.Between",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotEqual",
						"in": "query",
						"description": "Filter on SRC-CTM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Less",
						"in": "query",
						"description": "Filter on SRC-CTM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on SRC-CTM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Greater",
						"in": "query",
						"description": "Filter on SRC-CTM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on SRC-CTM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.IsNull",
						"in": "query",
						"description": "Filter on SRC-CTM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.IsNotNull",
						"in": "query",
						"description": "Filter on SRC-CTM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Like",
						"in": "query",
						"description": "Filter on SRC-CTM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotLike",
						"in": "query",
						"description": "Filter on SRC-CTM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Contains",
						"in": "query",
						"description": "Filter on SRC-CTM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotContains",
						"in": "query",
						"description": "Filter on SRC-CTM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.StartsWith",
						"in": "query",
						"description": "Filter on SRC-CTM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on SRC-CTM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.EndsWith",
						"in": "query",
						"description": "Filter on SRC-CTM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on SRC-CTM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.In",
						"in": "query",
						"description": "Filter on SRC-CTM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Between",
						"in": "query",
						"description": "Filter on SRC-CTM using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Less",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.LessOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Greater",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.IsNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.IsNotNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Like",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotLike",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Contains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotContains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.StartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotStartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.EndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotEndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.In",
						"in": "query",
						"description": "Filter on BIL-ORG using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Between",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Between' operator",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[OrderInvoice]"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/invoices": {
			"get": {
				"tags": [
					"Invoice"
				],
				"summary": "Gets order invoices matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.\r\nFor example, /invoices?OrderNumber.EQ=12345 or /invoices?OrderNumber.EQ=12345&amp;CustomerNumber.EQ=1",
				"operationId": "Invoice_SearchByCustomer",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "Customer number",
						"required": true,
						"type": "string"
					},
					{
						"name": "OrderNumber",
						"in": "query",
						"description": "Filter on DBT-NBR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal",
						"in": "query",
						"description": "Filter on TOT-DBT using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid",
						"in": "query",
						"description": "Filter on TOT-PAD using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag",
						"in": "query",
						"description": "Filter on DBT-PAD using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate",
						"in": "query",
						"description": "Filter on DUE-INF using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber",
						"in": "query",
						"description": "Filter on SRC-CTM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.NotEqual",
						"in": "query",
						"description": "Filter on DBT-NBR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.Less",
						"in": "query",
						"description": "Filter on DBT-NBR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on DBT-NBR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.Greater",
						"in": "query",
						"description": "Filter on DBT-NBR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on DBT-NBR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.IsNull",
						"in": "query",
						"description": "Filter on DBT-NBR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.IsNotNull",
						"in": "query",
						"description": "Filter on DBT-NBR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.Like",
						"in": "query",
						"description": "Filter on DBT-NBR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.NotLike",
						"in": "query",
						"description": "Filter on DBT-NBR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.Contains",
						"in": "query",
						"description": "Filter on DBT-NBR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.NotContains",
						"in": "query",
						"description": "Filter on DBT-NBR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.StartsWith",
						"in": "query",
						"description": "Filter on DBT-NBR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on DBT-NBR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.EndsWith",
						"in": "query",
						"description": "Filter on DBT-NBR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on DBT-NBR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.In",
						"in": "query",
						"description": "Filter on DBT-NBR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.Between",
						"in": "query",
						"description": "Filter on DBT-NBR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.NotEqual",
						"in": "query",
						"description": "Filter on TOT-DBT using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.Less",
						"in": "query",
						"description": "Filter on TOT-DBT using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.LessOrEqual",
						"in": "query",
						"description": "Filter on TOT-DBT using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.Greater",
						"in": "query",
						"description": "Filter on TOT-DBT using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.GreaterOrEqual",
						"in": "query",
						"description": "Filter on TOT-DBT using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.IsNull",
						"in": "query",
						"description": "Filter on TOT-DBT using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.IsNotNull",
						"in": "query",
						"description": "Filter on TOT-DBT using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.Like",
						"in": "query",
						"description": "Filter on TOT-DBT using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.NotLike",
						"in": "query",
						"description": "Filter on TOT-DBT using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.Contains",
						"in": "query",
						"description": "Filter on TOT-DBT using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.NotContains",
						"in": "query",
						"description": "Filter on TOT-DBT using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.StartsWith",
						"in": "query",
						"description": "Filter on TOT-DBT using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.NotStartsWith",
						"in": "query",
						"description": "Filter on TOT-DBT using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.EndsWith",
						"in": "query",
						"description": "Filter on TOT-DBT using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.NotEndsWith",
						"in": "query",
						"description": "Filter on TOT-DBT using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.In",
						"in": "query",
						"description": "Filter on TOT-DBT using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderTotal.Between",
						"in": "query",
						"description": "Filter on TOT-DBT using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.NotEqual",
						"in": "query",
						"description": "Filter on TOT-PAD using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.Less",
						"in": "query",
						"description": "Filter on TOT-PAD using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.LessOrEqual",
						"in": "query",
						"description": "Filter on TOT-PAD using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.Greater",
						"in": "query",
						"description": "Filter on TOT-PAD using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.GreaterOrEqual",
						"in": "query",
						"description": "Filter on TOT-PAD using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.IsNull",
						"in": "query",
						"description": "Filter on TOT-PAD using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.IsNotNull",
						"in": "query",
						"description": "Filter on TOT-PAD using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.Like",
						"in": "query",
						"description": "Filter on TOT-PAD using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.NotLike",
						"in": "query",
						"description": "Filter on TOT-PAD using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.Contains",
						"in": "query",
						"description": "Filter on TOT-PAD using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.NotContains",
						"in": "query",
						"description": "Filter on TOT-PAD using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.StartsWith",
						"in": "query",
						"description": "Filter on TOT-PAD using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.NotStartsWith",
						"in": "query",
						"description": "Filter on TOT-PAD using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.EndsWith",
						"in": "query",
						"description": "Filter on TOT-PAD using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.NotEndsWith",
						"in": "query",
						"description": "Filter on TOT-PAD using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.In",
						"in": "query",
						"description": "Filter on TOT-PAD using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "AmountPaid.Between",
						"in": "query",
						"description": "Filter on TOT-PAD using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.NotEqual",
						"in": "query",
						"description": "Filter on DBT-PAD using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.Less",
						"in": "query",
						"description": "Filter on DBT-PAD using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.LessOrEqual",
						"in": "query",
						"description": "Filter on DBT-PAD using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.Greater",
						"in": "query",
						"description": "Filter on DBT-PAD using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.GreaterOrEqual",
						"in": "query",
						"description": "Filter on DBT-PAD using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.IsNull",
						"in": "query",
						"description": "Filter on DBT-PAD using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.IsNotNull",
						"in": "query",
						"description": "Filter on DBT-PAD using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.Like",
						"in": "query",
						"description": "Filter on DBT-PAD using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.NotLike",
						"in": "query",
						"description": "Filter on DBT-PAD using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.Contains",
						"in": "query",
						"description": "Filter on DBT-PAD using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.NotContains",
						"in": "query",
						"description": "Filter on DBT-PAD using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.StartsWith",
						"in": "query",
						"description": "Filter on DBT-PAD using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.NotStartsWith",
						"in": "query",
						"description": "Filter on DBT-PAD using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.EndsWith",
						"in": "query",
						"description": "Filter on DBT-PAD using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.NotEndsWith",
						"in": "query",
						"description": "Filter on DBT-PAD using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.In",
						"in": "query",
						"description": "Filter on DBT-PAD using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DebitFullyPaidFlag.Between",
						"in": "query",
						"description": "Filter on DBT-PAD using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.NotEqual",
						"in": "query",
						"description": "Filter on DUE-INF using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.Less",
						"in": "query",
						"description": "Filter on DUE-INF using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.LessOrEqual",
						"in": "query",
						"description": "Filter on DUE-INF using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.Greater",
						"in": "query",
						"description": "Filter on DUE-INF using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.GreaterOrEqual",
						"in": "query",
						"description": "Filter on DUE-INF using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.IsNull",
						"in": "query",
						"description": "Filter on DUE-INF using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.IsNotNull",
						"in": "query",
						"description": "Filter on DUE-INF using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.Like",
						"in": "query",
						"description": "Filter on DUE-INF using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.NotLike",
						"in": "query",
						"description": "Filter on DUE-INF using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.Contains",
						"in": "query",
						"description": "Filter on DUE-INF using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.NotContains",
						"in": "query",
						"description": "Filter on DUE-INF using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.StartsWith",
						"in": "query",
						"description": "Filter on DUE-INF using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.NotStartsWith",
						"in": "query",
						"description": "Filter on DUE-INF using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.EndsWith",
						"in": "query",
						"description": "Filter on DUE-INF using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.NotEndsWith",
						"in": "query",
						"description": "Filter on DUE-INF using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.In",
						"in": "query",
						"description": "Filter on DUE-INF using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DueDate.Between",
						"in": "query",
						"description": "Filter on DUE-INF using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.NotEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.Less",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.LessOrEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.Greater",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.IsNull",
						"in": "query",
						"description": "Filter on BIL-CUR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.IsNotNull",
						"in": "query",
						"description": "Filter on BIL-CUR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.Like",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.NotLike",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.Contains",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.NotContains",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.StartsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.NotStartsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.EndsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.NotEndsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.In",
						"in": "query",
						"description": "Filter on BIL-CUR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CurrencyCode.Between",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotEqual",
						"in": "query",
						"description": "Filter on SRC-CTM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Less",
						"in": "query",
						"description": "Filter on SRC-CTM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on SRC-CTM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Greater",
						"in": "query",
						"description": "Filter on SRC-CTM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on SRC-CTM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.IsNull",
						"in": "query",
						"description": "Filter on SRC-CTM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.IsNotNull",
						"in": "query",
						"description": "Filter on SRC-CTM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Like",
						"in": "query",
						"description": "Filter on SRC-CTM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotLike",
						"in": "query",
						"description": "Filter on SRC-CTM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Contains",
						"in": "query",
						"description": "Filter on SRC-CTM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotContains",
						"in": "query",
						"description": "Filter on SRC-CTM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.StartsWith",
						"in": "query",
						"description": "Filter on SRC-CTM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on SRC-CTM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.EndsWith",
						"in": "query",
						"description": "Filter on SRC-CTM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on SRC-CTM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.In",
						"in": "query",
						"description": "Filter on SRC-CTM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Between",
						"in": "query",
						"description": "Filter on SRC-CTM using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Less",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.LessOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Greater",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.IsNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.IsNotNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Like",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotLike",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Contains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotContains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.StartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotStartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.EndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotEndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.In",
						"in": "query",
						"description": "Filter on BIL-ORG using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Between",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Between' operator",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[OrderInvoice]"
						}
					}
				}
			}
		},
		"/custom-values/{fieldName}": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Get a list of custom values for a specific field.",
				"operationId": "Lookup_GetCustomValues",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "fieldName",
						"in": "path",
						"description": "The field name to get values for.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[CustomValue]"
						}
					}
				}
			}
		},
		"/system-values/{fieldName}": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Get a list of system values for a specific field.",
				"operationId": "Lookup_GetSystemValues",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "fieldName",
						"in": "path",
						"description": "The field name to get values for.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[SystemValue]"
						}
					}
				}
			}
		},
		"/address-codes": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Get the list of valid address codes.",
				"operationId": "Lookup_GetAddressCodes",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/AddressCode"
							}
						}
					}
				}
			}
		},
		"/address-codes/{addressCode}": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Given a valid address code, return an object containing \r\nthat code and other valuable information about that type of address.",
				"operationId": "Lookup_GetAddressCode",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "addressCode",
						"in": "path",
						"description": "A valid address code.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AddressCode"
						}
					}
				}
			}
		},
		"/organizations": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Return a list of active organization codes.",
				"operationId": "Lookup_GetOrganizations",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Organization"
							}
						}
					}
				}
			}
		},
		"/renewal-policies": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Return a list of renewal policies (renewal flags).",
				"operationId": "Lookup_GetRenewalPolicies",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[RenewalPolicy]"
						}
					}
				}
			}
		},
		"/organizations/{organizationCode}": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Given a valid organization code, return an object with information about that organization.",
				"operationId": "Lookup_GetOrganization",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "organizationCode",
						"in": "path",
						"description": "A valid organization code.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Organization"
						}
					}
				}
			}
		},
		"/customer-titles": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Return a list of valid customer titles.",
				"operationId": "Lookup_GetCustomerTitles",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/CustomerTitle"
							}
						}
					}
				}
			}
		},
		"/currencies": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Return a list of valid currencies.",
				"operationId": "Lookup_GetCurrencies",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Currency"
							}
						}
					}
				}
			}
		},
		"/currencies/{currencyCode}": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Return a valid currency.",
				"operationId": "Lookup_GetCurrency",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "currencyCode",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Currency"
						}
					}
				}
			}
		},
		"/subscription-types": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Get the valid subscription types.",
				"operationId": "Lookup_GetSubscriptionTypes",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/SubscriptionType"
							}
						}
					}
				}
			}
		},
		"/installment-billing-plans": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Get the valid installment billing plans for a particular currency.",
				"operationId": "Lookup_GetInstallmentBillingPlans",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "currencyCode",
						"in": "query",
						"description": "The currency code of the currency to filter by.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[InstallmentBillingPlan]"
						}
					}
				}
			}
		},
		"/issue-groups": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Get the valid issue groups.",
				"operationId": "Lookup_GetIssueGroups",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[IssueGroup]"
						}
					}
				}
			}
		},
		"/credit-policies": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Get the valid credit policies.",
				"operationId": "Lookup_GetCreditPolicies",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[CreditPolicy]"
						}
					}
				}
			}
		},
		"/access-services/{accessServiceCode}/access-periods": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Get the valid access periods.",
				"operationId": "Lookup_GetAccessPeriods",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "accessServiceCode",
						"in": "path",
						"description": "The service ID of an Advantage access service.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/AccessPeriod"
							}
						}
					}
				}
			}
		},
		"/auto-renewal-chains/agreements": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Get the valid auto-renewal chains for agreements.",
				"operationId": "Lookup_GetAgreementAutoRenewalChains",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[AgreementAutoRenewalChain]"
						}
					}
				}
			}
		},
		"/customer-service-reasons/{areaCode}/{categoryCode}": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Gets the valid reasons for a category of customer service operations.",
				"operationId": "Lookup_GetCustomerServiceReasons",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "areaCode",
						"in": "path",
						"description": "The customer service area (module) code",
						"required": true,
						"type": "string"
					},
					{
						"name": "categoryCode",
						"in": "path",
						"description": "The reason category code",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[CustomerServiceReasons]"
						}
					}
				}
			}
		},
		"/response-types": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Gets the valid response types (or order sources).",
				"operationId": "Lookup_GetResponseTypes",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[ResponseType]"
						}
					}
				}
			}
		},
		"/demographic-partitions/{partitionName}": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Gets the definition of a demographic partition (defined at the CDSDEM view) including the\r\ncustom fields contained in the given partition.",
				"operationId": "Lookup_GetDemographicPartition",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "partitionName",
						"in": "path",
						"description": "A demographic partition name (e.g. CUS-DMO)",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/DemographicPartition"
						}
					}
				}
			}
		},
		"/advantage-users/{userCode}": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Gets a User.",
				"operationId": "Lookup_GetUser",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "userCode",
						"in": "path",
						"description": "User Code",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/AdvantageUser"
						}
					}
				}
			}
		},
		"/advantage-users": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Gets a List of Users.",
				"operationId": "Lookup_GetUsers",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "UserCode",
						"in": "query",
						"description": "Filter on USR-CDE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UserCode.NotEqual",
						"in": "query",
						"description": "Filter on USR-CDE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UserCode.Less",
						"in": "query",
						"description": "Filter on USR-CDE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UserCode.LessOrEqual",
						"in": "query",
						"description": "Filter on USR-CDE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UserCode.Greater",
						"in": "query",
						"description": "Filter on USR-CDE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UserCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on USR-CDE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UserCode.IsNull",
						"in": "query",
						"description": "Filter on USR-CDE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UserCode.IsNotNull",
						"in": "query",
						"description": "Filter on USR-CDE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UserCode.Like",
						"in": "query",
						"description": "Filter on USR-CDE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UserCode.NotLike",
						"in": "query",
						"description": "Filter on USR-CDE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UserCode.Contains",
						"in": "query",
						"description": "Filter on USR-CDE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UserCode.NotContains",
						"in": "query",
						"description": "Filter on USR-CDE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UserCode.StartsWith",
						"in": "query",
						"description": "Filter on USR-CDE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UserCode.NotStartsWith",
						"in": "query",
						"description": "Filter on USR-CDE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UserCode.EndsWith",
						"in": "query",
						"description": "Filter on USR-CDE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UserCode.NotEndsWith",
						"in": "query",
						"description": "Filter on USR-CDE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UserCode.In",
						"in": "query",
						"description": "Filter on USR-CDE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "UserCode.Between",
						"in": "query",
						"description": "Filter on USR-CDE using 'Between' operator",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[AdvantageUser]"
						}
					}
				}
			}
		},
		"/credit-card-payment-methods/{paymentMethodCode}": {
			"get": {
				"tags": [
					"Lookup"
				],
				"summary": "Gets a payment method REST model based on the given credit card payment method code",
				"operationId": "Lookup_GetCreditCardPaymentMethod",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "paymentMethodCode",
						"in": "path",
						"description": "Payment Method Code",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CreditCardPaymentMethod"
						}
					}
				}
			}
		},
		"/notes/{customerNumber}": {
			"get": {
				"tags": [
					"Note"
				],
				"summary": "Gets note information given",
				"operationId": "Note_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The customer number",
						"required": true,
						"type": "string"
					},
					{
						"name": "includeLetters",
						"in": "query",
						"description": "If true, get note letters. Set to false to omit.",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Note"
							}
						}
					}
				}
			}
		},
		"/notes": {
			"post": {
				"tags": [
					"Note"
				],
				"summary": "Creates a note in Advantage from a NoteCreateRequest",
				"operationId": "Note_Create",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "noteCreateRequest",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NoteCreateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/orders/{orderNumber}": {
			"get": {
				"tags": [
					"Order"
				],
				"summary": "Get an order's information given the order number and \r\na few options specified about how you'd like that order information.",
				"operationId": "Order_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "An Advantage order number.",
						"required": true,
						"type": "string"
					},
					{
						"name": "settings.displayAmount",
						"in": "query",
						"description": "What type of amount to display for the order.",
						"required": false,
						"type": "string",
						"enum": [
							"ShowNetAmount",
							"ShowOrderedAmount",
							"ShowShippedAmount"
						]
					},
					{
						"name": "settings.includeDetails",
						"in": "query",
						"description": "Include order lines in the response?  The default is true.",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "settings.includePackageComponents",
						"in": "query",
						"description": "Include order lines for package components in the response? The default is true.\r\nNote that this setting applies only if IncludeDetails is true.",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "settings.includeInserts",
						"in": "query",
						"description": "Include order lines for order inserts in the response?  The default is true.",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Order"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Order"
				],
				"summary": "Update an existing order.",
				"operationId": "Order_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "The Advantage order number of the order to update.",
						"required": true,
						"type": "string"
					},
					{
						"name": "orderUpdateRequest",
						"in": "body",
						"description": "An OrderUpdateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/OrderUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Order"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Order"
				],
				"summary": "Deletes a committed order.",
				"operationId": "Order_DeleteCommittedOrder",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "Order number of committed order to delete",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/customers/{customerNumber}/orders/pending": {
			"delete": {
				"tags": [
					"Order"
				],
				"summary": "Delete all uncommitted orders for a given bill-to customer and order source.",
				"operationId": "Order_DeletePendingByCustomer",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "An Advantage customer number. Only orders with this customer number as the bill-to will be purged.",
						"required": true,
						"type": "string"
					},
					{
						"name": "orderSourceCode",
						"in": "query",
						"description": "If non-blank, purges only orders with a matching order source.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/orders/{orderNumber}/commit": {
			"post": {
				"tags": [
					"Order"
				],
				"summary": "Commit an order and payment. Committing the order commits the inventory and\r\nreleases the order for fulfillment.  Any access agreements on the order will\r\nbe released if the control group auto-release setting is set to release\r\nat order completion.",
				"operationId": "Order_Commit",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "The Advantage order number of the order to commit.",
						"required": true,
						"type": "string"
					},
					{
						"name": "paymentRequest",
						"in": "body",
						"description": "A PaymentRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PaymentRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/orders/{orderNumber}/payments": {
			"post": {
				"tags": [
					"Order"
				],
				"summary": "Add payments to an order.  Credit cards payments may be authorized immediately depending on your\r\nsystem settings.",
				"operationId": "Order_AddPayments",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "The order number",
						"required": true,
						"type": "string"
					},
					{
						"name": "paymentRequest",
						"in": "body",
						"description": "The payments to apply to the order.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PaymentRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/orders/{orderNumber}/shipping-choices": {
			"get": {
				"tags": [
					"Order"
				],
				"summary": "Get a list of valid shipping options for a given order.",
				"operationId": "Order_GetShippingChoices",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "The Advantage order number of the order to use to pull the shipping options.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/ShippingChoice"
							}
						}
					}
				}
			}
		},
		"/orders/{orderNumber}/valid-payment-methods/credit-cards": {
			"get": {
				"tags": [
					"Order"
				],
				"summary": "Get a list of valid card types for a given order.",
				"operationId": "Order_GetValidCardTypes",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "The Advantage order number of the order to use to pull the valid card types.",
						"required": true,
						"type": "string"
					},
					{
						"name": "webEnabledOnly",
						"in": "query",
						"description": "Only retrieve web enabled credit cards",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/CreditCardPaymentMethod"
							}
						}
					}
				}
			}
		},
		"/orders/{orderNumber}/valid-payment-methods/direct-debits": {
			"get": {
				"tags": [
					"Order"
				],
				"summary": "Get a list of valid direct debit payment methods for a given order.  You can also include billing organization and currency for \r\na more filtered result.",
				"operationId": "Order_GetValidDirectDebitTypes",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "The Advantage order number.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/DirectDebitPaymentMethod"
							}
						}
					}
				}
			}
		},
		"/orders/{orderNumber}/valid-payment-methods/saved-credit-cards": {
			"get": {
				"tags": [
					"Order"
				],
				"summary": "Get the valid credit cards for a given order.",
				"operationId": "Order_GetValidCardsForOrder",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "The Advantage order number of the order to use to determine the valid credit cards.",
						"required": true,
						"type": "string"
					},
					{
						"name": "webEnabledOnly",
						"in": "query",
						"description": "If true, return only web-enabled cards",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/SavedCreditCard"
							}
						}
					}
				}
			}
		},
		"/orders/{orderNumber}/valid-payment-methods/saved-gift-certificates": {
			"get": {
				"tags": [
					"Order"
				],
				"operationId": "Order_GetValidGiftCertificatesForOrder",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/GiftCertificate"
							}
						}
					}
				}
			}
		},
		"/orders/{orderNumber}/payments/{creditVoucherNumber}": {
			"delete": {
				"tags": [
					"Order"
				],
				"summary": "Removes the specified payments from the specified order.",
				"operationId": "Order_RemovePayment",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "Order number",
						"required": true,
						"type": "string"
					},
					{
						"name": "creditVoucherNumber",
						"in": "path",
						"description": "Voucher number of the credit to remove",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/orders/order-line-defaults": {
			"get": {
				"tags": [
					"Order"
				],
				"summary": "Gets default values for adding an order line",
				"operationId": "Order_GetOrderLineDefaults",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "orderLine.billTo.customerNumber",
						"in": "query",
						"description": "The customer's Advantage customer number.",
						"required": false,
						"type": "string"
					},
					{
						"name": "orderLine.billTo.addressCode",
						"in": "query",
						"description": "Address code",
						"required": false,
						"type": "string"
					},
					{
						"name": "orderLine.shipTo.customerNumber",
						"in": "query",
						"description": "The customer's Advantage customer number.",
						"required": false,
						"type": "string"
					},
					{
						"name": "orderLine.shipTo.addressCode",
						"in": "query",
						"description": "Address code",
						"required": false,
						"type": "string"
					},
					{
						"name": "orderLine.itemNumber",
						"in": "query",
						"description": "The item number, identifying which access agreement is being ordered (Publication Code for Subscription \r\nItems).",
						"required": false,
						"type": "string"
					},
					{
						"name": "orderLine.currencyCode",
						"in": "query",
						"description": "The order currency",
						"required": false,
						"type": "string"
					},
					{
						"name": "orderLine.promotionCode",
						"in": "query",
						"description": "The promotion code (sometimes referred to as key code).",
						"required": false,
						"type": "string"
					},
					{
						"name": "orderLine.promotionChoiceCode",
						"in": "query",
						"description": "The promotion choice, indicating a set of default settings for an order line.",
						"required": false,
						"type": "string"
					},
					{
						"name": "orderLine.getDefaultSubscriptionEmail",
						"in": "query",
						"description": "If true, response will include default subscription email, if one exists",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "orderLine.getDefaultAgreementEmail",
						"in": "query",
						"description": "If true, response will include default agreement email, if one exists",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/OrderLineDefaults"
						}
					}
				}
			}
		},
		"/orders/default-currency": {
			"get": {
				"tags": [
					"Order"
				],
				"summary": "Gets default currency for adding an order line",
				"operationId": "Order_GetDefaultCurrency",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "request.billToCustomerNumber",
						"in": "query",
						"description": "The bill-to customer for the order.",
						"required": false,
						"type": "string"
					},
					{
						"name": "request.promotionCode",
						"in": "query",
						"description": "The promotion code (sometimes referred to as key code).",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/DefaultCurrencyResponse"
						}
					}
				}
			}
		},
		"/orders": {
			"post": {
				"tags": [
					"Order"
				],
				"summary": "Create a new order. This method takes the incoming order create request object and uses it to create a new \r\nAdvantage order. The new Advantage order has a new order line created for each OrderLineIn object \r\ncontained in the order create request object.",
				"operationId": "Order_Create",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "orderCreateRequest",
						"in": "body",
						"description": "An OrderCreateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/OrderCreateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Order"
						}
					}
				}
			}
		},
		"/orders/{applyToOrderNumber}/returns": {
			"post": {
				"tags": [
					"Order"
				],
				"operationId": "Order_CreateAppliedReturnOrder",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "applyToOrderNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "request",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AppliedReturnOrderCreateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Order"
						}
					}
				}
			}
		},
		"/orders/payment-defaults": {
			"get": {
				"tags": [
					"Order"
				],
				"summary": "Gets default values for entering a payment for this given order.\r\nAssumes the order has already been submitted (though not necessarily committed).",
				"operationId": "Order_GetPaymentDefaults",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "orderNumbers",
						"in": "query",
						"description": "Order number that is being paid",
						"required": true,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PaymentDefaults"
						}
					}
				}
			}
		},
		"/orders/{orderNumber}/coupons": {
			"put": {
				"tags": [
					"Order"
				],
				"summary": "Replace coupons for an order.",
				"operationId": "Order_PutCoupons",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "The order number",
						"required": true,
						"type": "string"
					},
					{
						"name": "couponRequest",
						"in": "body",
						"description": "The coupons to add to the order",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CouponRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			},
			"post": {
				"tags": [
					"Order"
				],
				"summary": "Add coupons to an order.",
				"operationId": "Order_AddCoupons",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "The order number",
						"required": true,
						"type": "string"
					},
					{
						"name": "couponRequest",
						"in": "body",
						"description": "The coupons to add to the order",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CouponRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/orders/{orderNumber}/lines/{lineNumber}": {
			"delete": {
				"tags": [
					"Order"
				],
				"summary": "Deletes a committed order line.",
				"operationId": "Order_DeleteCommittedOrderLine",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "Order number of committed order line to delete",
						"required": true,
						"type": "string"
					},
					{
						"name": "lineNumber",
						"in": "path",
						"description": "Order line number of committed order line to delete",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/orders/{orderNumber}/post": {
			"post": {
				"tags": [
					"Order"
				],
				"summary": "Post an activated web order.",
				"operationId": "Order_Post",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "The Advantage order number of the order to post.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/orders/{orderNumber}/pending-premiums": {
			"get": {
				"tags": [
					"Order"
				],
				"summary": "Gets a list of pending premium items on this order.",
				"operationId": "Order_GetPendingPremiums",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "Order number",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[PendingPremium]"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Order"
				],
				"summary": "Sets the item number on a premium set item. This method is not applicable for premium items.",
				"operationId": "Order_SetPendingPremiumItemNumber",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "Order number",
						"required": true,
						"type": "string"
					},
					{
						"name": "pendingPremiumUpdateRequests",
						"in": "body",
						"description": "The information needed to find a premium set item and update the item number.",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/PendingPremiumUpdateRequest"
							}
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/orders/{orderNumber}/tracking": {
			"post": {
				"tags": [
					"Order"
				],
				"summary": "Create a shipment tracking record for an order",
				"operationId": "Order_CreateOrderTracking",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "An Advantage Order Number to create an order tracking record",
						"required": true,
						"type": "string"
					},
					{
						"name": "orderTrackingCreateRequest",
						"in": "body",
						"description": "Information needed to create order tracking record",
						"required": true,
						"schema": {
							"$ref": "#/definitions/OrderTrackingCreateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/order-summaries": {
			"get": {
				"tags": [
					"OrderSummary"
				],
				"summary": "Gets order summaries matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.\r\nFor example, /order-summaries?FirstName.CN=Matt or /order-summaries?FirstName.EQ=John&amp;LastName.EQ=Doe",
				"operationId": "OrderSummary_Search",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "searchText",
						"in": "query",
						"description": "Filter criteria",
						"required": false,
						"type": "string"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "OrderNumber",
						"in": "query",
						"description": "Filter on ORD-NUM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode",
						"in": "query",
						"description": "Filter on SHP-ADR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent",
						"in": "query",
						"description": "Filter on DISC-PCT using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber",
						"in": "query",
						"description": "Filter on PO-NUM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode",
						"in": "query",
						"description": "Filter on OPR-CDE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup",
						"in": "query",
						"description": "Filter on CTG-ID using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.NotEqual",
						"in": "query",
						"description": "Filter on ORD-NUM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.Less",
						"in": "query",
						"description": "Filter on ORD-NUM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on ORD-NUM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.Greater",
						"in": "query",
						"description": "Filter on ORD-NUM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ORD-NUM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.IsNull",
						"in": "query",
						"description": "Filter on ORD-NUM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.IsNotNull",
						"in": "query",
						"description": "Filter on ORD-NUM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.Like",
						"in": "query",
						"description": "Filter on ORD-NUM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.NotLike",
						"in": "query",
						"description": "Filter on ORD-NUM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.Contains",
						"in": "query",
						"description": "Filter on ORD-NUM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.NotContains",
						"in": "query",
						"description": "Filter on ORD-NUM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.StartsWith",
						"in": "query",
						"description": "Filter on ORD-NUM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on ORD-NUM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.EndsWith",
						"in": "query",
						"description": "Filter on ORD-NUM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on ORD-NUM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.In",
						"in": "query",
						"description": "Filter on ORD-NUM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderNumber.Between",
						"in": "query",
						"description": "Filter on ORD-NUM using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Less",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Greater",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.IsNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Like",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotLike",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Contains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotContains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.StartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.EndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.In",
						"in": "query",
						"description": "Filter on CTM-NBR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Between",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber.NotEqual",
						"in": "query",
						"description": "Filter on SHP-CTM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber.Less",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on SHP-CTM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber.Greater",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on SHP-CTM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber.IsNull",
						"in": "query",
						"description": "Filter on SHP-CTM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber.IsNotNull",
						"in": "query",
						"description": "Filter on SHP-CTM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber.Like",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber.NotLike",
						"in": "query",
						"description": "Filter on SHP-CTM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber.Contains",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber.NotContains",
						"in": "query",
						"description": "Filter on SHP-CTM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber.StartsWith",
						"in": "query",
						"description": "Filter on SHP-CTM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on SHP-CTM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber.EndsWith",
						"in": "query",
						"description": "Filter on SHP-CTM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on SHP-CTM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber.In",
						"in": "query",
						"description": "Filter on SHP-CTM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToCustomerNumber.Between",
						"in": "query",
						"description": "Filter on SHP-CTM using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode.NotEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode.Less",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode.LessOrEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode.Greater",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode.IsNull",
						"in": "query",
						"description": "Filter on BIL-CUR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode.IsNotNull",
						"in": "query",
						"description": "Filter on BIL-CUR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode.Like",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode.NotLike",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode.Contains",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode.NotContains",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode.StartsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode.NotStartsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode.EndsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode.NotEndsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode.In",
						"in": "query",
						"description": "Filter on BIL-CUR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrencyCode.Between",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode.NotEqual",
						"in": "query",
						"description": "Filter on ADR-CDE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode.Less",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode.LessOrEqual",
						"in": "query",
						"description": "Filter on ADR-CDE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode.Greater",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ADR-CDE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode.IsNull",
						"in": "query",
						"description": "Filter on ADR-CDE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode.IsNotNull",
						"in": "query",
						"description": "Filter on ADR-CDE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode.Like",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode.NotLike",
						"in": "query",
						"description": "Filter on ADR-CDE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode.Contains",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode.NotContains",
						"in": "query",
						"description": "Filter on ADR-CDE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode.StartsWith",
						"in": "query",
						"description": "Filter on ADR-CDE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode.NotStartsWith",
						"in": "query",
						"description": "Filter on ADR-CDE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode.EndsWith",
						"in": "query",
						"description": "Filter on ADR-CDE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode.NotEndsWith",
						"in": "query",
						"description": "Filter on ADR-CDE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode.In",
						"in": "query",
						"description": "Filter on ADR-CDE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToAddressCode.Between",
						"in": "query",
						"description": "Filter on ADR-CDE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode.NotEqual",
						"in": "query",
						"description": "Filter on SHP-ADR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode.Less",
						"in": "query",
						"description": "Filter on SHP-ADR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode.LessOrEqual",
						"in": "query",
						"description": "Filter on SHP-ADR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode.Greater",
						"in": "query",
						"description": "Filter on SHP-ADR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on SHP-ADR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode.IsNull",
						"in": "query",
						"description": "Filter on SHP-ADR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode.IsNotNull",
						"in": "query",
						"description": "Filter on SHP-ADR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode.Like",
						"in": "query",
						"description": "Filter on SHP-ADR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode.NotLike",
						"in": "query",
						"description": "Filter on SHP-ADR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode.Contains",
						"in": "query",
						"description": "Filter on SHP-ADR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode.NotContains",
						"in": "query",
						"description": "Filter on SHP-ADR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode.StartsWith",
						"in": "query",
						"description": "Filter on SHP-ADR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode.NotStartsWith",
						"in": "query",
						"description": "Filter on SHP-ADR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode.EndsWith",
						"in": "query",
						"description": "Filter on SHP-ADR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode.NotEndsWith",
						"in": "query",
						"description": "Filter on SHP-ADR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode.In",
						"in": "query",
						"description": "Filter on SHP-ADR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DefaultShipToAddressCode.Between",
						"in": "query",
						"description": "Filter on SHP-ADR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.NotEqual",
						"in": "query",
						"description": "Filter on PMO-CDE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.Less",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-CDE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.Greater",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-CDE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.IsNull",
						"in": "query",
						"description": "Filter on PMO-CDE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-CDE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.Like",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.NotLike",
						"in": "query",
						"description": "Filter on PMO-CDE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.Contains",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.NotContains",
						"in": "query",
						"description": "Filter on PMO-CDE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.StartsWith",
						"in": "query",
						"description": "Filter on PMO-CDE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-CDE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.EndsWith",
						"in": "query",
						"description": "Filter on PMO-CDE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-CDE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.In",
						"in": "query",
						"description": "Filter on PMO-CDE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.Between",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping.NotEqual",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping.Less",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping.LessOrEqual",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping.Greater",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping.GreaterOrEqual",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping.IsNull",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping.IsNotNull",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping.Like",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping.NotLike",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping.Contains",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping.NotContains",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping.StartsWith",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping.NotStartsWith",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping.EndsWith",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping.NotEndsWith",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping.In",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "IsFreeShipping.Between",
						"in": "query",
						"description": "Filter on SHP-EXCL using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent.NotEqual",
						"in": "query",
						"description": "Filter on DISC-PCT using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent.Less",
						"in": "query",
						"description": "Filter on DISC-PCT using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent.LessOrEqual",
						"in": "query",
						"description": "Filter on DISC-PCT using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent.Greater",
						"in": "query",
						"description": "Filter on DISC-PCT using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent.GreaterOrEqual",
						"in": "query",
						"description": "Filter on DISC-PCT using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent.IsNull",
						"in": "query",
						"description": "Filter on DISC-PCT using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent.IsNotNull",
						"in": "query",
						"description": "Filter on DISC-PCT using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent.Like",
						"in": "query",
						"description": "Filter on DISC-PCT using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent.NotLike",
						"in": "query",
						"description": "Filter on DISC-PCT using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent.Contains",
						"in": "query",
						"description": "Filter on DISC-PCT using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent.NotContains",
						"in": "query",
						"description": "Filter on DISC-PCT using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent.StartsWith",
						"in": "query",
						"description": "Filter on DISC-PCT using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent.NotStartsWith",
						"in": "query",
						"description": "Filter on DISC-PCT using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent.EndsWith",
						"in": "query",
						"description": "Filter on DISC-PCT using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent.NotEndsWith",
						"in": "query",
						"description": "Filter on DISC-PCT using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent.In",
						"in": "query",
						"description": "Filter on DISC-PCT using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "DiscountPercent.Between",
						"in": "query",
						"description": "Filter on DISC-PCT using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.NotEqual",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.Less",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.LessOrEqual",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.Greater",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.IsNull",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.IsNotNull",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.Like",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.NotLike",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.Contains",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.NotContains",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.StartsWith",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.NotStartsWith",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.EndsWith",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.NotEndsWith",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.In",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SalesRepCode.Between",
						"in": "query",
						"description": "Filter on SLM-NBR/SLM-NUM using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber.NotEqual",
						"in": "query",
						"description": "Filter on PO-NUM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber.Less",
						"in": "query",
						"description": "Filter on PO-NUM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on PO-NUM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber.Greater",
						"in": "query",
						"description": "Filter on PO-NUM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PO-NUM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber.IsNull",
						"in": "query",
						"description": "Filter on PO-NUM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber.IsNotNull",
						"in": "query",
						"description": "Filter on PO-NUM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber.Like",
						"in": "query",
						"description": "Filter on PO-NUM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber.NotLike",
						"in": "query",
						"description": "Filter on PO-NUM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber.Contains",
						"in": "query",
						"description": "Filter on PO-NUM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber.NotContains",
						"in": "query",
						"description": "Filter on PO-NUM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber.StartsWith",
						"in": "query",
						"description": "Filter on PO-NUM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on PO-NUM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber.EndsWith",
						"in": "query",
						"description": "Filter on PO-NUM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on PO-NUM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber.In",
						"in": "query",
						"description": "Filter on PO-NUM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PurchaseOrderNumber.Between",
						"in": "query",
						"description": "Filter on PO-NUM using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.NotEqual",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.Less",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.LessOrEqual",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.Greater",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.IsNull",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.IsNotNull",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.Like",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.NotLike",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.Contains",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.NotContains",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.StartsWith",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.NotStartsWith",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.EndsWith",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.NotEndsWith",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.In",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderDate.Between",
						"in": "query",
						"description": "Filter on ORDR-DTE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Less",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.LessOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Greater",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.IsNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.IsNotNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Like",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotLike",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Contains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotContains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.StartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotStartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.EndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.NotEndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.In",
						"in": "query",
						"description": "Filter on BIL-ORG using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingOrganizationCode.Between",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType.NotEqual",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType.Less",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType.LessOrEqual",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType.Greater",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType.IsNull",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType.IsNotNull",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType.Like",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType.NotLike",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType.Contains",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType.NotContains",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType.StartsWith",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType.NotStartsWith",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType.EndsWith",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType.NotEndsWith",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType.In",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OrderType.Between",
						"in": "query",
						"description": "Filter on ORD-TYPE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode.NotEqual",
						"in": "query",
						"description": "Filter on OPR-CDE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode.Less",
						"in": "query",
						"description": "Filter on OPR-CDE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode.LessOrEqual",
						"in": "query",
						"description": "Filter on OPR-CDE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode.Greater",
						"in": "query",
						"description": "Filter on OPR-CDE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on OPR-CDE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode.IsNull",
						"in": "query",
						"description": "Filter on OPR-CDE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode.IsNotNull",
						"in": "query",
						"description": "Filter on OPR-CDE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode.Like",
						"in": "query",
						"description": "Filter on OPR-CDE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode.NotLike",
						"in": "query",
						"description": "Filter on OPR-CDE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode.Contains",
						"in": "query",
						"description": "Filter on OPR-CDE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode.NotContains",
						"in": "query",
						"description": "Filter on OPR-CDE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode.StartsWith",
						"in": "query",
						"description": "Filter on OPR-CDE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode.NotStartsWith",
						"in": "query",
						"description": "Filter on OPR-CDE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode.EndsWith",
						"in": "query",
						"description": "Filter on OPR-CDE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode.NotEndsWith",
						"in": "query",
						"description": "Filter on OPR-CDE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode.In",
						"in": "query",
						"description": "Filter on OPR-CDE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OperationCode.Between",
						"in": "query",
						"description": "Filter on OPR-CDE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup.NotEqual",
						"in": "query",
						"description": "Filter on CTG-ID using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup.Less",
						"in": "query",
						"description": "Filter on CTG-ID using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup.LessOrEqual",
						"in": "query",
						"description": "Filter on CTG-ID using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup.Greater",
						"in": "query",
						"description": "Filter on CTG-ID using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTG-ID using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup.IsNull",
						"in": "query",
						"description": "Filter on CTG-ID using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup.IsNotNull",
						"in": "query",
						"description": "Filter on CTG-ID using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup.Like",
						"in": "query",
						"description": "Filter on CTG-ID using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup.NotLike",
						"in": "query",
						"description": "Filter on CTG-ID using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup.Contains",
						"in": "query",
						"description": "Filter on CTG-ID using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup.NotContains",
						"in": "query",
						"description": "Filter on CTG-ID using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup.StartsWith",
						"in": "query",
						"description": "Filter on CTG-ID using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup.NotStartsWith",
						"in": "query",
						"description": "Filter on CTG-ID using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup.EndsWith",
						"in": "query",
						"description": "Filter on CTG-ID using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup.NotEndsWith",
						"in": "query",
						"description": "Filter on CTG-ID using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup.In",
						"in": "query",
						"description": "Filter on CTG-ID using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ControlGroup.Between",
						"in": "query",
						"description": "Filter on CTG-ID using 'Between' operator",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResultWithCount[OrderSummary]"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/orders": {
			"get": {
				"tags": [
					"OrderSummary"
				],
				"summary": "Get all past orders for a given customer, that match the searchAgument. The result of those orders can \r\nbe limited to N at a time. The list starts with the newest orders.",
				"operationId": "OrderSummary_SearchOrders",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number of the bill-to customer on the orders.",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.search",
						"in": "query",
						"description": "The generic search argument. (Typically from a search text box). This term will be compared to several \r\nfields on the order.",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.beginDate",
						"in": "query",
						"description": "The beginning date. Only orders placed after this date will be returned.",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "filter.endDate",
						"in": "query",
						"description": "The end date. Only orders placed before this date will be returned.",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "filter.excludeBackorderFufillment",
						"in": "query",
						"description": "Exclude backorder-fulfillment orders",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "filter.excludePremiumFill",
						"in": "query",
						"description": "Exclude premium-fill orders",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "filter.membershipOrganization",
						"in": "query",
						"description": "Membership organization to filter by",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.owningOrganizations",
						"in": "query",
						"description": "Owning organizations to filter by",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi"
					},
					{
						"name": "filter.isPosted",
						"in": "query",
						"description": "Order's posting status. Filter orders based on whether or not\r\nthe order is posted.",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "filter.hasProductOrderLine",
						"in": "query",
						"description": "Filter orders based on whether or not the order has \r\na product order line.",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "filter.isInStatusThatAllowsModifications",
						"in": "query",
						"description": "Filter orders based on whether or not the order\r\nis in a status that allows further modification",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResultWithCount[OrderSummary]"
						}
					}
				}
			}
		},
		"/orders/{orderNumber}/installment-billing-schedule": {
			"get": {
				"tags": [
					"Payment"
				],
				"summary": "Get installment billing information for the current order",
				"operationId": "Payment_GetInstallmentBillingPlan",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "Order Number",
						"required": true,
						"type": "string"
					},
					{
						"name": "installmentBillingCode",
						"in": "query",
						"description": "Installment Billing Code",
						"required": true,
						"type": "string"
					},
					{
						"name": "assumeMinimumDownPayment",
						"in": "query",
						"description": "Assume minimum down payment will be made if a down payment is required",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/InstallmentBillingResponse"
						}
					}
				}
			}
		},
		"/orders/{orderNumber}/installment-schedule": {
			"post": {
				"tags": [
					"Payment"
				],
				"summary": "Updates the current list of installments",
				"operationId": "Payment_UpdateInstallments",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "Order number to update the installment schedule",
						"required": true,
						"type": "string"
					},
					{
						"name": "installmentBillingCreateRequest",
						"in": "body",
						"description": "A InstallmentBillingCreateRequest object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/InstallmentBillingCreateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/{customerNumber}/payments/invoices": {
			"post": {
				"tags": [
					"Payment"
				],
				"summary": "Applies a payment to the specified unpaid debits",
				"operationId": "Payment_PaySelectedDebits",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "Customer Number",
						"required": true,
						"type": "string"
					},
					{
						"name": "request",
						"in": "body",
						"description": "A DebitPaymentRequest object for applying a payment to debits",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DebitPaymentRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/DebitPaymentResponse"
						}
					}
				}
			}
		},
		"/premium-sets": {
			"get": {
				"tags": [
					"PremiumSet"
				],
				"summary": "Get the available premium sets.",
				"operationId": "PremiumSet_GetPremiumSets",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[PremiumSet]"
						}
					}
				}
			},
			"post": {
				"tags": [
					"PremiumSet"
				],
				"summary": "Creates a new premium set definition in Advantage",
				"operationId": "PremiumSet_Create",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "createRequest",
						"in": "body",
						"description": "A PremiumSetCreateRequest object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PremiumSetCreateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/premium-sets/{premiumSetCode}": {
			"get": {
				"tags": [
					"PremiumSet"
				],
				"summary": "Finds and return information for a given premium set.",
				"operationId": "PremiumSet_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "premiumSetCode",
						"in": "path",
						"description": "Premium Set Code",
						"required": true,
						"type": "string"
					},
					{
						"name": "includeDetails",
						"in": "query",
						"description": "Include premium set details in the response?",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PremiumSet"
						}
					}
				}
			}
		},
		"/premium-sets/{premiumSetCode}/details": {
			"get": {
				"tags": [
					"PremiumSet"
				],
				"summary": "Retrieves the list of all premium set details in a given premium set.",
				"operationId": "PremiumSet_GetDetails",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "premiumSetCode",
						"in": "path",
						"description": "Premium Set Code",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/PremiumSetDetail"
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"PremiumSet"
				],
				"summary": "Creates a new premium set detail in Advantage",
				"operationId": "PremiumSet_CreateDetail",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "premiumSetCode",
						"in": "path",
						"description": "Premium Set Code",
						"required": true,
						"type": "string"
					},
					{
						"name": "createRequest",
						"in": "body",
						"description": "A PremiumSetDetailCreateRequest object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PremiumSetDetailCreateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/premium-sets/{premiumSetCode}/details/{earnedAtCode}/{responseSequence}": {
			"get": {
				"tags": [
					"PremiumSet"
				],
				"summary": "Find and return information for a given premium set detail.",
				"operationId": "PremiumSet_GetDetail",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "premiumSetCode",
						"in": "path",
						"description": "Premium Set Code",
						"required": true,
						"type": "string"
					},
					{
						"name": "earnedAtCode",
						"in": "path",
						"description": "Earned At Code",
						"required": true,
						"type": "string"
					},
					{
						"name": "responseSequence",
						"in": "path",
						"description": "Response Sequence Number",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PremiumSetDetail"
						}
					}
				}
			},
			"post": {
				"tags": [
					"PremiumSet"
				],
				"summary": "Update an existing premium set detail in Advantage.\r\nAll properties of the update request are optional.\r\nIf a property is not set in the request object then it will not be updated.",
				"operationId": "PremiumSet_UpdateDetail",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "premiumSetCode",
						"in": "path",
						"description": "Premium Set Code",
						"required": true,
						"type": "string"
					},
					{
						"name": "earnedAtCode",
						"in": "path",
						"description": "Earned At Code",
						"required": true,
						"type": "string"
					},
					{
						"name": "responseSequence",
						"in": "path",
						"description": "Response Sequence Number",
						"required": true,
						"type": "string"
					},
					{
						"name": "updateRequest",
						"in": "body",
						"description": "A PremiumSetDetailUpdateRequest object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PremiumSetDetailUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/products/{itemNumber}": {
			"get": {
				"tags": [
					"Product"
				],
				"summary": "Get information for a given product.",
				"operationId": "Product_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"description": "The item number of the desired product.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Product"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Product"
				],
				"summary": "Update an existing product. This will update the name and narratives for products of any product type.\r\nThis will handle more complex changes for access, back issue, product, and subscription,\r\nbased on the populated values in the appropriate product request detail properties.",
				"operationId": "Product_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"description": "The item number of the product to update",
						"required": true,
						"type": "string"
					},
					{
						"name": "product",
						"in": "body",
						"description": "Information to update for the product",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ProductUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/products/{itemNumber}/onix-3.0": {
			"get": {
				"tags": [
					"Product"
				],
				"summary": "Gets ONIX data on a product.",
				"operationId": "Product_GetOnixData",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"description": "The item number of the desired product to grab ONIX data from.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "object"
						}
					}
				}
			}
		},
		"/products/{itemNumber}/related-products": {
			"get": {
				"tags": [
					"Product"
				],
				"summary": "Get the item numbers of products related to a given product.",
				"operationId": "Product_GetRelated",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"description": "The item number of the product to use when finding related products.",
						"required": true,
						"type": "string"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[ProductSummary]"
						}
					}
				}
			}
		},
		"/products/{itemNumber}/purchased-with-products": {
			"get": {
				"tags": [
					"Product"
				],
				"summary": "Get the item numbers of products purchased with given product.",
				"operationId": "Product_GetPurchasedWith",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"description": "The item number of the product to use when finding related products.",
						"required": true,
						"type": "string"
					},
					{
						"name": "daysOfHistory",
						"in": "query",
						"description": "The number of days back (in history) to search. Starts with today.",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "threshold",
						"in": "query",
						"description": "How many times must the products be purchased together to be included in the list?",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[ProductSummary]"
						}
					}
				}
			}
		},
		"/products/{itemNumber}/price": {
			"get": {
				"tags": [
					"Product"
				],
				"summary": "Calculates what the price would be on the order line as if the particular customer \r\npassed in ordered the item and used the passed in promotion",
				"operationId": "Product_GetPrice",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"description": "Item number to make an order off on.",
						"required": true,
						"type": "string"
					},
					{
						"name": "priceCode",
						"in": "query",
						"description": "Optional price code to use for price calculation.",
						"required": true,
						"type": "string"
					},
					{
						"name": "orderLineForecast.customerNumber",
						"in": "query",
						"description": "(Required) Customer Number of the customer that will be making the order. This customer\r\nwill serve as both the billing and ship to customer.",
						"required": false,
						"type": "string"
					},
					{
						"name": "orderLineForecast.promotionCode",
						"in": "query",
						"description": "(Required) Promotion Code that will be used on the order line.",
						"required": false,
						"type": "string"
					},
					{
						"name": "orderLineForecast.billingCurrencyCode",
						"in": "query",
						"description": "(Required) The currency that will be used on the order line.",
						"required": false,
						"type": "string"
					},
					{
						"name": "orderLineForecast.quantity",
						"in": "query",
						"description": "(Optional) The quantity of the item that will be ordered. Defaults to 1.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "orderLineForecast.promotionChoiceCode",
						"in": "query",
						"description": "(Optional) Promotion Choice that will be used on the order line.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ItemPrice"
						}
					}
				}
			}
		},
		"/products/by-isbn13/{isbn}": {
			"get": {
				"tags": [
					"Product"
				],
				"summary": "Gets information for a product, given an ISBN-13.\r\nThis is a preliminary API, subject to change.",
				"operationId": "Product_GetByIsbn",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "isbn",
						"in": "path",
						"description": "The ISBN-13 of the product for which to retrieve information.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Product"
						}
					}
				}
			}
		},
		"/products/by-author/{author}": {
			"get": {
				"tags": [
					"Product"
				],
				"summary": "Get information for all products by the given author.\r\nThis is a preliminary API, subject to change.",
				"operationId": "Product_GetByAuthor",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "author",
						"in": "path",
						"description": "The name of an Author.",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.matchType",
						"in": "query",
						"description": "The type of matching to use for the search.",
						"required": false,
						"type": "string",
						"enum": [
							"AllWords",
							"AnyWords",
							"EntirePhrase",
							"Prefix"
						]
					},
					{
						"name": "filter.orderBy",
						"in": "query",
						"description": "The type of ordering on the search.",
						"required": false,
						"type": "string",
						"enum": [
							"Title",
							"TitleDescending",
							"ListPrice",
							"ListPriceDescending",
							"Popularity",
							"PopularityDescending",
							"ItemNumber",
							"ItemNumberDescending",
							"DatePublished",
							"DatePublishedDescending"
						]
					},
					{
						"name": "filter.subjectTreeLevelId",
						"in": "query",
						"description": "The ID of the subject tree level to search.",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.salesAnalysisCategoryCode",
						"in": "query",
						"description": "Restrict search to products within the given sales analysis code (or blank).",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.owningOrganizationCode",
						"in": "query",
						"description": "Owning organizations to filter by.",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.productTypes",
						"in": "query",
						"description": "List of product types to include in search. If null, all product types are included.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"Product",
								"Subscription",
								"Access",
								"Conference",
								"BackIssue",
								"Package",
								"Unknown",
								"Membership",
								"Donation",
								"PrintJob",
								"Reprint",
								"Service",
								"Stock"
							]
						},
						"collectionFormat": "multi"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Product]"
						}
					}
				}
			}
		},
		"/products/by-title/{title}": {
			"get": {
				"tags": [
					"Product"
				],
				"summary": "Get information for all products with the given title.\r\nThis is a preliminary API, subject to change.",
				"operationId": "Product_GetByTitle",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "title",
						"in": "path",
						"description": "The title of the products to retrieve.",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.matchType",
						"in": "query",
						"description": "The type of matching to use for the search.",
						"required": false,
						"type": "string",
						"enum": [
							"AllWords",
							"AnyWords",
							"EntirePhrase",
							"Prefix"
						]
					},
					{
						"name": "filter.orderBy",
						"in": "query",
						"description": "The type of ordering on the search.",
						"required": false,
						"type": "string",
						"enum": [
							"Title",
							"TitleDescending",
							"ListPrice",
							"ListPriceDescending",
							"Popularity",
							"PopularityDescending",
							"ItemNumber",
							"ItemNumberDescending",
							"DatePublished",
							"DatePublishedDescending"
						]
					},
					{
						"name": "filter.subjectTreeLevelId",
						"in": "query",
						"description": "The ID of the subject tree level to search.",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.salesAnalysisCategoryCode",
						"in": "query",
						"description": "Restrict search to products within the given sales analysis code (or blank).",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.owningOrganizationCode",
						"in": "query",
						"description": "Owning organizations to filter by.",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.productTypes",
						"in": "query",
						"description": "List of product types to include in search. If null, all product types are included.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"Product",
								"Subscription",
								"Access",
								"Conference",
								"BackIssue",
								"Package",
								"Unknown",
								"Membership",
								"Donation",
								"PrintJob",
								"Reprint",
								"Service",
								"Stock"
							]
						},
						"collectionFormat": "multi"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Product]"
						}
					}
				}
			}
		},
		"/products/by-keyword/{keyword}": {
			"get": {
				"tags": [
					"Product"
				],
				"summary": "Get information for all products with the given keyword.\r\nThis is a preliminary API, subject to change.",
				"operationId": "Product_GetByKeyword",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "keyword",
						"in": "path",
						"description": "The keyword to use when searching for products.",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.matchType",
						"in": "query",
						"description": "The type of matching to use for the search.",
						"required": false,
						"type": "string",
						"enum": [
							"AllWords",
							"AnyWords",
							"EntirePhrase",
							"Prefix"
						]
					},
					{
						"name": "filter.orderBy",
						"in": "query",
						"description": "The type of ordering on the search.",
						"required": false,
						"type": "string",
						"enum": [
							"Title",
							"TitleDescending",
							"ListPrice",
							"ListPriceDescending",
							"Popularity",
							"PopularityDescending",
							"ItemNumber",
							"ItemNumberDescending",
							"DatePublished",
							"DatePublishedDescending"
						]
					},
					{
						"name": "filter.subjectTreeLevelId",
						"in": "query",
						"description": "The ID of the subject tree level to search.",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.salesAnalysisCategoryCode",
						"in": "query",
						"description": "Restrict search to products within the given sales analysis code (or blank).",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.owningOrganizationCode",
						"in": "query",
						"description": "Owning organizations to filter by.",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.productTypes",
						"in": "query",
						"description": "List of product types to include in search. If null, all product types are included.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"Product",
								"Subscription",
								"Access",
								"Conference",
								"BackIssue",
								"Package",
								"Unknown",
								"Membership",
								"Donation",
								"PrintJob",
								"Reprint",
								"Service",
								"Stock"
							]
						},
						"collectionFormat": "multi"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Product]"
						}
					}
				}
			}
		},
		"/products/by-search/{search}": {
			"get": {
				"tags": [
					"Product"
				],
				"summary": "Get information for all products with the given search term.\r\nThis is a preliminary API, subject to change.",
				"operationId": "Product_GetBySearch",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "search",
						"in": "path",
						"description": "The search term to use when searching for products.",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.matchType",
						"in": "query",
						"description": "The type of matching to use for the search.",
						"required": false,
						"type": "string",
						"enum": [
							"AllWords",
							"AnyWords",
							"EntirePhrase",
							"Prefix"
						]
					},
					{
						"name": "filter.orderBy",
						"in": "query",
						"description": "The type of ordering on the search.",
						"required": false,
						"type": "string",
						"enum": [
							"Title",
							"TitleDescending",
							"ListPrice",
							"ListPriceDescending",
							"Popularity",
							"PopularityDescending",
							"ItemNumber",
							"ItemNumberDescending",
							"DatePublished",
							"DatePublishedDescending"
						]
					},
					{
						"name": "filter.subjectTreeLevelId",
						"in": "query",
						"description": "The ID of the subject tree level to search.",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.salesAnalysisCategoryCode",
						"in": "query",
						"description": "Restrict search to products within the given sales analysis code (or blank).",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.owningOrganizationCode",
						"in": "query",
						"description": "Owning organizations to filter by.",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.productTypes",
						"in": "query",
						"description": "List of product types to include in search. If null, all product types are included.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"Product",
								"Subscription",
								"Access",
								"Conference",
								"BackIssue",
								"Package",
								"Unknown",
								"Membership",
								"Donation",
								"PrintJob",
								"Reprint",
								"Service",
								"Stock"
							]
						},
						"collectionFormat": "multi"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Product]"
						}
					}
				}
			}
		},
		"/product-catalogs/{subjectTreeLevelId}/products": {
			"get": {
				"tags": [
					"Product"
				],
				"summary": "Get information for all products for the given subject tree.",
				"operationId": "Product_GetBySubjectTree",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "subjectTreeLevelId",
						"in": "path",
						"description": "The level ID of the subject tree for which to retrieve products.",
						"required": true,
						"type": "string"
					},
					{
						"name": "orderBy",
						"in": "query",
						"description": "Options for how to order the search results.",
						"required": false,
						"type": "string",
						"enum": [
							"Title",
							"TitleDescending",
							"ListPrice",
							"ListPriceDescending",
							"Popularity",
							"PopularityDescending",
							"ItemNumber",
							"ItemNumberDescending",
							"DatePublished",
							"DatePublishedDescending"
						]
					},
					{
						"name": "highlighted",
						"in": "query",
						"description": "Options for how to filter the search results.",
						"required": false,
						"type": "string",
						"enum": [
							"All",
							"Highlighted",
							"NotHighlighted"
						]
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Product]"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/product-contributions": {
			"get": {
				"tags": [
					"Product"
				],
				"summary": "Get information for all products a customer is a contributor on.",
				"operationId": "Product_GetProductContributions",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "The Advantage customer number to find products they contributed to",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[ProductContribution]"
						}
					}
				}
			}
		},
		"/products/{itemNumber}/{customerType}/supports-gift-messages": {
			"get": {
				"tags": [
					"Product"
				],
				"summary": "Checks to see if gift messages are supported for the given item and customer type.",
				"operationId": "Product_GetGiftMessagesSupport",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"description": "Item Number",
						"required": true,
						"type": "string"
					},
					{
						"name": "customerType",
						"in": "path",
						"description": "Customer Type Code",
						"required": true,
						"type": "string"
					},
					{
						"name": "differentCustomers",
						"in": "query",
						"description": "True if the bill-to and ship-to customers are different.",
						"required": true,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/GiftMessageSupportResponse"
						}
					}
				}
			}
		},
		"/products/{itemNumber}/inventory-status": {
			"get": {
				"tags": [
					"ProductInventory"
				],
				"summary": "Get the inventory status for a given product.",
				"operationId": "ProductInventory_GetInventory",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"description": "The item number of the product of interest.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ProductInventory"
						}
					}
				}
			}
		},
		"/products/{itemNumber}/warehouses/{warehouseNumber}/inventory-receipts": {
			"post": {
				"tags": [
					"ProductInventory"
				],
				"operationId": "ProductInventory_CreateItemInventoryReceipt",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "warehouseNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "request",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ReceiptItemInventoryReceiptCreateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ItemInventoryReceiptResponse"
						}
					}
				}
			}
		},
		"/products/{itemNumber}/warehouses/{warehouseNumber}/purchase-orders/{purchaseOrderNumber}/inventory-receipts": {
			"post": {
				"tags": [
					"ProductInventory"
				],
				"operationId": "ProductInventory_CreateItemInventoryReceipt",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "warehouseNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "purchaseOrderNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "request",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PurchaseOrderItemInventoryReceiptCreateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ItemInventoryReceiptResponse"
						}
					}
				}
			}
		},
		"/products/{itemNumber}/warehouses/{warehouseNumber}/inventory-receipts/{receivingNumber}": {
			"get": {
				"tags": [
					"ProductInventory"
				],
				"operationId": "ProductInventory_GetItemInventoryReceipt",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "warehouseNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "receivingNumber",
						"in": "path",
						"required": true,
						"type": "number",
						"format": "double"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ItemInventoryReceipt"
						}
					}
				}
			}
		},
		"/products/{itemNumber}/warehouses/{warehouseNumber}/inventory-adjustments": {
			"post": {
				"tags": [
					"ProductInventory"
				],
				"operationId": "ProductInventory_CreateInventoryAdjustment",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "warehouseNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "request",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/InventoryAdjustmentRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/InventoryAdjustmentResponse"
						}
					}
				}
			}
		},
		"/products/{itemNumber}/warehouses/{warehouseNumber}/bins/{bin}/inventory-adjustments/{transactionNumber}": {
			"get": {
				"tags": [
					"ProductInventory"
				],
				"operationId": "ProductInventory_GetInventoryAdjustment",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "warehouseNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "bin",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "transactionNumber",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/InventoryAdjustment"
						}
					}
				}
			}
		},
		"/product-reviews/{itemNumber}/{customerNumber}/create": {
			"post": {
				"tags": [
					"ProductReview"
				],
				"operationId": "ProductReview_Create",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "customerNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "reviewInfo",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ProductReviewCreateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/product-reviews/{itemNumber}/{customerNumber}": {
			"get": {
				"tags": [
					"ProductReview"
				],
				"operationId": "ProductReview_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "customerNumber",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ProductReview"
						}
					}
				}
			},
			"post": {
				"tags": [
					"ProductReview"
				],
				"operationId": "ProductReview_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "customerNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "reviewInfo",
						"in": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ProductReviewUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			},
			"delete": {
				"tags": [
					"ProductReview"
				],
				"operationId": "ProductReview_Remove",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"required": true,
						"type": "string"
					},
					{
						"name": "customerNumber",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/product-reviews/{itemNumber}": {
			"get": {
				"tags": [
					"ProductReview"
				],
				"operationId": "ProductReview_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/ProductReview"
							}
						}
					}
				}
			}
		},
		"/profiles": {
			"post": {
				"tags": [
					"Profile"
				],
				"summary": "Creates a profile for the responses to a questionnaire.",
				"operationId": "Profile_Create",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "profile",
						"in": "body",
						"description": "The responses to the questions in the questionnaire",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Profile"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ProfileResponse"
						}
					}
				}
			}
		},
		"/profiles/{profileId}": {
			"get": {
				"tags": [
					"Profile"
				],
				"summary": "Returns details for the specified profile ID",
				"operationId": "Profile_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "profileId",
						"in": "path",
						"description": "Profile ID",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Profile"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Profile"
				],
				"summary": "Updates an existing profile.",
				"operationId": "Profile_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "profileId",
						"in": "path",
						"description": "The ID of the profile to update.",
						"required": true,
						"type": "string"
					},
					{
						"name": "profile",
						"in": "body",
						"description": "The responses to update in the profile",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Profile"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/profiles/by-item/{itemNumber}": {
			"get": {
				"tags": [
					"Profile"
				],
				"summary": "Returns the profile associated with the specified item",
				"operationId": "Profile_GetByItemNumber",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"description": "Item number",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Profile"
						}
					}
				}
			}
		},
		"/promotions": {
			"get": {
				"tags": [
					"Promotion"
				],
				"summary": "Get summary information for promotions matching a search argument.",
				"operationId": "Promotion_Search",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "searchText",
						"in": "query",
						"description": "The search argument for filtering the available promotions. Accepts '*' as a wild-card.",
						"required": false,
						"type": "string"
					},
					{
						"name": "includeActiveOnly",
						"in": "query",
						"description": "If true, search results will only include active promotions",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "validAsOf",
						"in": "query",
						"description": "If set, returns only promotions valid as of the specified date",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "PromotionCode",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.NotEqual",
						"in": "query",
						"description": "Filter on PMO-CDE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.Less",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-CDE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.Greater",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-CDE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.IsNull",
						"in": "query",
						"description": "Filter on PMO-CDE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-CDE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.Like",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.NotLike",
						"in": "query",
						"description": "Filter on PMO-CDE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.Contains",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.NotContains",
						"in": "query",
						"description": "Filter on PMO-CDE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.StartsWith",
						"in": "query",
						"description": "Filter on PMO-CDE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-CDE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.EndsWith",
						"in": "query",
						"description": "Filter on PMO-CDE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-CDE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.In",
						"in": "query",
						"description": "Filter on PMO-CDE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.Between",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotEqual",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Less",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on ITM-NUM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Greater",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on ITM-NUM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.IsNull",
						"in": "query",
						"description": "Filter on ITM-NUM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.IsNotNull",
						"in": "query",
						"description": "Filter on ITM-NUM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Like",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotLike",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Contains",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotContains",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.StartsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.EndsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on ITM-NUM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.In",
						"in": "query",
						"description": "Filter on ITM-NUM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ItemNumber.Between",
						"in": "query",
						"description": "Filter on ITM-NUM using 'Between' operator",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResultWithCount[PromotionSummary]"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Promotion"
				],
				"summary": "Create a new promotion.",
				"operationId": "Promotion_Create",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "promotionCreateRequest",
						"in": "body",
						"description": "A PromotionCreateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PromotionCreateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/promotions/{promotionCode}": {
			"get": {
				"tags": [
					"Promotion"
				],
				"summary": "Get an existing promotion.",
				"operationId": "Promotion_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "promotionCode",
						"in": "path",
						"description": "The promotion code of the desired promotion.",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "query",
						"description": "The optional currency for the promotion, the default is used if none provided.\r\nThis is used to determine which promotion items are returned and the available credit card and direct debit types.",
						"required": false,
						"type": "string"
					},
					{
						"name": "billingOrganization",
						"in": "query",
						"description": "The billing organization, used to determine the valid direct debit types for the promotion.\r\nIf none is provided, no direct debit types will be populated.",
						"required": false,
						"type": "string"
					},
					{
						"name": "isPromotionOnly",
						"in": "query",
						"description": "True to return only promotion level information.",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "webEnabledCreditCardsOnly",
						"in": "query",
						"description": "If true, ValidCards will only list web-enabled credit cards",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Promotion"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Promotion"
				],
				"summary": "Update an existing promotion.",
				"operationId": "Promotion_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "promotionCode",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "promotionUpdateRequest",
						"in": "body",
						"description": "A PromotionUpdateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PromotionUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/promotion-sources/{promotionSource}": {
			"get": {
				"tags": [
					"Promotion"
				],
				"summary": "Get a promotion source.\r\nThe promotion source is identified by the first character of the promotion code.\r\nClients are recommended to create promotion codes using this first character in a way that is meaningful\r\n(examples: A=Agency, D=Direct Mail, R=Renewal).\r\nMany CIR reports provide analysis by this first position of the promotion code.",
				"operationId": "Promotion_GetPromotionSource",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "promotionSource",
						"in": "path",
						"description": "The promotion source.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PromotionSource"
						}
					}
				}
			}
		},
		"/promotions/{promotionCode}/choices": {
			"get": {
				"tags": [
					"PromotionChoice"
				],
				"summary": "Get all promotion choices for a given promotion that match the searchAgument. The result of the search can\r\nbe limited to N at a time.",
				"operationId": "PromotionChoice_GetChoicesByPromotion",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "promotionCode",
						"in": "path",
						"description": "The Advantage promotion code that holds all the choices",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.search",
						"in": "query",
						"description": "The generic search argument. (Typically from a search text box). This term will be compared to several \r\nfields on promotion choice",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.currencyCode",
						"in": "query",
						"description": "The currency to limit results by",
						"required": false,
						"type": "string"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResultWithCount[PromotionChoice]"
						}
					}
				}
			},
			"post": {
				"tags": [
					"PromotionChoice"
				],
				"summary": "Create a new promotion choice or many new promotion choices. All promotion choices created in this way\r\nmust be for the same promotion (i.e. same promotion code.)",
				"operationId": "PromotionChoice_CreateChoices",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "promotionCode",
						"in": "path",
						"description": "The promotion code the choice(s) belongs to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "promotionChoiceCreateRequests",
						"in": "body",
						"description": "An array of PromotionChoiceCreateRequest objects.",
						"required": true,
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/PromotionChoiceCreateRequest"
							}
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/promotions/{promotionCode}/choices/{itemNumber}/{choiceCode}/{currencyCode}": {
			"get": {
				"tags": [
					"PromotionChoice"
				],
				"summary": "Get a specific promotion choice for a product.",
				"operationId": "PromotionChoice_GetChoice",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "promotionCode",
						"in": "path",
						"description": "The promotion code of the promotion.",
						"required": true,
						"type": "string"
					},
					{
						"name": "itemNumber",
						"in": "path",
						"description": "The item number of the product.",
						"required": true,
						"type": "string"
					},
					{
						"name": "choiceCode",
						"in": "path",
						"description": "The choice code for the promotion item choice.",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "path",
						"description": "The optional currency for the order. Not supplying this argument means promotion\r\n            choices across all currencies will be returned.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PromotionChoice"
						}
					}
				}
			},
			"post": {
				"tags": [
					"PromotionChoice"
				],
				"summary": "Update a new promotion item choice.",
				"operationId": "PromotionChoice_UpdateChoice",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "promotionCode",
						"in": "path",
						"description": "The promotion code the choice belongs to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "itemNumber",
						"in": "path",
						"description": "The item number of the product for the promotion item choice.",
						"required": true,
						"type": "string"
					},
					{
						"name": "choiceCode",
						"in": "path",
						"description": "The choice code for the promotion item choice.",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "path",
						"description": "The currency that applies for the promotion item choice.",
						"required": true,
						"type": "string"
					},
					{
						"name": "promotionChoiceUpdateRequest",
						"in": "body",
						"description": "A PromotionChoiceUpdateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PromotionChoiceIn"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			},
			"delete": {
				"tags": [
					"PromotionChoice"
				],
				"summary": "Delete a specific promotion choice.",
				"operationId": "PromotionChoice_DeleteChoice",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "promotionCode",
						"in": "path",
						"description": "The promotion code of the promotion the promotion-choice-item belongs to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "itemNumber",
						"in": "path",
						"description": "Item number of the promotion-choice-item.",
						"required": true,
						"type": "string"
					},
					{
						"name": "choiceCode",
						"in": "path",
						"description": "The promotion choice ID of the promotion-choice-item to delete.",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "path",
						"description": "The billing currency of the promotion-choice-item to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/promotions/{promotionCode}/choices/{itemNumber}": {
			"get": {
				"tags": [
					"PromotionChoice"
				],
				"summary": "Get the information for the possible promotion choices for a product.",
				"operationId": "PromotionChoice_GetChoicesByProduct",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "promotionCode",
						"in": "path",
						"description": "The promotion code of the promotion.",
						"required": true,
						"type": "string"
					},
					{
						"name": "itemNumber",
						"in": "path",
						"description": "The item number of the product.",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "query",
						"description": "The optional currency for the order. Not supplying this argument means promotion\r\n            choices across all currencies will be returned.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[PromotionChoice]"
						}
					}
				}
			}
		},
		"/promotions/{promotionCode}/choices/{itemNumber}/{choiceCode}/{currencyCode}/payment-methods": {
			"get": {
				"tags": [
					"PromotionChoice"
				],
				"summary": "Get a list of valid payment methods for a given promotion choice.",
				"operationId": "PromotionChoice_GetValidPaymentMethods",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "promotionCode",
						"in": "path",
						"description": "The promotion code of the promotion.",
						"required": true,
						"type": "string"
					},
					{
						"name": "itemNumber",
						"in": "path",
						"description": "The item number of the product.",
						"required": true,
						"type": "string"
					},
					{
						"name": "choiceCode",
						"in": "path",
						"description": "The choice code for the promotion item choice.",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "path",
						"description": "The currency for the order.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/PaymentMethod"
							}
						}
					}
				}
			}
		},
		"/promotions/{promotionCode}/choices/{itemNumber}/{choiceCode}/{currencyCode}/postage": {
			"get": {
				"tags": [
					"PromotionChoice"
				],
				"summary": "Get the calculated postage amount for the delivery code on the promotion item.\r\nThis method throws an exception if the promotion choice or delivery code is not found.",
				"operationId": "PromotionChoice_GetPostage",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "promotionCode",
						"in": "path",
						"description": "Uniquely identifies a promotion. (Advantage field: PMO-CDE)",
						"required": true,
						"type": "string"
					},
					{
						"name": "itemNumber",
						"in": "path",
						"description": "Code uniquely identifying a publication (Advantage field: PUB-CDE)",
						"required": true,
						"type": "string"
					},
					{
						"name": "choiceCode",
						"in": "path",
						"description": "Code identifying a set of defaults under a promotion and item. (Advantage field: PMO-CHC)",
						"required": true,
						"type": "string"
					},
					{
						"name": "currencyCode",
						"in": "path",
						"description": "Billing currency of the promotion item. (Advantage field: BIL-CUR)",
						"required": true,
						"type": "string"
					},
					{
						"name": "country",
						"in": "query",
						"description": "Code uniquely identifying a country (Advantage field: CUN-CDE)\r\n           This method requires a valid country code, but the parameter has been made optional so that it's possible\r\n           to pass in an empty string in cases where that happens to be a valid code.",
						"required": false,
						"type": "string"
					},
					{
						"name": "term",
						"in": "query",
						"description": "The subscription length (number of issues); zero for one year",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "effectiveDate",
						"in": "query",
						"description": "Effective date of the postage calculation; default is next issue date",
						"required": false,
						"type": "string",
						"format": "date-time"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PromotionChoicePostage"
						}
					}
				}
			}
		},
		"/promotions/{promotionCode}/choices/valid-values": {
			"get": {
				"tags": [
					"PromotionChoice"
				],
				"summary": "Get a list of valid promotion choices.",
				"operationId": "PromotionChoice_GetValidPromotionChoices",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "promotionCode",
						"in": "path",
						"description": "Promotion code to look up offer and currency",
						"required": true,
						"type": "string"
					},
					{
						"name": "itemNumber",
						"in": "query",
						"description": "Item number",
						"required": true,
						"type": "string"
					},
					{
						"name": "customerNumber",
						"in": "query",
						"description": "Customer number to look up currency",
						"required": true,
						"type": "string"
					},
					{
						"name": "currency",
						"in": "query",
						"description": "billing currency",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[FieldValidValue]"
						}
					}
				}
			}
		},
		"/promotion-creatives": {
			"post": {
				"tags": [
					"PromotionCreative"
				],
				"summary": "Create a new promotion creative.",
				"operationId": "PromotionCreative_Create",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "promotionCreativeCreateRequest",
						"in": "body",
						"description": "A PromotionCreativeCreateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PromotionCreativeCreateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/promotion-creatives/{creativeCode}/{version}": {
			"get": {
				"tags": [
					"PromotionCreative"
				],
				"summary": "Get an existing promotion creative.",
				"operationId": "PromotionCreative_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "creativeCode",
						"in": "path",
						"description": "The creative code of the desired creative.",
						"required": true,
						"type": "string"
					},
					{
						"name": "version",
						"in": "path",
						"description": "The version number for the promotion creative desired.",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PromotionCreative"
						}
					}
				}
			},
			"post": {
				"tags": [
					"PromotionCreative"
				],
				"summary": "Updates an existing promotion creative.",
				"operationId": "PromotionCreative_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "creativeCode",
						"in": "path",
						"description": "The creative code of the creative to be updated.",
						"required": true,
						"type": "string"
					},
					{
						"name": "version",
						"in": "path",
						"description": "The version number for the promotion creative to be updated.",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "promotionCreativeUpdateRequest",
						"in": "body",
						"description": "Creative update request object containing only values to be updated",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PromotionCreativeUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/promotion-creatives/{creativeCode}/{version}/copywriters/{copywriterCode}": {
			"delete": {
				"tags": [
					"PromotionCreative"
				],
				"summary": "Deletes the specified creative copywriter",
				"operationId": "PromotionCreative_DeleteCreativeCopywriter",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "creativeCode",
						"in": "path",
						"description": "The creative code to delete the copywriter from",
						"required": true,
						"type": "string"
					},
					{
						"name": "version",
						"in": "path",
						"description": "The creative version to delete the copywriter from",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "copywriterCode",
						"in": "path",
						"description": "The copywriter code to delete",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/promotion-creatives/{creativeCode}/{version}/documents/{documentSequence}": {
			"delete": {
				"tags": [
					"PromotionCreative"
				],
				"summary": "Deletes the specified creative document",
				"operationId": "PromotionCreative_DeleteCreativeDocument",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "creativeCode",
						"in": "path",
						"description": "The creative code to delete the document from",
						"required": true,
						"type": "string"
					},
					{
						"name": "version",
						"in": "path",
						"description": "The creative version to delete the document from",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "documentSequence",
						"in": "path",
						"description": "The document sequence number identifying the document to delete",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/promotion-creatives/{creativeCode}": {
			"post": {
				"tags": [
					"PromotionCreative"
				],
				"summary": "Adds a version to the given promotion creative, resets the \"changed\" attributes, and updates it with the given values.",
				"operationId": "PromotionCreative_AddVersion",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "creativeCode",
						"in": "path",
						"description": "The creative code to add the version to",
						"required": true,
						"type": "string"
					},
					{
						"name": "promotionCreativeUpdateRequest",
						"in": "body",
						"description": "Creative update request object containing values to be updated.  Any\r\n            unspecified properties will remain set to the previous version's values (except the \"changed\" properties).",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PromotionCreativeUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PromotionCreative"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"PromotionCreative"
				],
				"summary": "Deletes all versions for the given creative code",
				"operationId": "PromotionCreative_DeleteAllVersions",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "creativeCode",
						"in": "path",
						"description": "Code identifying the creative versions to delete",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/promotion-drafts": {
			"get": {
				"tags": [
					"PromotionDraft"
				],
				"summary": "Get summary information for promotions drafts.",
				"operationId": "PromotionDraft_Search",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "searchText",
						"in": "query",
						"description": "The search argument for filtering the available promotion drafts by promotion code. \r\nAccepts '*' as a wild-card.",
						"required": false,
						"type": "string"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[PromotionDraftSummary]"
						}
					}
				}
			},
			"post": {
				"tags": [
					"PromotionDraft"
				],
				"summary": "Create a new promotion draft.",
				"operationId": "PromotionDraft_Create",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "promotionDraft",
						"in": "body",
						"description": "A PromotionDraft object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PromotionDraftRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PromotionDraft"
						}
					}
				}
			}
		},
		"/promotion-drafts/{id}": {
			"get": {
				"tags": [
					"PromotionDraft"
				],
				"summary": "Get an existing promotion draft.",
				"operationId": "PromotionDraft_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The ID of the desired promotion draft.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PromotionDraft"
						}
					}
				}
			},
			"post": {
				"tags": [
					"PromotionDraft"
				],
				"summary": "Update an existing promotion draft.",
				"operationId": "PromotionDraft_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "promotionDraft",
						"in": "body",
						"description": "A PromotionDraft object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PromotionDraftRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PromotionDraft"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"PromotionDraft"
				],
				"summary": "Deletes a promotion draft.",
				"operationId": "PromotionDraft_Delete",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "The ID of the promotion draft.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/promotion-drafts/{id}/publish": {
			"post": {
				"tags": [
					"PromotionDraft"
				],
				"summary": "Creates the promotion, including offer and choices, and deletes the draft upon completion.",
				"operationId": "PromotionDraft_Publish",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/promotion-lists/{promotionListCode}": {
			"get": {
				"tags": [
					"PromotionList"
				],
				"summary": "Get information about the specified promotion mailing list.",
				"operationId": "PromotionList_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "promotionListCode",
						"in": "path",
						"description": "The promotion mailing list code.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PromotionList"
						}
					}
				}
			},
			"post": {
				"tags": [
					"PromotionList"
				],
				"summary": "Update an existing promotion.",
				"operationId": "PromotionList_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "promotionListCode",
						"in": "path",
						"description": "The promotion mailing list code.",
						"required": true,
						"type": "string"
					},
					{
						"name": "promotionListUpdateRequest",
						"in": "body",
						"description": "A PromotionListUpdateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PromotionListUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/promotion-lists": {
			"post": {
				"tags": [
					"PromotionList"
				],
				"summary": "Creates a new promotion mailing list definition in Advantage",
				"operationId": "PromotionList_Create",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "createRequest",
						"in": "body",
						"description": "A PromotionListCreateRequest object",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PromotionList"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/promotion-offers/{offerCode}": {
			"get": {
				"tags": [
					"PromotionOffer"
				],
				"summary": "Get an existing promotion offer.",
				"operationId": "PromotionOffer_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "offerCode",
						"in": "path",
						"description": "The offer code of the promotion offer to update.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/PromotionOffer"
						}
					}
				}
			},
			"post": {
				"tags": [
					"PromotionOffer"
				],
				"summary": "Update an existing promotion offer.",
				"operationId": "PromotionOffer_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "offerCode",
						"in": "path",
						"description": "The offer code of the promotion offer to update.",
						"required": true,
						"type": "string"
					},
					{
						"name": "promotionOfferUpdateRequest",
						"in": "body",
						"description": "A PromotionOfferUpdateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PromotionOfferUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/promotion-offers": {
			"get": {
				"tags": [
					"PromotionOffer"
				],
				"summary": "Get all available promotion offers",
				"operationId": "PromotionOffer_Search",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "searchText",
						"in": "query",
						"description": "The optional search argument, accepting \"*\" as a wild-card.\r\n            If a search argument isn't provided, all campaigns will be returned",
						"required": false,
						"type": "string"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResultWithCount[PromotionOffer]"
						}
					}
				}
			},
			"post": {
				"tags": [
					"PromotionOffer"
				],
				"summary": "Create a new promotion offer.",
				"operationId": "PromotionOffer_Create",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "promotionOfferCreateRequest",
						"in": "body",
						"description": "A PromotionOfferCreateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PromotionOfferCreateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/promotion-offers/{offerCode}/choices": {
			"get": {
				"tags": [
					"PromotionOffer"
				],
				"summary": "Get the promotion choices for a promotion offer.",
				"operationId": "PromotionOffer_GetChoices",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "offerCode",
						"in": "path",
						"description": "The offer code",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/PromotionChoice"
							}
						}
					}
				}
			}
		},
		"/promotion-offers/{offerCode}/payment-methods": {
			"get": {
				"tags": [
					"PromotionOffer"
				],
				"summary": "Get a list of valid payment methods for a given promotion offer.",
				"operationId": "PromotionOffer_GetValidPaymentMethods",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "offerCode",
						"in": "path",
						"description": "The offer code of the promotion offer.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/PaymentMethod"
							}
						}
					}
				}
			}
		},
		"/promotion-offers/{offerCode}/country-codes": {
			"get": {
				"tags": [
					"PromotionOffer"
				],
				"summary": "Get a list of valid country codes for a given promotion offer.",
				"operationId": "PromotionOffer_GetValidCountryCodes",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "offerCode",
						"in": "path",
						"description": "The offer code of the promotion offer.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"/prospects/{customerNumber}/addresses/{addressCode}": {
			"get": {
				"tags": [
					"Prospect"
				],
				"summary": "Gets a Prospect's Address.",
				"operationId": "Prospect_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "Customer Number",
						"required": true,
						"type": "string"
					},
					{
						"name": "addressCode",
						"in": "path",
						"description": "Address Code",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CustomerAddress"
						}
					}
				}
			}
		},
		"/prospects/{customerNumber}/addresses/prospect-default": {
			"get": {
				"tags": [
					"Prospect"
				],
				"summary": "Gets a Prospect's Default Address.",
				"operationId": "Prospect_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "Customer Number",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CustomerAddress"
						}
					}
				}
			}
		},
		"/prospects/{customerNumber}/convert-to-customer": {
			"post": {
				"tags": [
					"Prospect"
				],
				"summary": "Converts current prospect to customer",
				"operationId": "Prospect_ConvertToCustomer",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "Customer Number",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Customer"
						}
					}
				}
			}
		},
		"/prospects/{customerNumber}/postal-code/validate": {
			"post": {
				"tags": [
					"Prospect"
				],
				"summary": "Makes sure that the prospect record matches user supplied info.\r\nA 404 Not Found status is returned if validation fails.",
				"operationId": "Prospect_ValidatePostalCode",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "Customer Number",
						"required": true,
						"type": "string"
					},
					{
						"name": "request",
						"in": "body",
						"description": "ValidatePostalCode Request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ValidateAccountPostalCodeRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/publications/{publicationCode}/issues": {
			"get": {
				"tags": [
					"Publication"
				],
				"summary": "Get the issues of a publication.",
				"operationId": "Publication_GetIssues",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "publicationCode",
						"in": "path",
						"description": "The publication code of the desired issues' publication.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Issue]"
						}
					}
				}
			}
		},
		"/publications/{publicationCode}/issue-groups/{issueGroupCode}/issues": {
			"get": {
				"tags": [
					"Publication"
				],
				"summary": "Get the issues of a publication with-in the given issue group.",
				"operationId": "Publication_GetIssues",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "publicationCode",
						"in": "path",
						"description": "The publication code",
						"required": true,
						"type": "string"
					},
					{
						"name": "issueGroupCode",
						"in": "path",
						"description": "The publication issue group",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Issue]"
						}
					}
				}
			}
		},
		"/publications/{publicationCode}/issue-groups": {
			"get": {
				"tags": [
					"Publication"
				],
				"summary": "Get the valid issue groups.",
				"operationId": "Publication_GetIssueGroups",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "publicationCode",
						"in": "path",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[IssueGroup]"
						}
					}
				}
			}
		},
		"/publications/{publicationCode}/issues/{issueDate}": {
			"get": {
				"tags": [
					"Publication"
				],
				"summary": "Gets information about a particular issue for a publication.",
				"operationId": "Publication_GetIssue",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "publicationCode",
						"in": "path",
						"description": "The publication code of the desired publication.",
						"required": true,
						"type": "string"
					},
					{
						"name": "issueDate",
						"in": "path",
						"description": "The issue date of the issue to get the name for. This is string formatted as yyyy-MM-dd.",
						"required": true,
						"type": "string",
						"format": "date-time"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Issue"
						}
					}
				}
			}
		},
		"/publications/{publicationCode}/delivery-methods": {
			"get": {
				"tags": [
					"Publication"
				],
				"summary": "Get the valid delivery codes for a publication.",
				"operationId": "Publication_GetDeliveryMethods",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "publicationCode",
						"in": "path",
						"description": "The publication code of the publication who's delivery codes are to be returned.",
						"required": true,
						"type": "string"
					},
					{
						"name": "BillingCurrency",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrency.NotEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrency.Less",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrency.LessOrEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrency.Greater",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrency.GreaterOrEqual",
						"in": "query",
						"description": "Filter on BIL-CUR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrency.IsNull",
						"in": "query",
						"description": "Filter on BIL-CUR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrency.IsNotNull",
						"in": "query",
						"description": "Filter on BIL-CUR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrency.Like",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrency.NotLike",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrency.Contains",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrency.NotContains",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrency.StartsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrency.NotStartsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrency.EndsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrency.NotEndsWith",
						"in": "query",
						"description": "Filter on BIL-CUR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrency.In",
						"in": "query",
						"description": "Filter on BIL-CUR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillingCurrency.Between",
						"in": "query",
						"description": "Filter on BIL-CUR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.NotEqual",
						"in": "query",
						"description": "Filter on PMO-CDE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.Less",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.LessOrEqual",
						"in": "query",
						"description": "Filter on PMO-CDE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.Greater",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PMO-CDE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.IsNull",
						"in": "query",
						"description": "Filter on PMO-CDE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.IsNotNull",
						"in": "query",
						"description": "Filter on PMO-CDE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.Like",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.NotLike",
						"in": "query",
						"description": "Filter on PMO-CDE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.Contains",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.NotContains",
						"in": "query",
						"description": "Filter on PMO-CDE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.StartsWith",
						"in": "query",
						"description": "Filter on PMO-CDE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.NotStartsWith",
						"in": "query",
						"description": "Filter on PMO-CDE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.EndsWith",
						"in": "query",
						"description": "Filter on PMO-CDE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.NotEndsWith",
						"in": "query",
						"description": "Filter on PMO-CDE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.In",
						"in": "query",
						"description": "Filter on PMO-CDE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PromotionCode.Between",
						"in": "query",
						"description": "Filter on PMO-CDE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Less",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Greater",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.IsNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Like",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotLike",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Contains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotContains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.StartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.EndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.In",
						"in": "query",
						"description": "Filter on CTM-NBR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CustomerNumber.Between",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Between' operator",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[DeliveryMethod]"
						}
					}
				}
			}
		},
		"/publications/{publicationCode}/auto-renewal-chains": {
			"get": {
				"tags": [
					"Publication"
				],
				"summary": "Get the available auto-renewal chains for a publication.",
				"operationId": "Publication_GetAutoRenewalChains",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "publicationCode",
						"in": "path",
						"description": "The publication code of the publication who's auto-renewal \r\n            chains will be returned.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[SubscriptionAutoRenewalChain]"
						}
					}
				}
			}
		},
		"/questionnaires/{questionnaireCode}": {
			"get": {
				"tags": [
					"Questionnaire"
				],
				"summary": "Gets the questionnaire.  Some questionnaires will carry forward the customer's previous \r\nresponses to use as the defaults when the questionnaire is presented a second time.  This \r\nfeature is supported only if you provide the optional profile ID parameter.",
				"operationId": "Questionnaire_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "questionnaireCode",
						"in": "path",
						"description": "The questionnaire to return",
						"required": true,
						"type": "string"
					},
					{
						"name": "profileId",
						"in": "query",
						"description": "The ID of the profile containing the customer's previous responses,\r\n            e.g. the profile (responses) from the customer's previous subscription term.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Questionnaire"
						}
					}
				}
			}
		},
		"/quotes": {
			"post": {
				"tags": [
					"Quote"
				],
				"summary": "Create a new quote. This method takes the incoming order create request object and uses it to create a new \r\nAdvantage quote. The new Advantage quote has a new order line created for each OrderLineIn object \r\ncontained in the order create request object.\r\nOrder type is overridden to O (pro-forma), regardless of what is specified on the order request.",
				"operationId": "Quote_Create",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "orderCreateRequest",
						"in": "body",
						"description": "An OrderCreateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/OrderCreateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Order"
						}
					}
				}
			}
		},
		"/quotes/{orderNumber}": {
			"get": {
				"tags": [
					"Quote"
				],
				"summary": "Get a quotes's information given the order number.",
				"operationId": "Quote_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "An Advantage order number.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Order"
						}
					}
				}
			}
		},
		"/reasons/{categoryCode}/{reasonCode}": {
			"get": {
				"tags": [
					"Reason"
				],
				"summary": "Returns information for a specified reason code",
				"operationId": "Reason_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "categoryCode",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					},
					{
						"name": "reasonCode",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Reason"
						}
					}
				}
			}
		},
		"/recurring-donations/{recurringDonationId}": {
			"get": {
				"tags": [
					"RecurringDonation"
				],
				"summary": "Get information pertaining to a recurring donation.",
				"operationId": "RecurringDonation_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "recurringDonationId",
						"in": "path",
						"description": "The recurring donation Id.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/RecurringDonation"
						}
					}
				}
			},
			"post": {
				"tags": [
					"RecurringDonation"
				],
				"summary": "Update an existing recurring donation.\r\nWhen updating, if you are updating the payment method, only include one payment method \r\nor the other. CreditCardInfo, or DirectDebitInfo.",
				"operationId": "RecurringDonation_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "recurringDonationId",
						"in": "path",
						"description": "The Id of the Advantage recurring donation to update.",
						"required": true,
						"type": "string"
					},
					{
						"name": "recurringDonationUpdateRequest",
						"in": "body",
						"description": "A RecurringDonationUpdateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RecurringDonationUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/RecurringDonation"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"RecurringDonation"
				],
				"summary": "Deletes a committed recurring donation.",
				"operationId": "RecurringDonation_Delete",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "recurringDonationId",
						"in": "path",
						"description": "A recurring donation Id.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/recurring-donations/{recurringDonationId}/deactivate": {
			"post": {
				"tags": [
					"RecurringDonation"
				],
				"summary": "Deactivate a recurring donation.",
				"operationId": "RecurringDonation_Deactivate",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "recurringDonationId",
						"in": "path",
						"description": "The recurring donation Id",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/recurring-donations/{recurringDonationId}/activate": {
			"post": {
				"tags": [
					"RecurringDonation"
				],
				"summary": "Activate a current donation.",
				"operationId": "RecurringDonation_Activate",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "recurringDonationId",
						"in": "path",
						"description": "A recurring donation Id.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/customers/{customerNumber}/recurring-donations": {
			"get": {
				"tags": [
					"RecurringDonation"
				],
				"summary": "Get all of the recurring donation objects for which the given customer is the bill-to.",
				"operationId": "RecurringDonation_GetRecurringDonations",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "An Advantage customer number.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/RecurringDonation"
							}
						}
					}
				}
			}
		},
		"/recurring-donations": {
			"post": {
				"tags": [
					"RecurringDonation"
				],
				"summary": "Create a new recurring donation. This method takes the incoming recurring donation create request object \r\nand uses it to create a new Advantage recurring donation. \r\nWhen creating, only include one payment method or the other. CreditCardInfo, or DirectDebitInfo.",
				"operationId": "RecurringDonation_Create",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "recurringDonationCreateRequest",
						"in": "body",
						"description": "A RecurringDonationCreateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RecurringDonationCreateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/RecurringDonation"
						}
					}
				}
			}
		},
		"/sales-reps/{salesRepCode}": {
			"get": {
				"tags": [
					"SalesRep"
				],
				"summary": "Gets Sales Rep.",
				"operationId": "SalesRep_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "salesRepCode",
						"in": "path",
						"description": "The sales rep number",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SalesRep"
						}
					}
				}
			},
			"post": {
				"tags": [
					"SalesRep"
				],
				"summary": "Update an existing Sales Rep",
				"operationId": "SalesRep_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "salesRepCode",
						"in": "path",
						"description": "Sales Rep Number of the Sales Rep to be Updated",
						"required": true,
						"type": "string"
					},
					{
						"name": "salesRepUpdateRequest",
						"in": "body",
						"description": "Information to update the Sales Rep with",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SalesRepUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SalesRep"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"SalesRep"
				],
				"summary": "Removes a Sales Rep",
				"operationId": "SalesRep_Remove",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "salesRepCode",
						"in": "path",
						"description": "The Number that identifies the Sales Rep to be deleted.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/sales-reps": {
			"get": {
				"tags": [
					"SalesRep"
				],
				"summary": "Gets List of Sales Reps.",
				"operationId": "SalesRep_GetList",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "query",
						"description": "Default null to return list of all sales reps,\r\n                pass in CustomerNumber to Get List by customer number",
						"required": false,
						"type": "string"
					},
					{
						"name": "excludeUnmappedReps",
						"in": "query",
						"description": "If true, will only return information for reps with a user mapping",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[SalesRep]"
						}
					}
				}
			},
			"post": {
				"tags": [
					"SalesRep"
				],
				"summary": "Create or Update a Sales Rep from a SalesRep Model",
				"operationId": "SalesRep_CreateOrUpdate",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "salesRepIn",
						"in": "body",
						"description": "Model to Create/Update Password Question",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SalesRepIn"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SalesRep"
						}
					}
				}
			}
		},
		"/sales-reps/{salesRepCode}/call-statistics": {
			"get": {
				"tags": [
					"SalesRep"
				],
				"summary": "Gets call statistics for a particular date range.",
				"operationId": "SalesRep_GetCallStatistics",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "salesRepCode",
						"in": "path",
						"description": "Sales rep code for statistics range",
						"required": true,
						"type": "string"
					},
					{
						"name": "isManager",
						"in": "query",
						"description": "Whether the sales rep is the manager of the team for which department rank will be calculated",
						"required": true,
						"type": "boolean"
					},
					{
						"name": "displayCurrency",
						"in": "query",
						"description": "The currency in which sales totals will be calculated",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.beginDate",
						"in": "query",
						"description": "The earliest call date to include in statistics.",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "filter.endDate",
						"in": "query",
						"description": "The latest call date to include in statistics.",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "filter.listCode",
						"in": "query",
						"description": "List code of the list to limit the statistics to or null or empty string to compile\r\nstatistics across lists.",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.listDate",
						"in": "query",
						"description": "The date associated with the call list",
						"required": false,
						"type": "string",
						"format": "date-time"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CallStatistics"
						}
					}
				}
			}
		},
		"/sales-reps/{salesRepCode}/team-statistics": {
			"get": {
				"tags": [
					"SalesRep"
				],
				"summary": "Gets call statistics for a particular date range for a supervisor and all of their direct subordinates.",
				"operationId": "SalesRep_GetTeamCallStatistics",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "salesRepCode",
						"in": "path",
						"description": "Supervisor sales rep code for statistics range",
						"required": true,
						"type": "string"
					},
					{
						"name": "displayCurrency",
						"in": "query",
						"description": "The currency in which sales totals will be calculated",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.beginDate",
						"in": "query",
						"description": "The earliest call date to include in statistics.",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "filter.endDate",
						"in": "query",
						"description": "The latest call date to include in statistics.",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "filter.listCode",
						"in": "query",
						"description": "List code of the list to limit the statistics to or null or empty string to compile\r\nstatistics across lists.",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.listDate",
						"in": "query",
						"description": "The date associated with the call list",
						"required": false,
						"type": "string",
						"format": "date-time"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[CallStatistics]"
						}
					}
				}
			}
		},
		"/sales-reps/{supervisorCode}/sales-reps": {
			"get": {
				"tags": [
					"SalesRep"
				],
				"summary": "Gets list of sales reps under a supervisor (List includes supervisor)",
				"operationId": "SalesRep_GetSalesRepsBySupervisor",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "supervisorCode",
						"in": "path",
						"description": "Supervisor's sales rep code",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[SalesRep]"
						}
					}
				}
			}
		},
		"/sales-reps/{salesRepCode}/callbacks": {
			"get": {
				"tags": [
					"SalesRep"
				],
				"summary": "Gets list of tele-service callbacks.",
				"operationId": "SalesRep_GetCallbacks",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "salesRepCode",
						"in": "path",
						"description": "Sales rep code for rep assigned to callbacks",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.listId",
						"in": "query",
						"description": "The List Id of the list to filter results by",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.listDate",
						"in": "query",
						"description": "The date associated with the call list",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "filter.beginDate",
						"in": "query",
						"description": "The beginning date. Only calls with callback date on or after this date will be returned.",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "filter.endDate",
						"in": "query",
						"description": "The beginning date. Only calls with callback date on or before this date will be returned.",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Call]"
						}
					}
				}
			}
		},
		"/sales-reps/{salesRepCode}/call-lists": {
			"get": {
				"tags": [
					"SalesRep"
				],
				"summary": "Gets a list of call list assignments for a given sales representative.",
				"operationId": "SalesRep_GetCallListAssignments",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "salesRepCode",
						"in": "path",
						"description": "Sales Rep Code",
						"required": true,
						"type": "string"
					},
					{
						"name": "includeInactiveLists",
						"in": "query",
						"description": "If true, include inactive lists",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "onlyIncludeListsWithCallsRemaining",
						"in": "query",
						"description": "If true, only include lists with calls remaining",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[CallListAssignment]"
						}
					}
				}
			}
		},
		"/sales-reps/{salesRepCode}/call-history": {
			"get": {
				"tags": [
					"SalesRep"
				],
				"summary": "Returns call history records for the specified sales rep",
				"operationId": "SalesRep_GetCallHistory",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "salesRepCode",
						"in": "path",
						"description": "Sales rep code",
						"required": true,
						"type": "string"
					},
					{
						"name": "includeClosed",
						"in": "query",
						"description": "If true, include history records for closed calls (resolution code 'L')",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[CallHistory]"
						}
					}
				}
			}
		},
		"/sales-reps/{salesRepCode}/calls": {
			"get": {
				"tags": [
					"SalesRep"
				],
				"summary": "Gets a list of calls for a given sales representative.",
				"operationId": "SalesRep_GetCallsForSalesRep",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "salesRepCode",
						"in": "path",
						"description": "Sales representative code for a given sales representative",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.listId",
						"in": "query",
						"description": "The List Id of the list to filter results by",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.listDate",
						"in": "query",
						"description": "The date associated with the call list",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "filter.includeCompleted",
						"in": "query",
						"description": "True to include calls that have been completed",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "filter.includeContacted",
						"in": "query",
						"description": "True to include calls where the customer has been contacted",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "filter.includeCallbacks",
						"in": "query",
						"description": "True to include calls callbacks",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "filter.includeUncontacted",
						"in": "query",
						"description": "True to include calls that have been made",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Call]"
						}
					}
				}
			}
		},
		"/sales-reps/{salesRepCode}/call-lists/{listId}/{listDate}": {
			"get": {
				"tags": [
					"SalesRep"
				],
				"summary": "Gets a list of calls for a given sales representative.",
				"operationId": "SalesRep_GetCallsForList",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "salesRepCode",
						"in": "path",
						"description": "Sales representative code for a given sales representative",
						"required": true,
						"type": "string"
					},
					{
						"name": "listId",
						"in": "path",
						"description": "List Id",
						"required": true,
						"type": "string"
					},
					{
						"name": "listDate",
						"in": "path",
						"description": "List Date",
						"required": true,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "includeCallbacks",
						"in": "query",
						"description": "True to include callbacks",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "includeContacted",
						"in": "query",
						"description": "True to include calls for customers who have been contacted at least once",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Call]"
						}
					}
				}
			}
		},
		"/sales-reps/{salesRepCode}/{listId}/{listDate}/{quantity}": {
			"post": {
				"tags": [
					"SalesRep"
				],
				"summary": "Updates call count for a sales rep on a particular call list",
				"operationId": "SalesRep_UpdateCallCount",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "salesRepCode",
						"in": "path",
						"description": "Sales representative code for a given sales representative",
						"required": true,
						"type": "string"
					},
					{
						"name": "listId",
						"in": "path",
						"description": "List Id",
						"required": true,
						"type": "string"
					},
					{
						"name": "listDate",
						"in": "path",
						"description": "List Date",
						"required": true,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "quantity",
						"in": "path",
						"description": "Number of calls to change",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/sales-reps/reassign": {
			"post": {
				"tags": [
					"SalesRep"
				],
				"summary": "Reassign one or more calls from one sales rep to another",
				"operationId": "SalesRep_ReassignCall",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "reassignCallRequest",
						"in": "body",
						"description": "Information for reassigning one or more calls",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ReassignCallRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/security-questions/{code}": {
			"get": {
				"tags": [
					"SecurityQuestion"
				],
				"summary": "Gets Security Questions.",
				"operationId": "SecurityQuestion_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "code",
						"in": "path",
						"description": "Question Code",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SecurityQuestion"
						}
					}
				}
			},
			"post": {
				"tags": [
					"SecurityQuestion"
				],
				"summary": "Update a Security Question with a new Question Prompt",
				"operationId": "SecurityQuestion_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "code",
						"in": "path",
						"description": "Code of Security Question to be updated",
						"required": true,
						"type": "string"
					},
					{
						"name": "securityQuestionUpdateRequest",
						"in": "body",
						"description": "Question Prompt to update the Security Question with",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SecurityQuestionUpdateRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SecurityQuestion"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"SecurityQuestion"
				],
				"summary": "Removes a Question Code",
				"operationId": "SecurityQuestion_Remove",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "code",
						"in": "path",
						"description": "The code that identifies the question to be deleted.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/security-questions": {
			"get": {
				"tags": [
					"SecurityQuestion"
				],
				"summary": "Gets List of Security Questions.",
				"operationId": "SecurityQuestion_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/SecurityQuestion"
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"SecurityQuestion"
				],
				"summary": "Create or Update a Security Question from a SecurityQuestion Model",
				"operationId": "SecurityQuestion_CreateOrUpdate",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "securityQuestionIn",
						"in": "body",
						"description": "Model to Create/Update Security Question",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SecurityQuestion"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SecurityQuestion"
						}
					}
				}
			}
		},
		"/settings/websites/{siteCode}": {
			"get": {
				"tags": [
					"Settings"
				],
				"summary": "Get the Advantage settings for the specified website and the general options\r\nthat are useful for e-commerce and customer service web sites.",
				"operationId": "Settings_GetSiteSettings",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "siteCode",
						"in": "path",
						"description": "The Site Code used to retrieve site-specific options.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SiteSettings"
						}
					}
				}
			}
		},
		"/settings/common-options": {
			"get": {
				"tags": [
					"Settings"
				],
				"summary": "Get the general options that are useful for e-commerce and customer service web sites.",
				"operationId": "Settings_GetCommonOptions",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/CommonOptions"
						}
					}
				}
			}
		},
		"/settings/common-field-lengths": {
			"get": {
				"tags": [
					"Settings"
				],
				"summary": "Get the general options that are useful for e-commerce and customer service web sites.",
				"operationId": "Settings_GetFieldLengths",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/FieldLengths"
						}
					}
				}
			}
		},
		"/settings/options/{systemName}/{optionName}": {
			"get": {
				"tags": [
					"Settings"
				],
				"summary": "Get the value of a specific system option.",
				"operationId": "Settings_GetOption",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "systemName",
						"in": "path",
						"description": "Option system name",
						"required": true,
						"type": "string"
					},
					{
						"name": "optionName",
						"in": "path",
						"description": "Option name",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/OptionValue"
						}
					}
				}
			}
		},
		"/ship-vias/{currencyCode}/{shipViaCode}": {
			"get": {
				"tags": [
					"ShipVia"
				],
				"summary": "Gets ShipVia.",
				"operationId": "ShipVia_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "currencyCode",
						"in": "path",
						"description": "Billing Currency Code",
						"required": true,
						"type": "string"
					},
					{
						"name": "shipViaCode",
						"in": "path",
						"description": "Ship Via Code",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ShipVia"
						}
					}
				}
			}
		},
		"/ship-vias": {
			"get": {
				"tags": [
					"ShipVia"
				],
				"summary": "Gets List of ShipVias.",
				"operationId": "ShipVia_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "webOnly",
						"in": "query",
						"description": "Optional Web Only (default is false)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[ShipVia]"
						}
					}
				}
			}
		},
		"/ship-vias/{currencyCode}": {
			"get": {
				"tags": [
					"ShipVia"
				],
				"summary": "Gets List of ShipVias.",
				"operationId": "ShipVia_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "currencyCode",
						"in": "path",
						"description": "Billing Currency Code",
						"required": true,
						"type": "string"
					},
					{
						"name": "webOnly",
						"in": "query",
						"description": "Optional Web Only (default is false)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[ShipVia]"
						}
					}
				}
			}
		},
		"/ship-vias/estimate-shipping": {
			"post": {
				"tags": [
					"ShipVia"
				],
				"summary": "Get the estimated freight cost for the given ship via.\r\nParent currency is used if no currency provided.\r\nOther optional parameters include price and quantity.\r\nIf zone-based-shipping is used then itemNumber or warehouseId, country and postal code will be required\r\nto determine the zone and freight amount.  Otherwise, the item, warehouse, country and postal code are not needed.\r\nIn general the more information given, the more accurate the estimate will be.",
				"operationId": "ShipVia_EstimateShipping",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "getEstimatedFreightRequest",
						"in": "body",
						"description": "Get Estimated Freight Request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ShipViaEstimateShippingRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ShipViaEstimatedFreight"
						}
					}
				}
			}
		},
		"/shopping-carts": {
			"post": {
				"tags": [
					"ShoppingCart"
				],
				"summary": "Create a new shopping cart.",
				"operationId": "ShoppingCart_Create",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "shoppingCartIn",
						"in": "body",
						"description": "A ShoppingCartIn object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ShoppingCartIn"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ShoppingCart"
						}
					}
				}
			}
		},
		"/shopping-carts/{cartId}": {
			"get": {
				"tags": [
					"ShoppingCart"
				],
				"summary": "Get the shopping cart with the given ID.",
				"operationId": "ShoppingCart_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "cartId",
						"in": "path",
						"description": "The ID of the desired shopping cart.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ShoppingCart"
						}
					}
				}
			},
			"post": {
				"tags": [
					"ShoppingCart"
				],
				"summary": "Update an existing shopping cart.",
				"operationId": "ShoppingCart_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "cartId",
						"in": "path",
						"description": "The ID of the cart to update.",
						"required": true,
						"type": "string"
					},
					{
						"name": "shoppingCartIn",
						"in": "body",
						"description": "A ShoppingCartIn object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ShoppingCartIn"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/ShoppingCart"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"ShoppingCart"
				],
				"summary": "Delete an existing shopping cart with the given ID.",
				"operationId": "ShoppingCart_Delete",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "cartId",
						"in": "path",
						"description": "The ID of the cart to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/shopping-carts/{cartId}/convert-to-order": {
			"post": {
				"tags": [
					"ShoppingCart"
				],
				"summary": "Convert an existing shopping cart to an Advantage Order. Usually called when preparing \r\nto render a Checkout/Confirmation page for users.",
				"operationId": "ShoppingCart_ConvertToOrder",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "cartId",
						"in": "path",
						"description": "The ID of the cart to convert to an order.",
						"required": true,
						"type": "string"
					},
					{
						"name": "convertCartToOrderRequest",
						"in": "body",
						"description": "A ConvertCartToOrderRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ConvertCartToOrderRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/OrderResponse"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/shopping-carts": {
			"get": {
				"tags": [
					"ShoppingCart"
				],
				"summary": "Get all shopping carts for the given customer.",
				"operationId": "ShoppingCart_GetByCustomer",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "An Advantage customer number. This method will return all shopping carts \r\n            for which this customer is the bill-to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "orderSourceCode",
						"in": "query",
						"description": "An order source. If provided, only shopping carts with this order source \r\n            will be returned.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[ShoppingCart]"
						}
					}
				}
			}
		},
		"/shopping-carts/{cartId}/item-exclusions": {
			"get": {
				"tags": [
					"ShoppingCart"
				],
				"summary": "Get a list of item exclusions for a given shopping card.",
				"operationId": "ShoppingCart_GetItemExclusions",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "cartId",
						"in": "path",
						"description": "The ID of the cart that has item exclusions.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/OrderLineItemExclusion"
							}
						}
					}
				}
			}
		},
		"/states": {
			"get": {
				"tags": [
					"State"
				],
				"summary": "Get the list of states for all countries.",
				"operationId": "State_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/State"
							}
						}
					}
				}
			}
		},
		"/states/{countryCode}/{stateCode}": {
			"get": {
				"tags": [
					"State"
				],
				"summary": "Get the state for the given country code and state code.",
				"operationId": "State_GetState",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "countryCode",
						"in": "path",
						"description": "Country Code. For a blank country code use the literal string \"blank\".",
						"required": true,
						"type": "string"
					},
					{
						"name": "stateCode",
						"in": "path",
						"description": "State Code",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/State"
						}
					}
				}
			}
		},
		"/subscriptions/{subscriptionId}": {
			"get": {
				"tags": [
					"Subscription"
				],
				"summary": "Get a single subscription identified by subscriptionId.",
				"operationId": "Subscription_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "subscriptionId",
						"in": "path",
						"description": "Subscription Id/Reference.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Subscription"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Subscription"
				],
				"summary": "Update an existing subscription.",
				"operationId": "Subscription_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "subscriptionId",
						"in": "path",
						"description": "The subscription ID of the subscription to update.",
						"required": true,
						"type": "string"
					},
					{
						"name": "subscriptionUpdateRequest",
						"in": "body",
						"description": "A SubscriptionUpdateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SubscriptionUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/subscriptions/{subscriptionId}/related-terms": {
			"get": {
				"tags": [
					"Subscription"
				],
				"summary": "Gets all related terms for the given subscription.  A related term can be all subscriptions that are \r\npart of the same package plus their future terms, or a single subscription and its future terms.\r\nFor a package subscription, the subscriptions are returned in the order they were added.\r\nFor an individual subscription, the future terms are returned after the current term in term order.",
				"operationId": "Subscription_GetRelatedTerms",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "subscriptionId",
						"in": "path",
						"description": "Subscription Id/Reference.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Subscription]"
						}
					}
				}
			}
		},
		"/subscriptions/{subscriptionId}/cancel": {
			"post": {
				"tags": [
					"Subscription"
				],
				"summary": "Cancel a subscription.",
				"operationId": "Subscription_Cancel",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "subscriptionId",
						"in": "path",
						"description": "The subscriptionId of the subscription to be canceled.",
						"required": true,
						"type": "string"
					},
					{
						"name": "cancelSubscriptionRequest",
						"in": "body",
						"description": "A CancelSubscriptionRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CancelSubscriptionRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/subscriptions/{subscriptionId}/non-pay-cancel": {
			"post": {
				"tags": [
					"Subscription"
				],
				"summary": "Create non-pay cancel transaction for a subscription",
				"operationId": "Subscription_NonPayCancel",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "subscriptionId",
						"in": "path",
						"description": "The subscription ID of the subscription to update.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/subscriptions/{subscriptionId}/bill-suspend": {
			"post": {
				"tags": [
					"Subscription"
				],
				"summary": "Bill Suspend a subscription.",
				"operationId": "Subscription_BillSuspend",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "subscriptionId",
						"in": "path",
						"description": "The subscription ID of the subscription to update.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/subscriptions/{subscriptionId}/suspend": {
			"post": {
				"tags": [
					"Subscription"
				],
				"summary": "Suspend a subscription. This can be for a specified start and end issue, or a more generic \"begin at \r\nthe next issue, open-ended\" if you leave the start and end date blank in the request.",
				"operationId": "Subscription_Suspend",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "subscriptionId",
						"in": "path",
						"description": "The subscription ID of the subscription to suspend.",
						"required": true,
						"type": "string"
					},
					{
						"name": "subscriptionSuspendRequest",
						"in": "body",
						"description": "A SubscriptionSuspendRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SubscriptionSuspendRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/subscriptions": {
			"get": {
				"tags": [
					"Subscription"
				],
				"summary": "Gets subscriptions matching the filter criteria. Filters are passed as a URI parameter in the format &lt;Field&gt;.&lt;Operator&gt;=&lt;Value&gt;.\r\nFor example, /subscriptions?PublicationCode.CN=AB or /subscriptions?PublicationCode.EQ=ABC&amp;CustomerNumber.EQ=1",
				"operationId": "Subscription_Search",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "pager.skip",
						"in": "query",
						"description": "The number of records to skip.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "pager.take",
						"in": "query",
						"description": "The number of records to return.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "PublicationCode",
						"in": "query",
						"description": "Filter on PUB-CDE using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId",
						"in": "query",
						"description": "Filter on SUB-REF using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber",
						"in": "query",
						"description": "Filter on DNR-NBR using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber",
						"in": "query",
						"description": "Filter on REF-CTM using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus",
						"in": "query",
						"description": "Filter on CRC-STS using 'Equal' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PublicationCode.NotEqual",
						"in": "query",
						"description": "Filter on PUB-CDE using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PublicationCode.Less",
						"in": "query",
						"description": "Filter on PUB-CDE using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PublicationCode.LessOrEqual",
						"in": "query",
						"description": "Filter on PUB-CDE using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PublicationCode.Greater",
						"in": "query",
						"description": "Filter on PUB-CDE using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PublicationCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on PUB-CDE using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PublicationCode.IsNull",
						"in": "query",
						"description": "Filter on PUB-CDE using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PublicationCode.IsNotNull",
						"in": "query",
						"description": "Filter on PUB-CDE using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PublicationCode.Like",
						"in": "query",
						"description": "Filter on PUB-CDE using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PublicationCode.NotLike",
						"in": "query",
						"description": "Filter on PUB-CDE using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PublicationCode.Contains",
						"in": "query",
						"description": "Filter on PUB-CDE using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PublicationCode.NotContains",
						"in": "query",
						"description": "Filter on PUB-CDE using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PublicationCode.StartsWith",
						"in": "query",
						"description": "Filter on PUB-CDE using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PublicationCode.NotStartsWith",
						"in": "query",
						"description": "Filter on PUB-CDE using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PublicationCode.EndsWith",
						"in": "query",
						"description": "Filter on PUB-CDE using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PublicationCode.NotEndsWith",
						"in": "query",
						"description": "Filter on PUB-CDE using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PublicationCode.In",
						"in": "query",
						"description": "Filter on PUB-CDE using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "PublicationCode.Between",
						"in": "query",
						"description": "Filter on PUB-CDE using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber.NotEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber.Less",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber.Greater",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CTM-NBR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber.IsNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber.IsNotNull",
						"in": "query",
						"description": "Filter on CTM-NBR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber.Like",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber.NotLike",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber.Contains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber.NotContains",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber.StartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber.EndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on CTM-NBR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber.In",
						"in": "query",
						"description": "Filter on CTM-NBR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ShipToCustomerNumber.Between",
						"in": "query",
						"description": "Filter on CTM-NBR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId.NotEqual",
						"in": "query",
						"description": "Filter on SUB-REF using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId.Less",
						"in": "query",
						"description": "Filter on SUB-REF using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId.LessOrEqual",
						"in": "query",
						"description": "Filter on SUB-REF using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId.Greater",
						"in": "query",
						"description": "Filter on SUB-REF using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId.GreaterOrEqual",
						"in": "query",
						"description": "Filter on SUB-REF using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId.IsNull",
						"in": "query",
						"description": "Filter on SUB-REF using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId.IsNotNull",
						"in": "query",
						"description": "Filter on SUB-REF using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId.Like",
						"in": "query",
						"description": "Filter on SUB-REF using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId.NotLike",
						"in": "query",
						"description": "Filter on SUB-REF using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId.Contains",
						"in": "query",
						"description": "Filter on SUB-REF using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId.NotContains",
						"in": "query",
						"description": "Filter on SUB-REF using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId.StartsWith",
						"in": "query",
						"description": "Filter on SUB-REF using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId.NotStartsWith",
						"in": "query",
						"description": "Filter on SUB-REF using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId.EndsWith",
						"in": "query",
						"description": "Filter on SUB-REF using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId.NotEndsWith",
						"in": "query",
						"description": "Filter on SUB-REF using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId.In",
						"in": "query",
						"description": "Filter on SUB-REF using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "SubscriptionId.Between",
						"in": "query",
						"description": "Filter on SUB-REF using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotEqual",
						"in": "query",
						"description": "Filter on DNR-NBR using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Less",
						"in": "query",
						"description": "Filter on DNR-NBR using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on DNR-NBR using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Greater",
						"in": "query",
						"description": "Filter on DNR-NBR using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on DNR-NBR using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.IsNull",
						"in": "query",
						"description": "Filter on DNR-NBR using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.IsNotNull",
						"in": "query",
						"description": "Filter on DNR-NBR using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Like",
						"in": "query",
						"description": "Filter on DNR-NBR using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotLike",
						"in": "query",
						"description": "Filter on DNR-NBR using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Contains",
						"in": "query",
						"description": "Filter on DNR-NBR using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotContains",
						"in": "query",
						"description": "Filter on DNR-NBR using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.StartsWith",
						"in": "query",
						"description": "Filter on DNR-NBR using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on DNR-NBR using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.EndsWith",
						"in": "query",
						"description": "Filter on DNR-NBR using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on DNR-NBR using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.In",
						"in": "query",
						"description": "Filter on DNR-NBR using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "BillToCustomerNumber.Between",
						"in": "query",
						"description": "Filter on DNR-NBR using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber.NotEqual",
						"in": "query",
						"description": "Filter on REF-CTM using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber.Less",
						"in": "query",
						"description": "Filter on REF-CTM using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber.LessOrEqual",
						"in": "query",
						"description": "Filter on REF-CTM using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber.Greater",
						"in": "query",
						"description": "Filter on REF-CTM using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber.GreaterOrEqual",
						"in": "query",
						"description": "Filter on REF-CTM using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber.IsNull",
						"in": "query",
						"description": "Filter on REF-CTM using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber.IsNotNull",
						"in": "query",
						"description": "Filter on REF-CTM using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber.Like",
						"in": "query",
						"description": "Filter on REF-CTM using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber.NotLike",
						"in": "query",
						"description": "Filter on REF-CTM using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber.Contains",
						"in": "query",
						"description": "Filter on REF-CTM using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber.NotContains",
						"in": "query",
						"description": "Filter on REF-CTM using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber.StartsWith",
						"in": "query",
						"description": "Filter on REF-CTM using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber.NotStartsWith",
						"in": "query",
						"description": "Filter on REF-CTM using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber.EndsWith",
						"in": "query",
						"description": "Filter on REF-CTM using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber.NotEndsWith",
						"in": "query",
						"description": "Filter on REF-CTM using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber.In",
						"in": "query",
						"description": "Filter on REF-CTM using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "ReferredByCustomerNumber.Between",
						"in": "query",
						"description": "Filter on REF-CTM using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode.NotEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode.Less",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode.LessOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode.Greater",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode.GreaterOrEqual",
						"in": "query",
						"description": "Filter on BIL-ORG using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode.IsNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode.IsNotNull",
						"in": "query",
						"description": "Filter on BIL-ORG using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode.Like",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode.NotLike",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode.Contains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode.NotContains",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode.StartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode.NotStartsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode.EndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode.NotEndsWith",
						"in": "query",
						"description": "Filter on BIL-ORG using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode.In",
						"in": "query",
						"description": "Filter on BIL-ORG using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "OwningOrganizationCode.Between",
						"in": "query",
						"description": "Filter on BIL-ORG using 'Between' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus.NotEqual",
						"in": "query",
						"description": "Filter on CRC-STS using 'NotEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus.Less",
						"in": "query",
						"description": "Filter on CRC-STS using 'Less' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus.LessOrEqual",
						"in": "query",
						"description": "Filter on CRC-STS using 'LessOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus.Greater",
						"in": "query",
						"description": "Filter on CRC-STS using 'Greater' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus.GreaterOrEqual",
						"in": "query",
						"description": "Filter on CRC-STS using 'GreaterOrEqual' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus.IsNull",
						"in": "query",
						"description": "Filter on CRC-STS using 'IsNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus.IsNotNull",
						"in": "query",
						"description": "Filter on CRC-STS using 'IsNotNull' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus.Like",
						"in": "query",
						"description": "Filter on CRC-STS using 'Like' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus.NotLike",
						"in": "query",
						"description": "Filter on CRC-STS using 'NotLike' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus.Contains",
						"in": "query",
						"description": "Filter on CRC-STS using 'Contains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus.NotContains",
						"in": "query",
						"description": "Filter on CRC-STS using 'NotContains' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus.StartsWith",
						"in": "query",
						"description": "Filter on CRC-STS using 'StartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus.NotStartsWith",
						"in": "query",
						"description": "Filter on CRC-STS using 'NotStartsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus.EndsWith",
						"in": "query",
						"description": "Filter on CRC-STS using 'EndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus.NotEndsWith",
						"in": "query",
						"description": "Filter on CRC-STS using 'NotEndsWith' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus.In",
						"in": "query",
						"description": "Filter on CRC-STS using 'In' operator",
						"required": false,
						"type": "string"
					},
					{
						"name": "CirculationStatus.Between",
						"in": "query",
						"description": "Filter on CRC-STS using 'Between' operator",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Subscription]"
						}
					}
				}
			}
		},
		"/orders/{orderNumber}/upsells": {
			"get": {
				"tags": [
					"Upsell"
				],
				"summary": "Get the upsell items for an order.",
				"operationId": "Upsell_GetByOrder",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "orderNumber",
						"in": "path",
						"description": "The order number of the order to use to return the upsell items.",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.upsellTypes",
						"in": "query",
						"description": "What types of upsell items should be returned?",
						"required": false,
						"type": "string",
						"enum": [
							"Default",
							"UpsellItems",
							"ExpiringSubscriptions"
						]
					},
					{
						"name": "filter.webOnly",
						"in": "query",
						"description": "Include only upsells marked as \"web visible\"?  (This is the default.)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Upsell]"
						}
					}
				}
			}
		},
		"/shopping-carts/{cartId}/upsells": {
			"get": {
				"tags": [
					"Upsell"
				],
				"summary": "Get the upsell items for a shopping cart.",
				"operationId": "Upsell_GetByCart",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "cartId",
						"in": "path",
						"description": "The shopping cart ID to use to return the upsell items.",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.upsellTypes",
						"in": "query",
						"description": "What types of upsell items should be returned?",
						"required": false,
						"type": "string",
						"enum": [
							"Default",
							"UpsellItems",
							"ExpiringSubscriptions"
						]
					},
					{
						"name": "filter.webOnly",
						"in": "query",
						"description": "Include only upsells marked as \"web visible\"?  (This is the default.)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Upsell]"
						}
					}
				}
			}
		},
		"/customers/{customerNumber}/upsells": {
			"get": {
				"tags": [
					"Upsell"
				],
				"summary": "Get the upsell items for a given customer.",
				"operationId": "Upsell_GetByCustomer",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "customerNumber",
						"in": "path",
						"description": "Find upsells triggered for this customer. (An Advantage customer number.)",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.upsellTypes",
						"in": "query",
						"description": "What types of upsell items should be returned?",
						"required": false,
						"type": "string",
						"enum": [
							"Default",
							"UpsellItems",
							"ExpiringSubscriptions"
						]
					},
					{
						"name": "filter.webOnly",
						"in": "query",
						"description": "Include only upsells marked as \"web visible\"?  (This is the default.)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Upsell]"
						}
					}
				}
			}
		},
		"/products/{itemNumber}/upsells": {
			"get": {
				"tags": [
					"Upsell"
				],
				"summary": "Get the upsell items for a product.  Optionally include upsells triggered by a specific promotion code as well.",
				"operationId": "Upsell_GetByProduct",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "itemNumber",
						"in": "path",
						"description": "Find upsells triggered by this item.",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.orderNumber",
						"in": "query",
						"description": "Do not upsell items already included on the given order.  (Optional)",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.cartNumber",
						"in": "query",
						"description": "Do not upsell items already included in the given shopping cart. (Optional.)",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.customerNumber",
						"in": "query",
						"description": "The customer who will see the upsell.  (Optional)",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.promotionCode",
						"in": "query",
						"description": "Also search for upsells triggered by this promotion.  (Optional)",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.upsellTypes",
						"in": "query",
						"description": "What types of upsell items should be returned?",
						"required": false,
						"type": "string",
						"enum": [
							"Default",
							"UpsellItems",
							"ExpiringSubscriptions"
						]
					},
					{
						"name": "filter.webOnly",
						"in": "query",
						"description": "Include only upsells marked as \"web visible\"?  (This is the default.)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Upsell]"
						}
					}
				}
			}
		},
		"/promotions/{promotionCode}/upsells": {
			"get": {
				"tags": [
					"Upsell"
				],
				"summary": "Get the upsell items for a product.  Optionally include promotions triggered by a specific promotion code as well.",
				"operationId": "Upsell_GetByPromotion",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "promotionCode",
						"in": "path",
						"description": "Find upsells triggered by this promotion.",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.orderNumber",
						"in": "query",
						"description": "Do not upsell items already included on the given order.  (Optional.)",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.cartNumber",
						"in": "query",
						"description": "Do not upsell items already included in the given shopping cart. (Optional.)",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.customerNumber",
						"in": "query",
						"description": "The customer who will see the upsell.  (Optional.)",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.itemNumber",
						"in": "query",
						"description": "The product use for the \"must purchase\" check on the upsells.  (Optional)",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.upsellTypes",
						"in": "query",
						"description": "What types of upsell items should be returned?",
						"required": false,
						"type": "string",
						"enum": [
							"Default",
							"UpsellItems",
							"ExpiringSubscriptions"
						]
					},
					{
						"name": "filter.webOnly",
						"in": "query",
						"description": "Include only upsells marked as \"web visible\"?  (This is the default.)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Upsell]"
						}
					}
				}
			}
		},
		"/promotions/{promotionCode}/choices/{itemNumber}/{choiceCode}/upsells": {
			"get": {
				"tags": [
					"Upsell"
				],
				"summary": "Get the upsell items for a promotion choice.",
				"operationId": "Upsell_GetByPromotionChoice",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "promotionCode",
						"in": "path",
						"description": "The triggering promotion code.",
						"required": true,
						"type": "string"
					},
					{
						"name": "itemNumber",
						"in": "path",
						"description": "The triggering item number.",
						"required": true,
						"type": "string"
					},
					{
						"name": "choiceCode",
						"in": "path",
						"description": "The triggering promotion choice.",
						"required": true,
						"type": "string"
					},
					{
						"name": "filter.orderNumber",
						"in": "query",
						"description": "Do not upsell items already included on the given order.  (Optional.  No used when listing promotions by order.)",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.cartNumber",
						"in": "query",
						"description": "Do not upsell items already included in the given shopping cart. (Optional.)",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.customerNumber",
						"in": "query",
						"description": "The customer who will see the upsell.  (Optional.  Not used when listing promotions by customer.)",
						"required": false,
						"type": "string"
					},
					{
						"name": "filter.upsellTypes",
						"in": "query",
						"description": "What types of upsell items should be returned?",
						"required": false,
						"type": "string",
						"enum": [
							"Default",
							"UpsellItems",
							"ExpiringSubscriptions"
						]
					},
					{
						"name": "filter.webOnly",
						"in": "query",
						"description": "Include only upsells marked as \"web visible\"?  (This is the default.)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/SearchResult[Upsell]"
						}
					}
				}
			}
		},
		"/users/{authenticationGroup}/{username}": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "Get the user based on username.",
				"operationId": "User_Get",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "authenticationGroup",
						"in": "path",
						"description": "The authentication group for the user.  We recommend that you do not \r\n            use blank authentication groups. If you need to use a blank authentication group for legacy data then \r\n            pass the string \"blank\".",
						"required": true,
						"type": "string"
					},
					{
						"name": "username",
						"in": "path",
						"description": "The username to find.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				}
			},
			"post": {
				"tags": [
					"User"
				],
				"summary": "Update an existing user.",
				"operationId": "User_Update",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "authenticationGroup",
						"in": "path",
						"description": "The authentication group for the user.  We recommend that you do \r\n            not use blank authentication groups. If you need to use a blank authentication group for legacy \r\n            data then pass the string \"blank\".",
						"required": true,
						"type": "string"
					},
					{
						"name": "username",
						"in": "path",
						"description": "The username of the user to update.",
						"required": true,
						"type": "string"
					},
					{
						"name": "userUpdateRequest",
						"in": "body",
						"description": "The information needed to update the user. The username and/or password.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UserUpdateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/users/{authenticationGroup}/by-authentication-type/{authenticationType}/{authenticationValue}": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "Get the user based on authentication type (e.g. Google, Facebook, Shibboleth) and authentication value",
				"operationId": "User_GetByAuthenticationType",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "authenticationGroup",
						"in": "path",
						"description": "The authentication group for the user.  We recommend that you do not \r\n            use blank authentication groups. If you need to use a blank authentication group for legacy data then \r\n            pass the string \"blank\".",
						"required": true,
						"type": "string"
					},
					{
						"name": "authenticationType",
						"in": "path",
						"description": "Authentication type (e.g. E=Email, G=Google)",
						"required": true,
						"type": "string"
					},
					{
						"name": "authenticationValue",
						"in": "path",
						"description": "The authentication value is a unique value that identifies the user (e.g. email address)",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				}
			}
		},
		"/users": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Create a new user.",
				"operationId": "User_Create",
				"consumes": [
					"application/json",
					"text/json",
					"text/html",
					"application/x-www-form-urlencoded"
				],
				"produces": [],
				"parameters": [
					{
						"name": "userLoginCreateRequest",
						"in": "body",
						"description": "A UserLoginCreateRequest object.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UserLoginCreateRequest"
						}
					}
				],
				"responses": {
					"204": {
						"description": "No Content"
					}
				}
			}
		},
		"/users/by-authentication-number/{authenticationNumber}": {
			"get": {
				"tags": [
					"User"
				],
				"summary": "Get the user based on unique authentication number",
				"operationId": "User_GetByAuthenticationNumber",
				"consumes": [],
				"produces": [
					"application/json",
					"text/json",
					"text/html"
				],
				"parameters": [
					{
						"name": "authenticationNumber",
						"in": "path",
						"description": "Authentication number (CVI-NBR).",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/User"
						}
					}
				}
			}
		}
	},
	"definitions": {
		"Client": {
			"description": "This class is part of the CSL module.  It is used internally at ACS.\r\nRepresents an ACS client.",
			"type": "object",
			"properties": {
				"Number": {
					"description": "The customer number for the client",
					"type": "string"
				},
				"Code": {
					"description": "The abbreviation for the client",
					"type": "string"
				},
				"Name": {
					"description": "The company name for the client",
					"type": "string"
				},
				"DefaultJob": {
					"description": "The default job code for the client's support requests",
					"type": "string"
				},
				"DefaultEstimate": {
					"format": "int32",
					"description": "The default estimate for the client's support requests",
					"type": "integer"
				},
				"Areas": {
					"description": "The client's areas",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ClientArea"
					}
				},
				"Contacts": {
					"description": "The client's contact people",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ClientContact"
					}
				},
				"Jobs": {
					"description": "The client's jobs",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ClientJob"
					}
				}
			}
		},
		"ClientArea": {
			"description": "This class is part of the CSL module.  It is used internally at ACS.\r\nRepresents an ACS client area.",
			"type": "object",
			"properties": {
				"ClientNumber": {
					"description": "The customer number of the client",
					"type": "string"
				},
				"Code": {
					"description": "A unique code identifying the client area",
					"type": "string"
				},
				"Name": {
					"description": "The name of the client area",
					"type": "string"
				},
				"CustomBranchName": {
					"description": "The branch name for the client area.  The value will be null if the client is not on a custom branch.",
					"type": "string"
				},
				"ExpirationDate": {
					"format": "date-time",
					"description": "The license expiration date for the client area",
					"type": "string"
				},
				"RevisionName": {
					"description": "The formatted revision number for the client area",
					"type": "string"
				},
				"RevisionCode": {
					"description": "The revision number for the client area",
					"type": "string"
				},
				"ServerName": {
					"description": "The server name for the client area",
					"type": "string"
				},
				"VersionNumber": {
					"description": "The full version number (xxxx.xx.xxxx) for the client area",
					"type": "string"
				}
			}
		},
		"ClientContact": {
			"description": "This class is part of the CSL module.  It is used internally at ACS.\r\nRepresents an ACS client contact person.",
			"type": "object",
			"properties": {
				"ClientNumber": {
					"description": "The customer number of the client",
					"type": "string"
				},
				"Number": {
					"description": "The customer number of the contact person",
					"type": "string"
				},
				"AddressCode": {
					"description": "The address code of the contact person",
					"type": "string"
				},
				"Email": {
					"description": "The email address of the contact person",
					"type": "string"
				},
				"JobTitle": {
					"description": "The job title of the contact person",
					"type": "string"
				},
				"Name": {
					"description": "The full name of the contact person",
					"type": "string"
				},
				"PhoneNumber": {
					"description": "The phone number of the contact person",
					"type": "string"
				},
				"Role": {
					"description": "The role of the contact person",
					"type": "string"
				}
			}
		},
		"ClientJob": {
			"description": "This class is part of the CSL module.  It is used internally at ACS.\r\nRepresents an ACS client job.",
			"type": "object",
			"properties": {
				"ClientNumber": {
					"description": "The customer number of the client",
					"type": "string"
				},
				"Code": {
					"description": "The code for the client job",
					"type": "string"
				},
				"Name": {
					"description": "The name for the client job",
					"type": "string"
				},
				"ContactEmail": {
					"description": "The ACS contact email address for the client job",
					"type": "string"
				},
				"IsWebEnabled": {
					"description": "Is the client job web enabled?",
					"type": "boolean"
				},
				"IsWebVisible": {
					"description": "Is the client job web visible?",
					"type": "boolean"
				},
				"ProductCode": {
					"description": "The product code for the client job",
					"type": "string"
				},
				"Priority": {
					"format": "int32",
					"description": "The priority for the client job.  A client job can be assigned a priority value greater than zero to boost the urgency of the tasks\r\nin this job.",
					"type": "integer"
				},
				"TimesheetStatus": {
					"description": "The timesheet status for the client job",
					"enum": [
						"ClosedToTimesheetEntry",
						"ClosedToCslEntry"
					],
					"type": "string"
				}
			}
		},
		"SupportLogCreateRequest": {
			"description": "Information needed to request the creation of a client support log.",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "The customer number of the client who requested support",
					"type": "string"
				},
				"ActivityCategoryCode": {
					"description": "The activity category for the support log",
					"type": "string"
				},
				"AnalystCode": {
					"description": "The user code of the analyst who is assigned to work on the support log",
					"type": "string"
				},
				"AreaCode": {
					"description": "The client area where the problem is occurring",
					"type": "string"
				},
				"ClientContactNumber": {
					"description": "The customer number of the client contact for the support log",
					"type": "string"
				},
				"ClientProjectId": {
					"description": "The client project id for the support log",
					"type": "string"
				},
				"ClientTaskNumber": {
					"description": "The client task number for the support log",
					"type": "string"
				},
				"Name": {
					"description": "The description of the support log",
					"type": "string"
				},
				"DiscountHours": {
					"format": "double",
					"description": "The number of hours that were discounted for the support log",
					"type": "number"
				},
				"DiscountPercent": {
					"format": "double",
					"description": "The discount percent for the support log",
					"type": "number"
				},
				"EngineerCode": {
					"description": "The user code for the engineer assigned to work on the support log",
					"type": "string"
				},
				"EstimatedHours": {
					"format": "double",
					"description": "The estimated number of hours to be spent on the support log",
					"type": "number"
				},
				"JobCode": {
					"description": "The job code for the support log",
					"type": "string"
				},
				"LeadEngineerCode": {
					"description": "The lead engineer is used to identify which engineering team a support log is assigned to",
					"type": "string"
				},
				"Priority": {
					"description": "The urgency level of the support log",
					"enum": [
						"DeadInTheWater",
						"MustHaveByTarget",
						"DesiredByTarget",
						"OkPastTarget"
					],
					"type": "string"
				},
				"ProblemCode": {
					"description": "The problem code of the support log",
					"type": "string"
				},
				"Program": {
					"description": "The program where the problem is occurring",
					"type": "string"
				},
				"ResearchAndDevelopmentType": {
					"description": "The research and development type for the support log",
					"enum": [
						"Capitalized",
						"NonResearchAndDevelopment",
						"NonDevelopment",
						"ResearchAndDevelopment"
					],
					"type": "string"
				},
				"StatusCode": {
					"description": "The status of the support log",
					"type": "string"
				},
				"SwatReasonCode": {
					"description": "The SWAT reason for the support log.  This is used to describe why the work done on a task is non-billable.",
					"type": "string"
				},
				"TargetDate": {
					"format": "date-time",
					"description": "The date targeted for completion of the support log",
					"type": "string"
				},
				"ClientTrackingCode": {
					"description": "The tracking code for the support log",
					"type": "string"
				}
			}
		},
		"SupportLogCreateResponse": {
			"description": "The information received in response to a client support log creation request.",
			"type": "object",
			"properties": {
				"CslNumber": {
					"description": "The client support log (CSL) number is a unique number that identifies a support request",
					"type": "string"
				}
			}
		},
		"SupportLogComparison": {
			"description": "A filter to apply to a support log search",
			"type": "object",
			"properties": {
				"Field": {
					"description": "Name of field in table to compare",
					"enum": [
						"ActivityCategory",
						"AnalystCode",
						"CreationDate",
						"ClientNumber",
						"EngineerCode",
						"IsModification",
						"JobCode",
						"LeadEngineerCode",
						"StatusCode",
						"UpdateDate"
					],
					"type": "string"
				},
				"Operator": {
					"description": "Operator to use in comparison",
					"enum": [
						"Equal",
						"NotEqual",
						"Less",
						"LessOrEqual",
						"Greater",
						"GreaterOrEqual",
						"IsNull",
						"IsNotNull",
						"Like",
						"NotLike",
						"Contains",
						"NotContains",
						"StartsWith",
						"NotStartsWith",
						"EndsWith",
						"NotEndsWith",
						"In",
						"Between"
					],
					"type": "string"
				},
				"Value": {
					"description": "Value to compare the field to; specify comma separated values if the operator is \"In\"",
					"type": "string"
				}
			}
		},
		"PaginationSettings": {
			"description": "Pagination settings",
			"type": "object",
			"properties": {
				"Skip": {
					"format": "int32",
					"description": "The number of records to skip.",
					"type": "integer"
				},
				"Take": {
					"format": "int32",
					"description": "The number of records to return.",
					"type": "integer"
				}
			}
		},
		"SearchResult[SupportLog]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/SupportLog"
					}
				}
			}
		},
		"SupportLog": {
			"description": "This class is part of the CSL module.  It is used internally at ACS.\r\nRepresents an ACS client support log.",
			"type": "object",
			"properties": {
				"CslNumber": {
					"description": "The client support log (CSL) number is a unique number that identifies a support request",
					"type": "string"
				},
				"Name": {
					"description": "The description of the support log",
					"type": "string"
				},
				"Client": {
					"$ref": "#/definitions/ClientSummary",
					"description": "The client who requested support"
				},
				"ActivityCategoryCode": {
					"description": "The activity category for the support log",
					"type": "string"
				},
				"ActualHours": {
					"format": "double",
					"description": "The actual number of hours that have been spent on the support log",
					"type": "number"
				},
				"Analyst": {
					"$ref": "#/definitions/AcsEmployee",
					"description": "The analyst who is assigned to work on the support log"
				},
				"AreaCode": {
					"description": "The client area where the problem is occurring",
					"type": "string"
				},
				"Contact": {
					"$ref": "#/definitions/ClientContactSummary",
					"description": "The client contact for the support log"
				},
				"ClientProjectId": {
					"description": "The client project id for the support log",
					"type": "string"
				},
				"ClientTaskNumber": {
					"description": "The client task number for the support log",
					"type": "string"
				},
				"Configuration": {
					"description": "The configuration information for the support log",
					"type": "string"
				},
				"CreationDate": {
					"format": "date-time",
					"description": "The date the support log was created",
					"type": "string"
				},
				"CreationUser": {
					"description": "The user code of the user who created the support log",
					"type": "string"
				},
				"DateCompleted": {
					"format": "date-time",
					"description": "The date the support log was marked complete",
					"type": "string"
				},
				"DiscountHours": {
					"format": "double",
					"description": "The number of hours that were discounted for the support log",
					"type": "number"
				},
				"DiscountPercent": {
					"format": "double",
					"description": "The discount percent for the support log",
					"type": "number"
				},
				"Engineer": {
					"$ref": "#/definitions/AcsEmployee",
					"description": "The engineer assigned to work on the support log"
				},
				"EstimatedHours": {
					"format": "double",
					"description": "The estimated number of hours to be spent on the support log",
					"type": "number"
				},
				"IsBillable": {
					"description": "Is time spent working on this support log billable?",
					"type": "boolean"
				},
				"IsWebVisible": {
					"description": "Should this support log be visible from the support website?",
					"type": "boolean"
				},
				"JobCode": {
					"description": "The job code for the support log",
					"type": "string"
				},
				"LeadEngineer": {
					"$ref": "#/definitions/AcsEmployee",
					"description": "The lead engineer is used to identify which engineering team a support log is assigned to"
				},
				"PostedHours": {
					"format": "double",
					"description": "The number of hours spent on the support log that have been posted",
					"type": "number"
				},
				"Priority": {
					"description": "The urgency level of the support log",
					"enum": [
						"DeadInTheWater",
						"MustHaveByTarget",
						"DesiredByTarget",
						"OkPastTarget"
					],
					"type": "string"
				},
				"ProblemCode": {
					"description": "The problem code of the support log",
					"type": "string"
				},
				"Program": {
					"description": "The program where the problem is occurring",
					"type": "string"
				},
				"ResearchAndDevelopmentType": {
					"description": "The research and development type for the support log",
					"enum": [
						"Capitalized",
						"NonResearchAndDevelopment",
						"NonDevelopment",
						"ResearchAndDevelopment"
					],
					"type": "string"
				},
				"StatusCode": {
					"description": "The status of the support log",
					"type": "string"
				},
				"StatusUpdateDate": {
					"format": "date-time",
					"description": "The date the status was last updated",
					"type": "string"
				},
				"SwatReasonCode": {
					"description": "The SWAT reason for the support log.  This is used to describe why the work done on a task is non-billable.",
					"type": "string"
				},
				"TargetDate": {
					"format": "date-time",
					"description": "The date targeted for completion of the support log",
					"type": "string"
				},
				"TargetRevision": {
					"description": "The revision that is being targeted for a modification support log",
					"type": "string"
				},
				"TrackingCode": {
					"description": "The tracking code for the support log",
					"type": "string"
				},
				"UpdateDate": {
					"format": "date-time",
					"description": "The date the support log was last updated",
					"type": "string"
				},
				"UpdateUser": {
					"description": "The user who last updated the support log",
					"type": "string"
				},
				"Modification": {
					"$ref": "#/definitions/ModificationTracking",
					"description": "Information about modification support tasks"
				},
				"Attachments": {
					"description": "Files that have been attached to the client support log",
					"type": "array",
					"items": {
						"$ref": "#/definitions/SupportLogAttachment"
					}
				},
				"Comments": {
					"description": "Comments that have been added to the client support log",
					"type": "array",
					"items": {
						"$ref": "#/definitions/SupportLogComment"
					}
				},
				"WorkItems": {
					"description": "Work items that have been added to the client support log",
					"type": "array",
					"items": {
						"$ref": "#/definitions/TeamFoundationWorkItem"
					}
				}
			}
		},
		"ClientSummary": {
			"description": "Information about the client who requested support",
			"type": "object",
			"properties": {
				"Number": {
					"description": "The customer number of the client who requested support",
					"type": "string"
				},
				"Code": {
					"description": "The three character abbreviation of the client who the support log was created for",
					"type": "string"
				},
				"Name": {
					"description": "The company name of the client who requested support",
					"type": "string"
				}
			}
		},
		"AcsEmployee": {
			"description": "Information about an ACS employee",
			"type": "object",
			"properties": {
				"Code": {
					"description": "User code",
					"type": "string"
				},
				"Name": {
					"description": "Employee name",
					"type": "string"
				}
			}
		},
		"ClientContactSummary": {
			"description": "Information about the client contact for the support log",
			"type": "object",
			"properties": {
				"Number": {
					"description": "The customer number of the client contact for the support log",
					"type": "string"
				},
				"Name": {
					"description": "The name of the client contact for the support log",
					"type": "string"
				},
				"Email": {
					"description": "The email of the client contact for the support log",
					"type": "string"
				}
			}
		},
		"ModificationTracking": {
			"description": "Information that's used to track modification information",
			"type": "object",
			"properties": {
				"IsModification": {
					"description": "Is the support log for a modification?",
					"type": "boolean"
				},
				"ApprovalDate": {
					"format": "date-time",
					"description": "The date a modification support log was approved",
					"type": "string"
				},
				"BaseFlag": {
					"description": "The base flag indicates whether a modification is base, client specific, or a combination",
					"enum": [
						"Base",
						"ClientSpecific",
						"Hybrid"
					],
					"type": "string"
				},
				"DeclinedDate": {
					"format": "date-time",
					"description": "The date a modification support log was declined",
					"type": "string"
				},
				"DeclineReason": {
					"description": "The reason a modification support log was declined",
					"type": "string"
				},
				"IsApprovalViaEmail": {
					"description": "Was the approval for a modification support log received via email?",
					"type": "boolean"
				},
				"IsFixedCost": {
					"description": "Is work on this modification support log billed at a fixed cost to the client?",
					"type": "boolean"
				},
				"ModificationStatus": {
					"description": "The status of a modification support log",
					"enum": [
						"Approved",
						"Declined",
						"EstimateRequested",
						"NotApproved",
						"SpecificationRequested"
					],
					"type": "string"
				},
				"PrimaryModule": {
					"description": "The primary module that will be affected by a modification support log",
					"type": "string"
				},
				"RetrofitRevision": {
					"description": "The revision to retrofit a modification to",
					"type": "string"
				},
				"SpecificationDate": {
					"format": "date-time",
					"description": "The date a modification specification document was created for a support log",
					"type": "string"
				},
				"SpecificationCreatedBy": {
					"description": "The user code of the user who created the modification specification document for a support log",
					"type": "string"
				}
			}
		},
		"SupportLogAttachment": {
			"description": "This class is part of the CSL module.  It is used internally at ACS.\r\nRepresents an ACS client support log file attachment.",
			"type": "object",
			"properties": {
				"Id": {
					"description": "The attachment ID is a unique number to identify a file that is related to a support request",
					"type": "string"
				},
				"AttachmentType": {
					"description": "The attachment type for the CSL attachment",
					"type": "string"
				},
				"CreationContactNumber": {
					"description": "The customer number of the client contact person who created the attachment",
					"type": "string"
				},
				"CreationDate": {
					"format": "date-time",
					"description": "The date the CSL attachment was created",
					"type": "string"
				},
				"FileName": {
					"description": "The file name for the CSL attachment",
					"type": "string"
				},
				"DownloadUrl": {
					"description": "The URL to use to download the attachment",
					"type": "string"
				}
			}
		},
		"SupportLogComment": {
			"description": "This class is part of the CSL module.  It is used internally at ACS.\r\nRepresents an ACS client support log comment.  Comments may have been created\r\nby either an Advantage user or a client contact person.",
			"type": "object",
			"properties": {
				"CommentId": {
					"description": "The comment ID is a unique number to identify CSL comment",
					"type": "string"
				},
				"CommentType": {
					"description": "The type of comment",
					"type": "string"
				},
				"Contact": {
					"$ref": "#/definitions/ClientContactSummary",
					"description": "The client contact who created the comment"
				},
				"CreationDate": {
					"format": "date-time",
					"description": "The date the comment was created",
					"type": "string"
				},
				"CreationUser": {
					"description": "The user code of the Advantage user who created the comment",
					"type": "string"
				},
				"Text": {
					"description": "The comment text",
					"type": "string"
				},
				"UpdateDate": {
					"format": "date-time",
					"description": "The Date and Time in UTC that the comment was last update",
					"type": "string"
				},
				"UpdateUser": {
					"description": "The user code of the Advantage user who last updated the comment",
					"type": "string"
				}
			}
		},
		"TeamFoundationWorkItem": {
			"description": "This class is part of the CSL module.  It is used internally at ACS.\r\nRepresents a team foundation work item",
			"type": "object",
			"properties": {
				"WorkItemId": {
					"format": "int32",
					"description": "The unique identification number for the work item",
					"type": "integer"
				},
				"ActivatedDate": {
					"format": "date-time",
					"description": "The date and time the work item was activated",
					"type": "string"
				},
				"AreaId": {
					"format": "int32",
					"description": "The area id for the work item",
					"type": "integer"
				},
				"AreaPath": {
					"description": "The area path for the work item",
					"type": "string"
				},
				"AssignedTo": {
					"description": "The person who the work item is assigned to",
					"type": "string"
				},
				"BacklogPriority": {
					"format": "double",
					"description": "The Backlog Priority for the work item",
					"type": "number"
				},
				"ChangedBy": {
					"description": "The person who last changed the work item",
					"type": "string"
				},
				"ChangedDate": {
					"format": "date-time",
					"description": "The date and time that the work item was last changed",
					"type": "string"
				},
				"ClientAbbreviation": {
					"description": "The client who is associated with the work item",
					"type": "string"
				},
				"CreatedBy": {
					"description": "The person who created the work item",
					"type": "string"
				},
				"CreatedDate": {
					"format": "date-time",
					"description": "The date and time that the work item was created.",
					"type": "string"
				},
				"CslNumber": {
					"description": "The CSL number that is associated with the work item",
					"type": "string"
				},
				"Description": {
					"description": "The description of the work item",
					"type": "string"
				},
				"History": {
					"description": "The History for the work item",
					"type": "string"
				},
				"IterationId": {
					"format": "int32",
					"description": "The iteration ID of the work item",
					"type": "integer"
				},
				"IterationPath": {
					"description": "The iteration path of the work item",
					"type": "string"
				},
				"NodeName": {
					"description": "The node name for the work item",
					"type": "string"
				},
				"ResolvedReason": {
					"description": "The reason the work item was marked as Resolved",
					"type": "string"
				},
				"RevisedDate": {
					"format": "date-time",
					"description": "The date and time the work item was revised",
					"type": "string"
				},
				"Revision": {
					"format": "int32",
					"description": "The revision number of the work item",
					"type": "integer"
				},
				"State": {
					"description": "A string that describes the state of the work item",
					"type": "string"
				},
				"Tags": {
					"description": "The tags associated with the work item",
					"type": "string"
				},
				"Title": {
					"description": "The title of the work item",
					"type": "string"
				},
				"Url": {
					"description": "The URL for the work item",
					"type": "string"
				}
			}
		},
		"SupportLogCommentCreateRequest": {
			"description": "This class is part of the CSL module.  It is used internally at ACS.\r\nInformation needed to create a CSL comment.  If the comment is being added by\r\nan ACS user, the CreationUser should be specified.  If the comment is being\r\nadded by a client contact, the ContactNumber should be specified.",
			"type": "object",
			"properties": {
				"CommentType": {
					"description": "The type of comment",
					"type": "string"
				},
				"ContactNumber": {
					"description": "The customer number of the contact person who created the comment",
					"type": "string"
				},
				"CreationUser": {
					"description": "The user code of the Advantage user who created the comment",
					"type": "string"
				},
				"Text": {
					"description": "The comment text",
					"type": "string"
				}
			}
		},
		"SupportLogCommentCreateResponse": {
			"description": "The information received in response to a client support log comment creation request.",
			"type": "object",
			"properties": {
				"CommentId": {
					"description": "The comment id is a unique number that identifies a client support log comment",
					"type": "string"
				}
			}
		},
		"GetUserSettingResponse": {
			"description": "Model for getting a user setting",
			"type": "object",
			"properties": {
				"UserSetting": {
					"description": "The User Setting",
					"type": "string"
				}
			}
		},
		"SetUserSettingRequest": {
			"description": "Model for setting a user setting",
			"type": "object",
			"properties": {
				"UserValueName": {
					"$ref": "#/definitions/UserValueName",
					"description": "Name of the user setting to return"
				},
				"UserSetting": {
					"description": "The User Setting",
					"type": "string"
				}
			}
		},
		"UserValueName": {
			"description": "Model for combining the three parts of the user value name",
			"type": "object",
			"properties": {
				"Name1": {
					"description": "The user value name 1",
					"type": "string"
				},
				"Name2": {
					"description": "The user value name 1",
					"type": "string"
				},
				"Name3": {
					"description": "The user value name 1",
					"type": "string"
				}
			}
		},
		"Agreement": {
			"description": "Information about a customer's existing agreement.",
			"type": "object",
			"properties": {
				"AccessExpires": {
					"format": "date-time",
					"description": "Access Expire date.",
					"type": "string"
				},
				"AdjustmentDays": {
					"format": "int32",
					"description": "Returns the number of adjustment days",
					"type": "integer"
				},
				"AgreementDays": {
					"format": "int32",
					"description": "Returns number of days.",
					"type": "integer"
				},
				"AgreementId": {
					"description": "Agreement ID.",
					"type": "string"
				},
				"AgreementType": {
					"description": "Agreement type.",
					"enum": [
						"Complimentary",
						"Invoiceable",
						"Proforma",
						"Trial"
					],
					"type": "string"
				},
				"AutorenewChainId": {
					"description": "Auto-Renew Chain ID.",
					"type": "string"
				},
				"AutorenewChainSequence": {
					"format": "int32",
					"description": "Auto-Renew Chain Sequence.",
					"type": "integer"
				},
				"BillingCurrencyCode": {
					"description": "The currency code of the currency to bill the order in.",
					"type": "string"
				},
				"BillTo": {
					"$ref": "#/definitions/CustomerAddressSummary",
					"description": "The bill-to customer"
				},
				"CancellationReasonCode": {
					"description": "Cancellation Reason Code.",
					"type": "string"
				},
				"LastRenewalPromotionCode": {
					"description": "Last Renewal Promotion.",
					"type": "string"
				},
				"LastRenewed": {
					"format": "date-time",
					"description": "Last Renewal Date.",
					"type": "string"
				},
				"DirectDebitRequestId": {
					"description": "The recurring payment number on the agreement.",
					"type": "string"
				},
				"IsUsageBased": {
					"description": "The usage-based flag on the agreement.",
					"type": "boolean"
				},
				"CreditDays": {
					"format": "int32",
					"description": "Returns the number of credit days.",
					"type": "integer"
				},
				"DiscountAmount": {
					"format": "double",
					"description": "The discount amount.",
					"type": "number"
				},
				"TermExpires": {
					"format": "date-time",
					"description": "Expire date.",
					"type": "string"
				},
				"ExtensionDays": {
					"format": "int32",
					"description": "Returns the number of Extension Days.",
					"type": "integer"
				},
				"AgreementExpires": {
					"format": "date-time",
					"description": "Final expire date.",
					"type": "string"
				},
				"FreeDays": {
					"format": "int32",
					"description": "Returns the number of Pre Free Days.",
					"type": "integer"
				},
				"GraceDays": {
					"format": "int32",
					"description": "Returns the number of grace days.",
					"type": "integer"
				},
				"IsBillingSuspended": {
					"description": "Returns true if billing suspended.",
					"type": "boolean"
				},
				"IsComplimentary": {
					"description": "Returns true if complimentary.",
					"type": "boolean"
				},
				"IsEulaAccepted": {
					"description": "true if EULA is accepted.",
					"type": "boolean"
				},
				"IsInvoiceable": {
					"description": "Returns true if invoiceable.",
					"type": "boolean"
				},
				"IsPosted": {
					"description": "Returns true if posted.",
					"type": "boolean"
				},
				"IsProforma": {
					"description": "Returns true if proforma.",
					"type": "boolean"
				},
				"IsReleased": {
					"description": "Has the agreement been released?",
					"type": "boolean"
				},
				"IsSuspended": {
					"description": "Returns true if suspended.",
					"type": "boolean"
				},
				"IsTermPaid": {
					"description": "Returns true if the Term is completely paid.",
					"type": "boolean"
				},
				"IsTrial": {
					"description": "Returns true if trial.",
					"type": "boolean"
				},
				"IsVersionPaid": {
					"description": "Returns true if the Version is totally paid.",
					"type": "boolean"
				},
				"LinkedPremiums": {
					"description": "Returns a list of linked premiums",
					"type": "array",
					"items": {
						"$ref": "#/definitions/LinkedPremium"
					}
				},
				"MaximumParticipants": {
					"format": "int32",
					"description": "Returns the maximum number of participants.",
					"type": "integer"
				},
				"OrderBy": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "Agreement order by."
				},
				"OrderNumber": {
					"description": "Last agreement order number.",
					"type": "string"
				},
				"ParticipantCount": {
					"format": "int32",
					"description": "Number of participants.",
					"type": "integer"
				},
				"ParticipantWithAccessCount": {
					"format": "int32",
					"description": "Returns the number of participants with access to the content.",
					"type": "integer"
				},
				"PromotionCode": {
					"description": "Promotion code.",
					"type": "string"
				},
				"PurchaseOrderNumber": {
					"description": "Purchase order number.",
					"type": "string"
				},
				"ReferredBy": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "Agreement referred by."
				},
				"RenewalPolicy": {
					"$ref": "#/definitions/RenewalPolicy",
					"description": "Renewal policy"
				},
				"AccessPeriod": {
					"$ref": "#/definitions/AccessPeriod",
					"description": "The access period (length of term)"
				},
				"AccessService": {
					"$ref": "#/definitions/AccessService",
					"description": "The access service associated with this agreement."
				},
				"TermStarts": {
					"format": "date-time",
					"description": "Agreement start date.",
					"type": "string"
				},
				"JoinDate": {
					"format": "date-time",
					"description": "Agreement join date. This is the start date for the first term of the agreement.",
					"type": "string"
				},
				"Status": {
					"$ref": "#/definitions/AgreementStatus",
					"description": "The status of this agreement"
				},
				"SuspendedDays": {
					"format": "int32",
					"description": "The number of suspended days for the current term.",
					"type": "integer"
				},
				"SuspendReasonCode": {
					"description": "Suspend reason.",
					"type": "string"
				},
				"SubTotal": {
					"format": "double",
					"description": "The sum of the individual prices.",
					"type": "number"
				},
				"Tax": {
					"format": "double",
					"description": "The total tax on the agreement.",
					"type": "number"
				},
				"NetCost": {
					"format": "double",
					"description": "The agreement's total cost.",
					"type": "number"
				},
				"AgreementLevelDiscount": {
					"format": "double",
					"description": "Agreement level discount.",
					"type": "number"
				},
				"TermNumber": {
					"format": "int32",
					"description": "Agreement version term number.",
					"type": "integer"
				},
				"VersionNumber": {
					"format": "int32",
					"description": "Agreement version number.",
					"type": "integer"
				},
				"MasterAgreementId": {
					"description": "Master Agreement Id.",
					"type": "string"
				},
				"PaymentMethod": {
					"$ref": "#/definitions/PaymentMethod",
					"description": "The initial payment method for the term."
				},
				"Products": {
					"description": "List of products that are part of this agreement.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Product"
					}
				},
				"Subscriptions": {
					"description": "List of circulation subscriptions that are part of this agreement.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Subscription"
					}
				},
				"AccessPoints": {
					"description": "List of access points on this agreement.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AccessPoint"
					}
				},
				"Participants": {
					"description": "List of participants on the agreement level.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AgreementParticipant"
					}
				},
				"RelatedDebits": {
					"description": "The debits associated with this Agreement term/version",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Debit"
					}
				},
				"RelatedCredits": {
					"description": "The credits associated with this Agreement term/version",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Credit"
					}
				},
				"AssociationMembership": {
					"$ref": "#/definitions/AssociationMembership",
					"description": "Information about the current agreement's association membership.\r\nThis will be null if the agreement is not an association membership"
				},
				"ElectronicPaymentId": {
					"description": "The electronic payment ID on the agreement.",
					"type": "string"
				},
				"AutoChargeSettings": {
					"$ref": "#/definitions/SubscriptionAutoChargeSettings",
					"description": "This agreement's auto charge settings. Null if auto-charge has not been set up for the current \r\nagreement."
				}
			}
		},
		"CustomerAddressSummary": {
			"description": "Information for a customer on an order (bill-to or ship-to)",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "The customer's Advantage customer number.",
					"type": "string"
				},
				"AddressCode": {
					"description": "Address code",
					"type": "string"
				},
				"AddressBlock": {
					"description": "HTML-formated address block",
					"type": "string"
				}
			}
		},
		"LinkedPremium": {
			"description": "Information about a premium tied to a subscription.",
			"type": "object",
			"properties": {
				"ShipTo": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "The customer this premium applies to."
				},
				"ItemNumber": {
					"description": "The item number of the premium.",
					"type": "string"
				},
				"ProductType": {
					"description": "The product type of the order line (subscription, product, etc.).",
					"enum": [
						"Product",
						"Subscription",
						"Access",
						"Conference",
						"BackIssue",
						"Package",
						"Unknown",
						"Membership",
						"Donation",
						"PrintJob",
						"Reprint",
						"Service",
						"Stock"
					],
					"type": "string"
				},
				"PremiumStatus": {
					"description": "The Status of the premium (either EARNED or UNEARNED).",
					"type": "string"
				},
				"ShippingDate": {
					"format": "date-time",
					"description": "The ship date of the premium",
					"type": "string"
				},
				"CustomerName": {
					"description": "The name of the customer",
					"type": "string"
				},
				"CompanyName": {
					"description": "The company name of the customer",
					"type": "string"
				}
			}
		},
		"CustomerAddressKey": {
			"description": "Information for a customer on an order (bill-to or ship-to)",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "The customer's Advantage customer number.",
					"type": "string"
				},
				"AddressCode": {
					"description": "Address code",
					"type": "string"
				}
			}
		},
		"RenewalPolicy": {
			"description": "An Advantage Renewal Policy value from the MSTRNP-T table.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The code for the valid value.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the valid value.",
					"type": "string"
				},
				"RenewalHandling": {
					"description": "Renewal Handling code for this renewal policy",
					"enum": [
						"AutoCharge",
						"AutoRenew",
						"Promote",
						"DoNotPromote"
					],
					"type": "string"
				}
			}
		},
		"AccessPeriod": {
			"description": "Access type products can be purchased for a given time period. AMB access\r\ntypes are grouped into access services, usually a group of AMB access types\r\nthat are served from the same content host or website.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The service period code. \r\nExamples: \r\n\"Y-0001\" = one year. \r\n\"M-0006\" = six months.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the access period.",
					"type": "string"
				}
			}
		},
		"AccessService": {
			"description": "An access service represents a collection of related access items (products).",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The access service ID",
					"type": "string"
				},
				"Name": {
					"description": "The name of the access service.",
					"type": "string"
				}
			}
		},
		"AgreementStatus": {
			"description": "Agreement status",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The agreement status code",
					"type": "string"
				},
				"Name": {
					"description": "The name of the agreement status",
					"type": "string"
				}
			}
		},
		"PaymentMethod": {
			"description": "Information pertaining to a payment method.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The code identifying the payment method.",
					"type": "string"
				},
				"Description": {
					"description": "The payment method description.",
					"type": "string"
				},
				"PaymentType": {
					"description": "The type of payment method.",
					"enum": [
						"Invalid",
						"CreditCard",
						"DirectDebit",
						"BillMe",
						"AvailableCredit",
						"Check",
						"BillPaymentService",
						"GiftCertificate",
						"MiscellaneousCredit",
						"WriteOff",
						"DigitalWallet"
					],
					"type": "string"
				}
			}
		},
		"Product": {
			"description": "Information for an Advantage product.",
			"type": "object",
			"properties": {
				"ItemNumber": {
					"description": "The item number of the product.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the product.",
					"type": "string"
				},
				"ProductType": {
					"description": "The type of product.",
					"enum": [
						"Product",
						"Subscription",
						"Access",
						"Conference",
						"BackIssue",
						"Package",
						"Unknown",
						"Membership",
						"Donation",
						"PrintJob",
						"Reprint",
						"Service",
						"Stock"
					],
					"type": "string"
				},
				"ImageUrlLarge": {
					"description": "The URL for the large image of the product.",
					"type": "string"
				},
				"ImageUrlSmall": {
					"description": "The URL for the small image of the product.",
					"type": "string"
				},
				"SalesAnalysisCategoryCode": {
					"description": "The category code assigned to the product for sales analysis.",
					"type": "string"
				},
				"SalesAnalysisSummaryCode": {
					"description": "The summary code assigned to the product's sales analysis category.",
					"type": "string"
				},
				"ProductFamily": {
					"description": "The product family of the product.",
					"type": "string"
				},
				"ProductCategoryCode": {
					"description": "The product category of the product.",
					"type": "string"
				},
				"PublicationDate": {
					"format": "date-time",
					"description": "The publication date of the product.",
					"type": "string"
				},
				"Narratives": {
					"description": "The narratives for the product.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Narrative"
					}
				},
				"Keywords": {
					"description": "The keywords related to the product.",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"Subjects": {
					"description": "The subject categories the product falls under.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ProductSubject"
					}
				},
				"ProductDetails": {
					"$ref": "#/definitions/OneOffProduct",
					"description": "Information specific to a one-off product."
				},
				"SubscriptionDetails": {
					"$ref": "#/definitions/SubscriptionProduct",
					"description": "Information specific to a subscription product. Null if the product is not a subscription."
				},
				"AccessDetails": {
					"$ref": "#/definitions/AccessProduct",
					"description": "Information specific to an access product. Null if the product is not a access product."
				},
				"ConferenceDetails": {
					"$ref": "#/definitions/ConferenceProduct",
					"description": "Information specific to a conference product. Null if the product is not a conference product."
				},
				"PackageDetails": {
					"$ref": "#/definitions/PackageProduct",
					"description": "Information specific to a package. Null if the product is not a package."
				},
				"BackIssueDetails": {
					"$ref": "#/definitions/BackIssueProduct",
					"description": "Information specific to a back issue product. Null if the product is not a back issue product."
				},
				"Contributors": {
					"description": "Information on the Contributors for this product",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Contributor"
					}
				},
				"AssociationDetails": {
					"$ref": "#/definitions/AssociationProduct",
					"description": "Information specific to an association membership. Null if the product is not an association membership."
				},
				"ProfileId": {
					"description": "ID for the profile associated with this product",
					"type": "string"
				},
				"Profile": {
					"$ref": "#/definitions/Profile",
					"description": "Profile information for this product"
				},
				"CostCenter": {
					"description": "The Cost Center of the Product",
					"type": "string"
				}
			}
		},
		"Subscription": {
			"description": "Information about a customer's existing subscription.",
			"type": "object",
			"properties": {
				"Publication": {
					"$ref": "#/definitions/PublicationSummary",
					"description": "The subscribed publication"
				},
				"AccessExpires": {
					"format": "date-time",
					"description": "The final expire date for the current subscription with the gracing days added in.",
					"type": "string"
				},
				"AlternateDelivery": {
					"$ref": "#/definitions/SubscriptionAlternateDelivery",
					"description": "The adjustment/cancellation reason code."
				},
				"AdjustmentReasonCode": {
					"description": "The last applied adjustment reason code",
					"type": "string"
				},
				"BackIssueUnitPrice": {
					"format": "double",
					"description": "The unit price of a back issue for the subscription's publication and currency.",
					"type": "number"
				},
				"BillingCurrencyCode": {
					"description": "The billing currency code.",
					"type": "string"
				},
				"BillingOrganizationCode": {
					"description": "The billing organization.",
					"type": "string"
				},
				"BillingStatusCode": {
					"description": "The subscription's billing status code.  The valid codes are defined\r\nat the CDSSYS/KWV view for the CRC-STS field, \r\ne.g. B - billed, C - comp, P - paid, A - on-approval",
					"type": "string"
				},
				"BillingStatusDescription": {
					"description": "The localized description of the subscription's billing status code.",
					"type": "string"
				},
				"BusinessIndustryCode": {
					"description": "The business industry",
					"type": "string"
				},
				"Status": {
					"$ref": "#/definitions/SubscriptionStatus",
					"description": "The subscription's circulation status code.  The valid codes are defined\r\nat the CDSSYS/KWV view for the CRC-STS field."
				},
				"ControlGroupDate": {
					"format": "date-time",
					"description": "The control group date.",
					"type": "string"
				},
				"Copies": {
					"format": "int32",
					"description": "The number of copies.",
					"type": "integer"
				},
				"DateSigned": {
					"format": "date-time",
					"description": "The date signed for the current subscription.",
					"type": "string"
				},
				"DeliveryCode": {
					"description": "The delivery code.",
					"type": "string"
				},
				"Demographics": {
					"description": "Demographic field values for the subscription",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DemographicValue"
					}
				},
				"DirectDebitRequestId": {
					"description": "The direct debit request ID.",
					"type": "string"
				},
				"ShipTo": {
					"$ref": "#/definitions/SubscriptionAddressSummary",
					"description": "This ship-to customer address"
				},
				"BillTo": {
					"$ref": "#/definitions/CustomerAddressSummary",
					"description": "The bill-to customer address."
				},
				"DonorTypeCode": {
					"description": "The donor type of the donor.",
					"type": "string"
				},
				"EditionCode": {
					"description": "The subscription edition code.",
					"type": "string"
				},
				"TermExpires": {
					"$ref": "#/definitions/Issue",
					"description": "The expire date of the subscription."
				},
				"SubscriptionExpires": {
					"$ref": "#/definitions/Issue",
					"description": "The final expire date of the subscription."
				},
				"SubscriptionIssuesRemaining": {
					"format": "int32",
					"description": "The number of issues remain on the subscription, including future terms.",
					"type": "integer"
				},
				"SubscriptionStarted": {
					"$ref": "#/definitions/Issue",
					"description": "The date of the first issue the subscriber received for the subscription."
				},
				"IsExcludedFromGracing": {
					"description": "True if this subscription is excluded from gracing, false otherwise",
					"type": "boolean"
				},
				"IsGroup": {
					"description": "Is this part of a group subscription?",
					"type": "boolean"
				},
				"InstallmentBillingCode": {
					"description": "The installment billing code.",
					"type": "string"
				},
				"TermIssuesRemaining": {
					"format": "int32",
					"description": "The number of issues remaining on the subscription term.",
					"type": "integer"
				},
				"IssueGroupCode": {
					"description": "The issue group.",
					"type": "string"
				},
				"IsControlled": {
					"description": "Is the subscription controlled?",
					"type": "boolean"
				},
				"IsFutureTerm": {
					"description": "Is the current subscription term a future term? i.e. is located in the future term table.",
					"type": "boolean"
				},
				"IsFutureTermNonpaidInstallmentBill": {
					"description": "Are there are any unpaid, installment billed future terms for the subscription?",
					"type": "boolean"
				},
				"IsPastTerm": {
					"description": "Is the subscription term past term? i.e. is located in the past term table.",
					"type": "boolean"
				},
				"IsGracing": {
					"description": "Is the subscription expired and being served grace issues?",
					"type": "boolean"
				},
				"IsPaymentDue": {
					"description": "Is the payment due for the subscription?",
					"type": "boolean"
				},
				"IsPremium": {
					"description": "Is premium subscription?",
					"type": "boolean"
				},
				"IsProforma": {
					"description": "Is the subscription a proforma subscription?",
					"type": "boolean"
				},
				"IsQualified": {
					"description": "Is the subscription qualified?",
					"type": "boolean"
				},
				"IsTermPaid": {
					"description": "Have the original subscription and all mod transactions been paid for?",
					"type": "boolean"
				},
				"LastFulfillmentOnlyIssue": {
					"$ref": "#/definitions/Issue",
					"description": "The last fulfillment-only issue that was fulfilled."
				},
				"LastIssueServed": {
					"$ref": "#/definitions/Issue",
					"description": "The last issue this subscription received."
				},
				"LastOrderNumber": {
					"description": "The last order number that modified the subscription.",
					"type": "string"
				},
				"LastOrderSourceCode": {
					"description": "The order source associated with the last order to modify the subscription.",
					"type": "string"
				},
				"LastRenewalDate": {
					"format": "date-time",
					"description": "The last renewal date of the last renewal that was sent.",
					"type": "string"
				},
				"LastRenewalPromotionCodeSent": {
					"description": "The last renewal promotion code that was sent.",
					"type": "string"
				},
				"LinkedPremiums": {
					"description": "Returns a list of linked premiums",
					"type": "array",
					"items": {
						"$ref": "#/definitions/LinkedPremium"
					}
				},
				"LocalCurrencyCode": {
					"description": "The local currency code from the subscription.",
					"type": "string"
				},
				"MembershipOrganizationCode": {
					"description": "The membership organization.",
					"type": "string"
				},
				"MembershipCategoryCode": {
					"description": "The membership category.",
					"type": "string"
				},
				"NumberAdvancedRenewals": {
					"format": "int32",
					"description": "The number of advanced renewals for the subscription's current term.",
					"type": "integer"
				},
				"Package": {
					"$ref": "#/definitions/SubscriptionPackageSource",
					"description": "If this subscription was ordered as part of a package then use this property\r\nto trace the subscription back to the package component."
				},
				"PaidThroughDate": {
					"format": "date-time",
					"description": "The date the subscription has been paid through.",
					"type": "string"
				},
				"PostageAmount": {
					"format": "double",
					"description": "The postage amount.",
					"type": "number"
				},
				"ProfileId": {
					"description": "The profile id for the subscription term.",
					"type": "string"
				},
				"PromoteBySms": {
					"description": "The promote flags for the current term of the current subscription.",
					"type": "string"
				},
				"PromotionChoiceCode": {
					"description": "The promotion choice.",
					"type": "string"
				},
				"PromotionCode": {
					"description": "The promotion code.",
					"type": "string"
				},
				"Rate": {
					"format": "double",
					"description": "The rate. The price of the publication.",
					"type": "number"
				},
				"RateCode": {
					"description": "The rate code, determining the unit price for an item.",
					"type": "string"
				},
				"ReferredByCustomerNumber": {
					"description": "The customer number of the reference customer.",
					"type": "string"
				},
				"RemainingLiability": {
					"format": "double",
					"description": "The remaining liability, the calculated billing currency amount of remaining issues for this term.",
					"type": "number"
				},
				"RenewalPolicy": {
					"$ref": "#/definitions/RenewalPolicy",
					"description": "The renewal policy."
				},
				"RiskFreeIssues": {
					"format": "int32",
					"description": "The number of issues a subscriber is due to receive even if the subscription is cancelled.",
					"type": "integer"
				},
				"SalesRepCode": {
					"description": "The sales representative code for the last order of the subscription.",
					"type": "string"
				},
				"ShipThrough": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "The customer number of the freight forwarder that will receive the shipment to distribute to the ship-to."
				},
				"TermStarts": {
					"$ref": "#/definitions/Issue",
					"description": "The start date for the current subscription.\r\nIf the start date isn't specified on a future term then the\r\nexpected start date is calculated, assuming the subscription is continuous."
				},
				"SubscriptionId": {
					"description": "The subscription ID.",
					"type": "string"
				},
				"SubscriptionClass": {
					"description": "The subscription class.",
					"enum": [
						"Regular",
						"DelayedStart",
						"MonthlyInvoiced",
						"Perpetual",
						"QualifiedNonpaid",
						"Agreement"
					],
					"type": "string"
				},
				"SubscriptionTypeCode": {
					"description": "The subscription type code, describing a group of similar subscriptions.",
					"type": "string"
				},
				"SuspendResumeDate": {
					"format": "date-time",
					"description": "The date that a subscription will be resumed after a suspension.",
					"type": "string"
				},
				"SuspendStartDate": {
					"format": "date-time",
					"description": "The date of the start of subscription suspension.",
					"type": "string"
				},
				"TermLength": {
					"format": "int32",
					"description": "The number of issues included in the subscription order.",
					"type": "integer"
				},
				"TermNumber": {
					"format": "int32",
					"description": "The term number, indicating how many times the subscriber has ordered the subscription.",
					"type": "integer"
				},
				"AutoChargeSettings": {
					"$ref": "#/definitions/SubscriptionAutoChargeSettings",
					"description": "This subscription's auto charge settings. Null if auto-charge has not been set up for the current \r\nsubscription."
				},
				"OriginalOrder": {
					"$ref": "#/definitions/OriginalOrder",
					"description": "The order that initially created this subscription term."
				},
				"RelatedDebits": {
					"description": "The debits associated with this subscription term",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Debit"
					}
				},
				"RelatedCredits": {
					"description": "The credits associated with this subscription term",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Credit"
					}
				},
				"AutoRenewChainId": {
					"description": "The auto-renew chain ID",
					"type": "string"
				},
				"AutoRenewChainSequence": {
					"format": "int32",
					"description": "The auto-renew chain sequence",
					"type": "integer"
				},
				"NumberAutoRenewals": {
					"format": "int32",
					"description": "The number of times this subscription has been auto-renewed under the current auto-renew chain ID",
					"type": "integer"
				},
				"LinkedAgreementId": {
					"description": "The ID of the agreement that the current subscription is a component of an agreement.\r\nNull if the current subscription is not an agreement component.",
					"type": "string"
				}
			}
		},
		"AccessPoint": {
			"description": "Information about an Access Point on an agreement.",
			"type": "object",
			"properties": {
				"ItemNumber": {
					"description": "The item number that represents this access item.",
					"type": "string"
				},
				"ProductName": {
					"description": "The access item title",
					"type": "string"
				},
				"IsAvailableForAllParticipants": {
					"description": "true if access point is available for all participants.",
					"type": "boolean"
				},
				"ProfileId": {
					"description": "Profile ID, or blank if none.",
					"type": "string"
				},
				"QuantityOrdered": {
					"format": "int32",
					"description": "Access point quantity.",
					"type": "integer"
				},
				"QuantityRemaining": {
					"format": "int32",
					"description": "Access point quantity remaining.",
					"type": "integer"
				},
				"RateCode": {
					"description": "AMB rate code.",
					"type": "string"
				},
				"SequenceNumber": {
					"format": "int32",
					"description": "Access point sequence number (ID).",
					"type": "integer"
				},
				"AccessServiceCode": {
					"description": "Access service.",
					"type": "string"
				},
				"PricingMethod": {
					"description": "Pricing Method.",
					"enum": [
						"AgreementBased",
						"ParticipantBased",
						"QuantityBased"
					],
					"type": "string"
				},
				"Package": {
					"$ref": "#/definitions/SubscriptionPackageSource",
					"description": "If this access point was ordered as part of a package then use this property\r\nto trace the access point back to the package component."
				},
				"SubscriptionType": {
					"description": "Susbcription Type",
					"type": "string"
				},
				"UnitPrice": {
					"format": "double",
					"description": "Unit Price.",
					"type": "number"
				},
				"AdditionalDiscount": {
					"format": "double",
					"description": "Additional Discount.",
					"type": "number"
				},
				"Participants": {
					"description": "List of participants on this access point.  If empty, all agreement participants have access.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AccessPointParticipant"
					}
				},
				"Amounts": {
					"$ref": "#/definitions/AccessPointCalculationResult",
					"description": "Sales Amounts for this access point"
				}
			}
		},
		"AgreementParticipant": {
			"description": "Information about an Agreement participant.",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "Customer number of the current participant.",
					"type": "string"
				},
				"FullName": {
					"description": "The customer's full name",
					"type": "string"
				},
				"AddressCode": {
					"description": "Address code of the current participant.",
					"type": "string"
				},
				"AccessType": {
					"description": "What type of participant is this?",
					"enum": [
						"Administrator",
						"AdministratorWithAccess",
						"SelfAdministratorWithAccess",
						"AccessOnly"
					],
					"type": "string"
				},
				"IsAdministrator": {
					"description": "Is this participant an agreement administrator?",
					"type": "boolean"
				},
				"IsSelfAdministrator": {
					"description": "Is this participant allowed to administer their own records?",
					"type": "boolean"
				},
				"IsMaintenanceOnly": {
					"description": "Is this participant blocked from accessing content?",
					"type": "boolean"
				},
				"Email": {
					"description": "The email address current participant.",
					"type": "string"
				}
			}
		},
		"Debit": {
			"description": "Represents a single debit header",
			"type": "object",
			"properties": {
				"DebitNumber": {
					"description": "Debit number",
					"type": "string"
				},
				"SourceData": {
					"description": "Source data",
					"type": "string"
				},
				"ArpSequence": {
					"description": "Arp sequence",
					"type": "string"
				},
				"IsDebitPaid": {
					"description": "True if the debit is fully paid",
					"type": "boolean"
				},
				"SourceSystemReference": {
					"description": "Source system reference",
					"type": "string"
				},
				"SourceCustomer": {
					"description": "Source customer",
					"type": "string"
				},
				"DueDate": {
					"format": "date-time",
					"description": "Date payment is due",
					"type": "string"
				},
				"InvoiceTerms": {
					"description": "Invoice terms",
					"type": "string"
				},
				"InvoiceDate": {
					"format": "date-time",
					"description": "Invoice date",
					"type": "string"
				},
				"BillingCurrency": {
					"description": "Billing currency",
					"type": "string"
				},
				"TotalDebitAmount": {
					"format": "double",
					"description": "Total debit amount",
					"type": "number"
				},
				"TotalAmountPaid": {
					"format": "double",
					"description": "Total amount paid against this debit",
					"type": "number"
				},
				"InstallmentPayments": {
					"format": "int32",
					"description": "Number of installment billing payments",
					"type": "integer"
				},
				"InstallmentBillingCode": {
					"description": "Installment billing code",
					"type": "string"
				},
				"BillingOrganization": {
					"description": "Billing organization",
					"type": "string"
				}
			}
		},
		"Credit": {
			"description": "Represents a single credit header",
			"type": "object",
			"properties": {
				"CreditVoucher": {
					"description": "Credit voucher number",
					"type": "string"
				},
				"PaymentType": {
					"description": "Payment type",
					"type": "string"
				},
				"CreditDocumentNumber": {
					"description": "Credit document number",
					"type": "string"
				},
				"CreditType": {
					"description": "Credit type",
					"type": "string"
				},
				"CustomerNumber": {
					"description": "Customer number",
					"type": "string"
				},
				"EntryDate": {
					"format": "date-time",
					"description": "Entry date",
					"type": "string"
				},
				"BillingCurrency": {
					"description": "Billing currency",
					"type": "string"
				},
				"Amount": {
					"format": "double",
					"description": "Credit amount",
					"type": "number"
				},
				"Balance": {
					"format": "double",
					"description": "Credit balance.",
					"type": "number"
				},
				"PaymentCode": {
					"description": "Payment code used for this credit",
					"type": "string"
				},
				"InitialOrder": {
					"description": "Order credit was initially applied to",
					"type": "string"
				},
				"OriginalOrder": {
					"description": "Original order number",
					"type": "string"
				},
				"DirectDebitRequestId": {
					"description": "Direct Debit Request Id (for DD payments).",
					"type": "string"
				},
				"ElectronicPaymentId": {
					"description": "Electronic Payment Id (for CC payments).",
					"type": "string"
				}
			}
		},
		"AssociationMembership": {
			"description": "Information specific to association membership agreements.",
			"type": "object",
			"properties": {
				"ItemNumber": {
					"description": "The item number of the association membership.",
					"type": "string"
				},
				"LevelCode": {
					"description": "The association membership level code.",
					"type": "string"
				},
				"ProfileId": {
					"description": "The profile ID of the association membership. Null if the association membership is not linked to a profile.",
					"type": "string"
				},
				"CustomerListCodes": {
					"description": "The list codes of the customer lists the customer should be added to as part of their membership.",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"StructureNodeId": {
					"description": "Association structure node ID",
					"type": "string"
				},
				"IsIncludedInDirectory": {
					"description": "Indicates whether an association member is allowed to be included in the membership directory.",
					"type": "boolean"
				}
			}
		},
		"SubscriptionAutoChargeSettings": {
			"description": "Settings for a subscription's auto renewal settings.",
			"type": "object",
			"properties": {
				"PaymentType": {
					"description": "The type of payment method used for auto-charging renewals for a subscription",
					"enum": [
						"Invalid",
						"CreditCard",
						"DirectDebit",
						"BillMe",
						"AvailableCredit",
						"Check",
						"BillPaymentService",
						"GiftCertificate",
						"MiscellaneousCredit",
						"WriteOff",
						"DigitalWallet"
					],
					"type": "string"
				},
				"AccountNumber": {
					"description": "The account number (masked for credit cards) used for renewals.",
					"type": "string"
				},
				"ElectronicPaymentId": {
					"description": "The electronic payment ID is used to identify the customer's saved payment method.",
					"type": "string"
				}
			}
		},
		"Narrative": {
			"description": "A narrative is free-form text describing an entity.  Narratives may be HTML formatted.  Products and promotions may have multiple \r\nnarratives defined, e.g. one for web use on desktop browsers, one for web use on mobile browsers, and another for customer service \r\nuse.  Use the narrative type code to identify the type of narrative.  (You can define the valid narrative types using the Advantage UI.)",
			"type": "object",
			"properties": {
				"NarrativeTypeCode": {
					"description": "The narrative type code identifies the type of narrative.",
					"type": "string"
				},
				"Text": {
					"description": "The narrative text which may include HTML formatting.",
					"type": "string"
				}
			}
		},
		"ProductSubject": {
			"description": "The information for a product subject.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The code of the subject.",
					"type": "string"
				},
				"Name": {
					"description": "The subject name.",
					"type": "string"
				}
			}
		},
		"OneOffProduct": {
			"description": "Information for a one-off product (PRO)",
			"type": "object",
			"properties": {
				"Isbn10": {
					"description": "The ISBN-10 number of the product.",
					"type": "string"
				},
				"Isbn10Formatted": {
					"description": "The formatted ISBN-10 number of the product.",
					"type": "string"
				},
				"Isbn13": {
					"description": "The ISBN-13 number of the product.",
					"type": "string"
				},
				"Isbn13Formatted": {
					"description": "The formatted ISBN-13 number of the product.",
					"type": "string"
				},
				"Author": {
					"description": "The author of the product.",
					"type": "string"
				},
				"Width": {
					"format": "double",
					"description": "The width of the product",
					"type": "number"
				},
				"Height": {
					"format": "double",
					"description": "The height of the product",
					"type": "number"
				},
				"Depth": {
					"format": "double",
					"description": "The depth of the product.",
					"type": "number"
				},
				"Weight": {
					"format": "double",
					"description": "The weight of the product.",
					"type": "number"
				},
				"FormatCode": {
					"description": "The format of the product.",
					"type": "string"
				},
				"Pages": {
					"format": "int32",
					"description": "The number of pages.",
					"type": "integer"
				}
			}
		},
		"SubscriptionProduct": {
			"description": "Information for a subscription product.",
			"type": "object",
			"properties": {
				"Issn": {
					"description": "The ISSN for the issue.",
					"type": "string"
				},
				"LastIssueSent": {
					"$ref": "#/definitions/Issue",
					"description": "Issue information for the last issue sent."
				},
				"NextIssueToSend": {
					"$ref": "#/definitions/Issue",
					"description": "Issue information for the next issue being sent."
				},
				"IssuesPerYear": {
					"format": "int32",
					"description": "The number of issues per year.",
					"type": "integer"
				},
				"AllowEmailOverride": {
					"description": "If true, allow default customer email to be overridden with subscription-specific email",
					"type": "boolean"
				}
			}
		},
		"AccessProduct": {
			"description": "Information for an access product.",
			"type": "object",
			"properties": {
				"ContentHostUrl": {
					"description": "The host URL for the content.",
					"type": "string"
				},
				"AccessServiceCode": {
					"description": "The service ID.",
					"type": "string"
				}
			}
		},
		"ConferenceProduct": {
			"description": "Information for a conference product.",
			"type": "object",
			"properties": {
				"SessionSelectionOpens": {
					"format": "date-time",
					"description": "Date and time when session selection (registration) opens",
					"type": "string"
				},
				"ConfirmationMessage": {
					"description": "Confirmation message to display to the customer after completing registration",
					"type": "string"
				},
				"Sessions": {
					"description": "The sessions of the conference.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ConferenceSession"
					}
				},
				"Locations": {
					"description": "The locations for the conference.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ConferenceLocation"
					}
				}
			}
		},
		"PackageProduct": {
			"description": "Information for a package product.",
			"type": "object",
			"properties": {
				"PackageType": {
					"description": "The type of package.",
					"enum": [
						"Component",
						"ComponentSelectable",
						"DataEntry",
						"SingleUnit",
						"SingleUnitSelectable"
					],
					"type": "string"
				},
				"Components": {
					"description": "The components of the package.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PackageComponent"
					}
				},
				"Attributes": {
					"description": "The attributes of the package",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Question"
					}
				}
			}
		},
		"BackIssueProduct": {
			"description": "Information for a back issue product.",
			"type": "object",
			"properties": {
				"Issue": {
					"$ref": "#/definitions/Issue",
					"description": "The information for the back issue."
				}
			}
		},
		"Contributor": {
			"description": "Information about an item contributor",
			"type": "object",
			"properties": {
				"ContributorTypeCode": {
					"description": "Contributor Type",
					"type": "string"
				},
				"CustomerNumber": {
					"description": "Customer Number",
					"type": "string"
				},
				"Name": {
					"$ref": "#/definitions/CustomerName",
					"description": "Customer Name"
				}
			}
		},
		"AssociationProduct": {
			"description": "Information for an association membership product.",
			"type": "object",
			"properties": {
				"Levels": {
					"description": "The association levels of the association membership",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AssociationLevel"
					}
				},
				"RelatedDonationProducts": {
					"description": "The donation items related to the association membership",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Product"
					}
				},
				"Certifications": {
					"description": "List of available continuing education certifications",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContinuingEducationCertification"
					}
				},
				"RootStructureNode": {
					"$ref": "#/definitions/AssociationStructureNode",
					"description": "The root structure node for the association. This node contains all descendant nodes."
				}
			}
		},
		"Profile": {
			"description": "A profile represents the responses to a set of questions.",
			"type": "object",
			"properties": {
				"QuestionnaireCode": {
					"description": "The questionnaire that was used to generate the list of questions.",
					"type": "string"
				},
				"Questions": {
					"description": "The question responses to store in the profile.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/QuestionResponse"
					}
				}
			}
		},
		"PublicationSummary": {
			"description": "Summary information about a publication",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The publication code",
					"type": "string"
				},
				"Name": {
					"description": "The publication name",
					"type": "string"
				},
				"IssuesPerYear": {
					"format": "int32",
					"description": "The typical number of issues per year for the publication",
					"type": "integer"
				}
			}
		},
		"SubscriptionAlternateDelivery": {
			"description": "Information about a subscriptions alternate delivery settings.",
			"type": "object",
			"properties": {
				"IndicatorCode": {
					"description": "The alternate delivery indicator code.",
					"enum": [
						"Confirming",
						"DeferredStart",
						"InError",
						"No",
						"Override",
						"RequestPermissionDetails",
						"Undeliverable",
						"InWaiting",
						"Excluded",
						"Yes"
					],
					"type": "string"
				},
				"VendorCode": {
					"description": "The alternate delivery vendor code.",
					"type": "string"
				}
			}
		},
		"SubscriptionStatus": {
			"description": "Information about a subscriptions alternate delivery settings.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The subscription status code",
					"type": "string"
				},
				"Name": {
					"description": "The subscription status name",
					"type": "string"
				},
				"IsActive": {
					"description": "Is the subscription active?",
					"type": "boolean"
				},
				"IsCancelled": {
					"description": "Is the subscription cancelled?",
					"type": "boolean"
				},
				"IsCustomerCancelled": {
					"description": "Is the subscription customer cancelled?",
					"type": "boolean"
				},
				"IsExpired": {
					"description": "Is the subscription expired?",
					"type": "boolean"
				},
				"IsNonPayCancelled": {
					"description": "Is the subscription non-pay cancelled?",
					"type": "boolean"
				}
			}
		},
		"DemographicValue": {
			"description": "The value of a demographic field on a particular record.  See the Demographic and Control Partitions (CDSDEM) view \r\nfor a list of demographic partitions.  Each partition includes a set of fields that can be given custom sizes and\r\ndescriptions.",
			"type": "object",
			"properties": {
				"FieldName": {
					"description": "The demographic field name.",
					"type": "string"
				},
				"Value": {
					"description": "The value of the demographic field, as a string.",
					"type": "string"
				}
			}
		},
		"SubscriptionAddressSummary": {
			"description": "Information about the customer receiving the subscription",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "The customer's Advantage customer number.",
					"type": "string"
				},
				"AddressCode": {
					"description": "Address code",
					"type": "string"
				},
				"AddressBlock": {
					"description": "HTML-formated address block",
					"type": "string"
				},
				"AddressFlag": {
					"description": "The address flag on the customer address (used for temporary address swapping)",
					"type": "string"
				},
				"Name": {
					"description": "The name on the customer address",
					"type": "string"
				},
				"CountryCode": {
					"description": "The country code of the customer address",
					"type": "string"
				}
			}
		},
		"Issue": {
			"description": "Information about an issue of a publication.",
			"type": "object",
			"properties": {
				"IssueDate": {
					"format": "date-time",
					"description": "Issue Date",
					"type": "string"
				},
				"Name": {
					"description": "Issue Name",
					"type": "string"
				},
				"DisplayText": {
					"description": "Date or volume issue in printable format.",
					"type": "string"
				},
				"ItemNumber": {
					"description": "The item number for back issues",
					"type": "string"
				},
				"ExpectedLabelDate": {
					"format": "date-time",
					"description": "The expected label run date for the this issue",
					"type": "string"
				},
				"ExpectedPublicationDate": {
					"format": "date-time",
					"description": "The expected publication date for this issue",
					"type": "string"
				},
				"Demographics": {
					"description": "Demographic field values for the Issue Date",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DemographicValue"
					}
				}
			}
		},
		"SubscriptionPackageSource": {
			"description": "Information about the package that includes this subscription",
			"type": "object",
			"properties": {
				"ItemNumber": {
					"description": "The package product",
					"type": "string"
				},
				"PackageId": {
					"description": "The package ID links all the subscriptions purchased together in the package.",
					"type": "string"
				}
			}
		},
		"OriginalOrder": {
			"description": "Summary information about the original order for a subscription term.",
			"type": "object",
			"properties": {
				"ControlGroupDate": {
					"format": "date-time",
					"description": "The original control group date.",
					"type": "string"
				},
				"ControlGroupId": {
					"description": "The original control group ID.",
					"type": "string"
				},
				"OrderNumber": {
					"description": "The order number of the order that created this subscription term.",
					"type": "string"
				},
				"OrderSourceCode": {
					"description": "The order source associated with the original order that created the subscription term.",
					"type": "string"
				},
				"PurchaseOrderNumber": {
					"description": "The purchase order number associated with the current subscription term's original order.",
					"type": "string"
				},
				"SalesRepCode": {
					"description": "The sales representative code for the original order of the subscription term.",
					"type": "string"
				}
			}
		},
		"AccessPointParticipant": {
			"description": "Information about an Access Point participant.",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "Value of Customer Number.",
					"type": "string"
				},
				"LastUpdatedBy": {
					"description": "Value of Last Updated By.",
					"type": "string"
				},
				"LastUpdated": {
					"format": "date-time",
					"description": "Value of Last Updated On.",
					"type": "string"
				}
			}
		},
		"AccessPointCalculationResult": {
			"description": "Sales amounts for an access point",
			"type": "object",
			"properties": {
				"GrossAmount": {
					"format": "double",
					"description": "Gross Amount",
					"type": "number"
				},
				"DiscountAmount": {
					"format": "double",
					"description": "Discount Amount",
					"type": "number"
				},
				"NetSalesAmount": {
					"format": "double",
					"description": "Net Sales Amount",
					"type": "number"
				},
				"TaxAmount": {
					"format": "double",
					"description": "Tax Amount",
					"type": "number"
				},
				"TotalAmount": {
					"format": "double",
					"description": "Total Amount",
					"type": "number"
				}
			}
		},
		"ConferenceSession": {
			"description": "Contains all of the information about a conference Session",
			"type": "object",
			"properties": {
				"Code": {
					"description": "Session ID",
					"type": "string"
				},
				"Name": {
					"description": "Session Name",
					"type": "string"
				},
				"FullName": {
					"description": "Full Session Name",
					"type": "string"
				},
				"Description": {
					"description": "Session Description",
					"type": "string"
				},
				"SessionTypeCode": {
					"description": "Session Type",
					"type": "string"
				},
				"ConferenceDay": {
					"format": "int32",
					"description": "Conference Day",
					"type": "integer"
				},
				"StartTime": {
					"format": "date-time",
					"description": "Session Start Time",
					"type": "string"
				},
				"EndTime": {
					"format": "date-time",
					"description": "Session Finish Time",
					"type": "string"
				},
				"DurationInDays": {
					"format": "int32",
					"description": "Session duration in # of days",
					"type": "integer"
				},
				"ScheduleDescription": {
					"description": "Schedule description",
					"type": "string"
				},
				"ConferenceTrackCode": {
					"description": "Conference Track",
					"type": "string"
				},
				"AvailableToWebOn": {
					"format": "date-time",
					"description": "Date registration is open",
					"type": "string"
				},
				"SessionQuestionnaireCode": {
					"description": "Session Questionnaire",
					"type": "string"
				},
				"IsAvailabilityTracked": {
					"description": "Whether or not the tickets remaining is tracked for this conference session.",
					"type": "boolean"
				}
			}
		},
		"ConferenceLocation": {
			"description": "Contains all of the information about a Conference Location",
			"type": "object",
			"properties": {
				"ConferenceId": {
					"description": "Conference ID",
					"type": "string"
				},
				"LocationCode": {
					"description": "Conference Location",
					"type": "string"
				},
				"LocationName": {
					"description": "Location name",
					"type": "string"
				},
				"LocationSiteCode": {
					"description": "Conference location site (hotel) code",
					"type": "string"
				},
				"Starts": {
					"format": "date-time",
					"description": "Conference start date",
					"type": "string"
				},
				"Ends": {
					"format": "date-time",
					"description": "Conference end date",
					"type": "string"
				},
				"EarlyRegistrationDeadline": {
					"format": "date-time",
					"description": "Last day for early registration",
					"type": "string"
				},
				"OnTimeRegistrationDeadline": {
					"format": "date-time",
					"description": "Last day for on-time registration",
					"type": "string"
				},
				"RegistrationEnds": {
					"format": "date-time",
					"description": "Date when registrations are no longer accepted on the website",
					"type": "string"
				},
				"RoomReservationDeadline": {
					"format": "date-time",
					"description": "Last day to reserve hotel rooms",
					"type": "string"
				},
				"NoChargeCancelDeadline": {
					"format": "date-time",
					"description": "Last date to cancel without charges",
					"type": "string"
				},
				"NoCreditCancelDeadline": {
					"format": "date-time",
					"description": "Last date to cancel with at least a partial refund",
					"type": "string"
				}
			}
		},
		"PackageComponent": {
			"description": "Information for a package component.",
			"type": "object",
			"properties": {
				"Product": {
					"$ref": "#/definitions/Product",
					"description": "Information for a product that is part of the package."
				},
				"Quantity": {
					"format": "int32",
					"description": "The quantity included in the package.",
					"type": "integer"
				}
			}
		},
		"Question": {
			"description": "A question to present to the user.  Several types of questions are supported.  \r\nChoose One and Choose Many questions include a list of choices.  Basic questions\r\ncan include a list of choices to use as suggested values.",
			"type": "object",
			"properties": {
				"QuestionCode": {
					"description": "The question code uniquely identifies the question and is used when recording\r\nresponses",
					"type": "string"
				},
				"QuestionType": {
					"description": "The type of question.",
					"enum": [
						"Basic",
						"ChooseOne",
						"ChooseMany"
					],
					"type": "string"
				},
				"DataType": {
					"description": "The data type for a basic question.",
					"enum": [
						"Text",
						"Integer",
						"Decimal",
						"Date",
						"Boolean",
						"FreeForm"
					],
					"type": "string"
				},
				"Prompt": {
					"description": "The text to use as the question prompt.",
					"type": "string"
				},
				"MaxLength": {
					"format": "int32",
					"description": "The (optional) maximum length of a free form or basic question.",
					"type": "integer"
				},
				"Name": {
					"description": "The extended name of the question.  This might be used as help text.",
					"type": "string"
				},
				"DefaultResponse": {
					"description": "The default response for this question.  For a ChooseOne or ChooseMany question the DefaultResponse\r\nis never populated.  Instead use the Selected property on the list of choices to see which choices\r\nshould be selected by default.  The format of a basic question response depends on \r\nthe DataType of the question.\r\n\r\nA Basic/Boolean question response should be \"Y\" (for yes/true) or \"N\" (for no/false).  \r\n\r\nA Basic/Date question response should be a valid date formatted as YYYYMMDD where YYYY is the year, MM is \r\nthe month (1-12), DD is the day of month (1-31).  \r\n\r\nA Basic/Integer question should have an integer response where the integer is formated as a string of \r\ndigits with no punctuation.  The integer should have no more digits than the maximum allowed length of \r\nthe question.  \r\n\r\nA Basic/Decimal response should contain a number with no more than 18 digits to the left of the decimal \r\npoint and no more than 6 digits to the right.  The number should be formatted as a string of digits with \r\na period (.) separating the integer and fractional values, e.g. 12312.52\r\n\r\nA Basic/Text question should have a text response no longer than the maximum allowed length.",
					"type": "string"
				},
				"Choices": {
					"description": "The list of choices for a Choose One or Choose Many question, or an optional\r\nlist of suggested values for Basic questions.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/QuestionChoice"
					}
				}
			}
		},
		"CustomerName": {
			"description": "The elements of a customer's name",
			"type": "object",
			"properties": {
				"Title": {
					"description": "The customer's title (e.g. DR, MS)",
					"type": "string"
				},
				"First": {
					"description": "The customer's first name.",
					"type": "string"
				},
				"MiddleInitial": {
					"description": "The customer's middle initial.",
					"type": "string"
				},
				"Last": {
					"description": "The customer's last name.",
					"type": "string"
				},
				"Suffix": {
					"description": "The customer's suffix (e.g. JR).",
					"type": "string"
				}
			}
		},
		"AssociationLevel": {
			"description": "Information for an associaton level.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The level code",
					"type": "string"
				},
				"Name": {
					"description": "The level name",
					"type": "string"
				},
				"Description": {
					"description": "The level description",
					"type": "string"
				},
				"QuestionnaireCode": {
					"description": "The questionnaire code",
					"type": "string"
				},
				"ThirdPartyBenefits": {
					"description": "List of third-party benefits on both the association and level.\r\nThird-party benefits may exist on both the association, across all levels, or on just the level.\r\nThis yields all third-party benefits that apply to this level.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AssociationThirdPartyBenefit"
					}
				},
				"DiscountBenefits": {
					"description": "List of discount benefits on both the association and level\r\nDiscount benefits may exist on both the association, across all levels, or on just the level.\r\nThis yields all discount benefits that apply to this level.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AssociationDiscountBenefit"
					}
				},
				"Components": {
					"description": "List of association level components",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AssociationLevelComponent"
					}
				},
				"CustomerLists": {
					"description": "List of list codes of email lists",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AssociationLevelEmailList"
					}
				}
			}
		},
		"ContinuingEducationCertification": {
			"description": "Information about a continuing education certification",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The continuing education certification code",
					"type": "string"
				},
				"Name": {
					"description": "The name of the continuing education certification",
					"type": "string"
				},
				"NumberOfRequiredUnits": {
					"format": "int32",
					"description": "The number of continuing education units required to earn this certification",
					"type": "integer"
				},
				"AvailableCourses": {
					"description": "A collection of course credits available for",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContinuingEducationCourseCredit"
					}
				}
			}
		},
		"AssociationStructureNode": {
			"description": "Information about an association structure node",
			"type": "object",
			"properties": {
				"Id": {
					"description": "The Node ID for the current Association Structure Node",
					"type": "string"
				},
				"ParentId": {
					"description": "The Parent ID for the current Association Structure Node",
					"type": "string"
				},
				"Name": {
					"description": "The Name for the current Association Structure Node",
					"type": "string"
				},
				"Type": {
					"$ref": "#/definitions/AssociationStructureNodeType",
					"description": "The Type of the current Association Structure Node"
				},
				"Description": {
					"description": "The Node Description for the current Association Structure Node",
					"type": "string"
				},
				"Children": {
					"description": "List of child nodes for the current Association Structure Node",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AssociationStructureNode"
					}
				}
			}
		},
		"QuestionResponse": {
			"description": "The response to a questionnaire question.",
			"type": "object",
			"properties": {
				"QuestionCode": {
					"description": "The question code identifies which question was answered.",
					"type": "string"
				},
				"Responses": {
					"description": "The responses are always formatted as strings.  A ChooseMany question should have a response for each \r\nchoice that was selected.  The responses should contain the Value from the selected choices.  A ChooseOne \r\nquestion response should also be the Value from the selected choice.  Basic questions should have a single\r\nresponse.  The format of a basic question response depends on the DataType of the question.\r\n\r\nA Basic/Boolean question response should be \"Y\" (for yes/true) or \"N\" (for no/false).  \r\n\r\nA Basic/Date question response should be a valid date formatted as YYYYMMDD where YYYY is the year, MM is \r\nthe month (1-12), DD is the day of month (1-31).  \r\n\r\nA Basic/Integer question should have an integer response where the integer is formated as a string of \r\ndigits with no punctuation.  The integer should have no more digits than the maximum allowed length of \r\nthe question.  \r\n\r\nA Basic/Decimal response should contain a number with no more than 18 digits to the left of the decimal \r\npoint and no more than 6 digits to the right.  The number should be formatted as a string of digits with \r\na period (.) separating the integer and fractional values, e.g. 12312.52\r\n\r\nA Basic/Text question should have a text response no longer than the maximum allowed length.",
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"QuestionChoice": {
			"description": "A valid value for multiple choice questions or basic questions with suggested values.",
			"type": "object",
			"properties": {
				"Value": {
					"description": "The value to use as the question response code.",
					"type": "string"
				},
				"Text": {
					"description": "The text label to present to the user.",
					"type": "string"
				},
				"Name": {
					"description": "An extended description of this choice.  You might present this to the user as help text \r\nwhen they hover over or select this choice.",
					"type": "string"
				},
				"Selected": {
					"description": "Should this response be selected by default?",
					"type": "boolean"
				},
				"SortSequence": {
					"format": "int32",
					"description": "The sequence number for ordering the question choices.",
					"type": "integer"
				}
			}
		},
		"AssociationThirdPartyBenefit": {
			"description": "Information for an association partner benefit.",
			"type": "object",
			"properties": {
				"BenefitCode": {
					"description": "Benefit code",
					"type": "string"
				},
				"Name": {
					"description": "Name of the partner benefit",
					"type": "string"
				},
				"Description": {
					"description": "Description of the partner benefit. Note this may contain HTML formatting.",
					"type": "string"
				},
				"EffectiveDate": {
					"format": "date-time",
					"description": "The date the benefit takes effect.",
					"type": "string"
				},
				"ExpirationDate": {
					"format": "date-time",
					"description": "The date the benefit expires.",
					"type": "string"
				}
			}
		},
		"AssociationDiscountBenefit": {
			"description": "Information for an association product family discount.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "Partner family discount code",
					"type": "string"
				},
				"Name": {
					"description": "Name of product family discount",
					"type": "string"
				},
				"Description": {
					"description": "Description of the product family discount.",
					"type": "string"
				},
				"ProductCategoryCode": {
					"description": "The product category that this discount applies to.",
					"type": "string"
				},
				"DiscountPercent": {
					"format": "double",
					"description": "The discount percentage",
					"type": "number"
				},
				"DiscountCombinationCode": {
					"description": "The discount combination code, indicating how this discount is combined with other discounts.",
					"enum": [
						"Compound",
						"Add",
						"UseSmaller",
						"UseGreater",
						"UseFirst",
						"UseSecond",
						"UseFirstOrDefault",
						"UseSecondOrDefault"
					],
					"type": "string"
				}
			}
		},
		"AssociationLevelComponent": {
			"description": "Information for an association level components.",
			"type": "object",
			"properties": {
				"ItemNumber": {
					"description": "Item number of the component",
					"type": "string"
				},
				"AllocationPercent": {
					"format": "double",
					"description": "Allocation percent",
					"type": "number"
				},
				"IsOptional": {
					"description": "Identifies an optional component",
					"type": "boolean"
				},
				"SubscriptionLevelComponent": {
					"$ref": "#/definitions/SubscriptionAssociationLevelComponent",
					"description": "The Cir only data for this association level component"
				}
			}
		},
		"AssociationLevelEmailList": {
			"description": "Information for an email list on a association level.",
			"type": "object",
			"properties": {
				"ListCode": {
					"description": "The list code identifying the email list the association level is linked to",
					"type": "string"
				}
			}
		},
		"ContinuingEducationCourseCredit": {
			"description": "Information about a continuing education course",
			"type": "object",
			"properties": {
				"ProviderCode": {
					"description": "The continuing education provider code",
					"type": "string"
				},
				"ProviderName": {
					"description": "The description of the continuing education provider",
					"type": "string"
				},
				"CourseCode": {
					"description": "The continuing education course code",
					"type": "string"
				},
				"CourseName": {
					"description": "The description of the continuing education course",
					"type": "string"
				},
				"NumberOfUnits": {
					"format": "int32",
					"description": "The number of continuing education units (credits) earned from this course",
					"type": "integer"
				}
			}
		},
		"AssociationStructureNodeType": {
			"description": "Information about an association structure node",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The code for the current Association Structure Node Type",
					"type": "string"
				},
				"Name": {
					"description": "The Name for the current Association Structure Node Type",
					"type": "string"
				}
			}
		},
		"SubscriptionAssociationLevelComponent": {
			"description": "subscription information for an association level component",
			"type": "object",
			"properties": {
				"DeliveryCode": {
					"description": "The delivery code",
					"type": "string"
				},
				"IssueGroupCode": {
					"description": "The issue group code",
					"type": "string"
				},
				"SubscriptionTypeCode": {
					"description": "Subscription type code",
					"type": "string"
				}
			}
		},
		"AgreementUpdateRequest": {
			"description": "Information for requesting a subscription update.",
			"type": "object",
			"properties": {
				"RenewalPolicyCode": {
					"description": "The new renewal flag.  You must supply a electronic payment id or direct debit id to use\r\nautomatic charge renewals (C).",
					"type": "string"
				},
				"AutoRenewalChainId": {
					"description": "Auto renewal chain",
					"type": "string"
				},
				"AutoRenewalChainSequence": {
					"format": "int32",
					"description": "Auto renewal chain sequence",
					"type": "integer"
				},
				"AutoChargeElectronicPaymentId": {
					"description": "The electronic payment id to use for automatic renewals.",
					"type": "string"
				},
				"AutoChargeDirectDebitId": {
					"description": "The direct debit id to use for automatic renewals.",
					"type": "string"
				},
				"Participants": {
					"description": "A list of new or updated participants.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AgreementParticipantIn"
					}
				},
				"Association": {
					"$ref": "#/definitions/AssociationAgreementUpdateRequest",
					"description": "Information for requesting an association update."
				}
			}
		},
		"AgreementParticipantIn": {
			"description": "Information about an Agreement participant.",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "Customer number of the current participant.",
					"type": "string"
				},
				"AccessLevel": {
					"description": "What type of access does this participant have?",
					"enum": [
						"Administrator",
						"AdministratorWithAccess",
						"SelfAdministratorWithAccess",
						"AccessOnly"
					],
					"type": "string"
				},
				"Email": {
					"description": "The email address current participant.",
					"type": "string"
				}
			}
		},
		"AssociationAgreementUpdateRequest": {
			"description": "Information for updating an AMM (association membership).",
			"type": "object",
			"properties": {
				"ProfileId": {
					"description": "The profile id for an association membership.",
					"type": "string"
				},
				"CustomerListCodes": {
					"description": "The list codes of the customer lists the customer should be added to as part of their membership.",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"StructureNodeId": {
					"description": "Association structure node ID",
					"type": "string"
				},
				"IsIncludedInDirectory": {
					"description": "Specifies whether the association member allowed to be listed in the directory.",
					"type": "boolean"
				},
				"OptionalComponents": {
					"description": "The complete list of optional components to be included as part of the \r\nmembership agreement. \r\nIf populated: \r\n1. Any optional components not on the membership will be added \r\n2. Any optional components on the membership, but not on the list, will be removed",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AssociationOptionalComponent"
					}
				}
			}
		},
		"AssociationOptionalComponent": {
			"description": "Information on an optional association component",
			"type": "object",
			"properties": {
				"ItemNumber": {
					"description": "The optional component's item number",
					"type": "string"
				}
			}
		},
		"AgreementComparison": {
			"description": "A filter to apply to an agreement search",
			"type": "object",
			"properties": {
				"Field": {
					"description": "Name of field in table to compare",
					"enum": [
						"BillToCustomerNumber",
						"OrderByCustomerNumber",
						"ParticipantCustomerNumber",
						"AccessServiceCode",
						"BillingOrganizationCode"
					],
					"type": "string"
				},
				"Operator": {
					"description": "Operator to use in comparison",
					"enum": [
						"Equal",
						"NotEqual",
						"Less",
						"LessOrEqual",
						"Greater",
						"GreaterOrEqual",
						"IsNull",
						"IsNotNull",
						"Like",
						"NotLike",
						"Contains",
						"NotContains",
						"StartsWith",
						"NotStartsWith",
						"EndsWith",
						"NotEndsWith",
						"In",
						"Between"
					],
					"type": "string"
				},
				"Value": {
					"description": "Value to compare the field name to",
					"type": "string"
				}
			}
		},
		"SearchResult[Agreement]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Agreement"
					}
				}
			}
		},
		"AgreementRenewalOptions": {
			"description": "Options for renewing an agreement through the Advantage REST API.",
			"type": "object",
			"properties": {
				"PromotionCode": {
					"description": "Promotion code",
					"type": "string"
				},
				"PromotionChoiceCode": {
					"description": "Promotion choice",
					"type": "string"
				},
				"BillTo": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "Bill-to customer address, if changing for new term"
				},
				"OrderBy": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "Order-by customer, if changing for new term"
				},
				"AccessPeriodCode": {
					"description": "Access service period code, if changing for new term",
					"type": "string"
				},
				"AgreementType": {
					"description": "Agreement type",
					"enum": [
						"Complimentary",
						"Invoiceable",
						"Proforma",
						"Trial"
					],
					"type": "string"
				},
				"PurchaseOrderNumber": {
					"description": "Customer purchase order number",
					"type": "string"
				},
				"CopyPointsAndParts": {
					"description": "Copy forward the access points and participants from previous term?",
					"type": "boolean"
				},
				"UsePreviousTermDiscount": {
					"description": "Should the previous term's discount(s) should be preserved?",
					"type": "boolean"
				},
				"UseCustomerDiscount": {
					"description": "If not using previous term discount and a customer or customer type discount for the AMB service is defined,\r\nshould the customer or customer type discount be used?",
					"type": "boolean"
				},
				"NewDiscount": {
					"format": "double",
					"description": "If not using the previous term's or customer's discount(s)\r\nthis discount will be used for all access points.",
					"type": "number"
				},
				"UpdateWithPromotionDefaults": {
					"description": "Update the access points with the promotion choice defaults?",
					"type": "boolean"
				},
				"UsePreviousTermRenewalDiscount": {
					"description": "Use the previous term's renewal discount",
					"type": "boolean"
				},
				"CopyFreeDays": {
					"description": "Copy forward free days",
					"type": "boolean"
				},
				"CopyExtensionDays": {
					"description": "Copy forward extension days",
					"type": "boolean"
				},
				"CopyAdjustmentDays": {
					"description": "Copy forward adjustment days",
					"type": "boolean"
				},
				"CopyGraceDays": {
					"description": "Copy forward grace days",
					"type": "boolean"
				},
				"AutorenewChainId": {
					"description": "Auto-renewal chain ID, or blank if not in use",
					"type": "string"
				},
				"AutorenewChainSequence": {
					"format": "int32",
					"description": "Auto-renewal chain sequence, or zero if not in use",
					"type": "integer"
				},
				"IsOnApproval": {
					"description": "true if on-approval",
					"type": "boolean"
				},
				"AgencyReference": {
					"description": "The reference number the agency uses to identify the ordered item",
					"type": "string"
				},
				"MasterAgreementId": {
					"description": "Master Agreement Id",
					"type": "string"
				},
				"BillingCurrency": {
					"description": "The new billing currency to use on this renewal. Passing blank will\r\nuse the same billing currency off of the previous agreement.",
					"type": "string"
				},
				"RenewalPriceIncreasePercent": {
					"format": "double",
					"description": "Renewal Price Increase Percentage",
					"type": "number"
				},
				"MaxChangePercentage": {
					"format": "double",
					"description": "Maximum Change Percentage on Renewal",
					"type": "number"
				},
				"CommitOrder": {
					"description": "Should the order be completed?",
					"type": "boolean"
				}
			}
		},
		"OrderResponse": {
			"description": "The response object received when creating an order.",
			"type": "object",
			"properties": {
				"OrderNumber": {
					"description": "The order number of the created order.",
					"type": "string"
				}
			}
		},
		"AssociationMembershipChangeLevelRequest": {
			"description": "Options for changing the level of an association membership through the Advantage REST API.",
			"type": "object",
			"properties": {
				"PromotionCode": {
					"description": "Promotion code. Required.",
					"type": "string"
				},
				"PromotionChoiceCode": {
					"description": "Promotion choice. Required.",
					"type": "string"
				},
				"LevelCode": {
					"description": "Association membership level. Required.",
					"type": "string"
				},
				"CreditReasonCode": {
					"description": "Credit reason. Required.",
					"type": "string"
				},
				"ProfileId": {
					"description": "Profile ID. Optional.",
					"type": "string"
				}
			}
		},
		"CancelAgreementRequest": {
			"description": "Information for requesting an agreement to be canceled.",
			"type": "object",
			"properties": {
				"CancelReasonCode": {
					"description": "The reason code for the cancellation.",
					"type": "string"
				}
			}
		},
		"AgreementCancelCredit": {
			"description": "Information about the credit received as part of an agreement cancellation.",
			"type": "object",
			"properties": {
				"CutoffDate": {
					"format": "date-time",
					"description": "The cutoff date of the agreement, or null if the agreement is fully cancelled.",
					"type": "string"
				},
				"TotalCreditAmount": {
					"format": "double",
					"description": "This is the total cancel credit received from all terms cancelled with the cancel fee taken into account.",
					"type": "number"
				},
				"TaxCreditAmount": {
					"format": "double",
					"description": "This is the tax cancel credit received from all terms cancelled with the tax cancel fee taken into account.",
					"type": "number"
				},
				"CurrencyCode": {
					"description": "The currency of the cancel credit.",
					"type": "string"
				}
			}
		},
		"AssociationMembershipDirectoryFilter": {
			"description": "Filter criteria for association membership directory search",
			"type": "object",
			"properties": {
				"Search": {
					"description": "The generic search argument. (Typically from a search text box).\r\nThis term will be compared to the member's name.",
					"type": "string"
				},
				"StructureNodeId": {
					"description": "The ID of a structure node.\r\nOnly members from this node or a descendant of this node will be returned.",
					"type": "string"
				}
			}
		},
		"SearchResultWithCount[AssociationMemberSummary]": {
			"description": "The Order History response.",
			"type": "object",
			"properties": {
				"TotalCount": {
					"format": "int32",
					"description": "Gets the total number of orders found for the given customer.",
					"type": "integer"
				},
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AssociationMemberSummary"
					}
				}
			}
		},
		"AssociationMemberSummary": {
			"description": "Information for an association member.",
			"type": "object",
			"properties": {
				"Member": {
					"$ref": "#/definitions/AssociationMemberCustomerSummary",
					"description": "Information about the customer"
				},
				"StructureNode": {
					"$ref": "#/definitions/StructureNodeSummary",
					"description": "Information about the structure node"
				}
			}
		},
		"AssociationMemberCustomerSummary": {
			"description": "Summary information for a customer",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "The customer's Advantage customer number.",
					"type": "string"
				},
				"AddressCode": {
					"description": "Address code",
					"type": "string"
				},
				"FullName": {
					"description": "Customer name",
					"type": "string"
				},
				"Email": {
					"description": "Customer email address",
					"type": "string"
				}
			}
		},
		"StructureNodeSummary": {
			"description": "Summary information for an association structure node",
			"type": "object",
			"properties": {
				"Id": {
					"description": "The Node ID for the Association Structure Node",
					"type": "string"
				},
				"Name": {
					"description": "The Name for the Association Structure Node",
					"type": "string"
				}
			}
		},
		"AssociationLevelUpdateRequest": {
			"description": "Information to update on the association level header",
			"type": "object",
			"properties": {
				"Name": {
					"description": "The level name",
					"type": "string"
				},
				"Description": {
					"description": "The level description",
					"type": "string"
				},
				"QuestionnaireCode": {
					"description": "The questionnaire code",
					"type": "string"
				}
			}
		},
		"AssociationDiscountUpdateRequest": {
			"description": "Information to update on the association discount",
			"type": "object",
			"properties": {
				"Name": {
					"description": "Name of product family discount",
					"type": "string"
				},
				"Description": {
					"description": "Description of the product family discount.",
					"type": "string"
				},
				"ProductCategoryCode": {
					"description": "The product category that this discount applies to.",
					"type": "string"
				},
				"DiscountPercent": {
					"format": "double",
					"description": "The discount percentage",
					"type": "number"
				}
			}
		},
		"AssociationBenefitUpdateRequest": {
			"description": "Information to update on an association benefit.",
			"type": "object",
			"properties": {
				"Name": {
					"description": "Name of the partner benefit",
					"type": "string"
				},
				"Description": {
					"description": "Description of the partner benefit. Note this may contain HTML formatting.",
					"type": "string"
				},
				"EffectiveDate": {
					"format": "date-time",
					"description": "The date the benefit takes effect.",
					"type": "string"
				},
				"ExpirationDate": {
					"format": "date-time",
					"description": "The date the benefit expires.",
					"type": "string"
				}
			}
		},
		"LoginCredentials": {
			"description": "Information needed to authenticate with a password",
			"type": "object",
			"properties": {
				"Password": {
					"description": "The user's password.",
					"type": "string"
				}
			}
		},
		"AuthResponse": {
			"description": "The response to a login request.",
			"type": "object",
			"properties": {
				"IsAuthenticated": {
					"description": "Was the user authenticated and logged in?",
					"type": "boolean"
				},
				"User": {
					"$ref": "#/definitions/User",
					"description": "Information about the user, if authenticated."
				},
				"Authorizations": {
					"description": "Products the user is authorized to access.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Authorization"
					}
				}
			}
		},
		"User": {
			"description": "Information for an Advantage user authentication record.",
			"type": "object",
			"properties": {
				"AuthenticationNumber": {
					"description": "The unique number for the customer authentication method.",
					"type": "string"
				},
				"AuthenticationGroupCode": {
					"description": "The authentication group the web user belongs to.",
					"type": "string"
				},
				"UserName": {
					"description": "The web user's username.",
					"type": "string"
				},
				"DisplayName": {
					"description": "Full display name of the web user.",
					"type": "string"
				},
				"Name": {
					"$ref": "#/definitions/CustomerName",
					"description": "The web user's customer name."
				},
				"CustomerNumber": {
					"description": "The web user's Advantage customer number.",
					"type": "string"
				},
				"PrimaryEmail": {
					"description": "The web user's primary email address.",
					"type": "string"
				},
				"LastLoginUtc": {
					"format": "date-time",
					"description": "The web user's date of last log in.",
					"type": "string"
				},
				"IsLockedOut": {
					"description": "Is the user locked out of the account?",
					"type": "boolean"
				},
				"IsEnabled": {
					"description": "Is the user account enabled?",
					"type": "boolean"
				},
				"PasswordHint": {
					"description": "A password hint to can provided by a customer to help them remember their password",
					"type": "string"
				},
				"PasswordChangeRequired": {
					"description": "A password change can be required which will redirect the user to the screen to reset password.",
					"type": "boolean"
				}
			}
		},
		"Authorization": {
			"description": "Information for an authorized product based. This typically comes from authenticating a user.",
			"type": "object",
			"properties": {
				"Type": {
					"description": "Type of the authorized product.",
					"enum": [
						"Product",
						"Subscription",
						"Access",
						"Conference",
						"BackIssue",
						"Package",
						"Unknown",
						"Membership",
						"Donation",
						"PrintJob",
						"Reprint",
						"Service",
						"Stock"
					],
					"type": "string"
				},
				"ItemNumber": {
					"description": "Item number of the authorized product.",
					"type": "string"
				},
				"SubscriptionId": {
					"description": "The ID of the subscription providing the authorization.  \r\nFor an access item this will be the agreement ID.",
					"type": "string"
				},
				"HostCode": {
					"description": "Content host code, applicable only to access items.",
					"type": "string"
				},
				"QuantityOrdered": {
					"format": "int32",
					"description": "Total quantity ordered.",
					"type": "integer"
				},
				"QuantityRemaining": {
					"format": "int32",
					"description": "Quantity remaining.",
					"type": "integer"
				},
				"Starts": {
					"format": "date-time",
					"description": "Date and time authorization began.",
					"type": "string"
				},
				"Expires": {
					"format": "date-time",
					"description": "Date and time authorization expires.",
					"type": "string"
				}
			}
		},
		"IdBasedLoginCredentials": {
			"description": "Information needed for authentication for Id based authentication. (Athens, Shibboleth, etc.)",
			"type": "object",
			"properties": {
				"Id": {
					"description": "An authentication ID.",
					"type": "string"
				},
				"SingleSignOnAuthenticationType": {
					"description": "Single sign-on authentication type (e.g. Google)",
					"enum": [
						"Athens",
						"CountryCode",
						"Facebook",
						"Google",
						"LinkedIn",
						"SingleSignOn",
						"Shibboleth",
						"Twitter"
					],
					"type": "string"
				}
			}
		},
		"CustomerAuthentications": {
			"description": "Object the contains lists of the different types of authentication information.",
			"type": "object",
			"properties": {
				"SingleSignOns": {
					"description": "Objects representing authentication information that are Signle Sign-On based.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/SingleSignOn"
					}
				},
				"IpAddresses": {
					"description": "Object representing authentication information that are IP Addressed-based",
					"type": "array",
					"items": {
						"$ref": "#/definitions/IpAddressAuthentication"
					}
				},
				"Users": {
					"description": "Information for an Advantage user authentication record.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/User"
					}
				}
			}
		},
		"SingleSignOn": {
			"description": "Objects representing Authentication information that are Single Sign-On based",
			"type": "object",
			"properties": {
				"AuthenticationNumber": {
					"description": "The unique number for the customer authentication method.",
					"type": "string"
				},
				"AuthenticationValue": {
					"description": "The ID for the single sign on authentication.\r\nThe ID can vary depending on the type of single sign on beign used.",
					"type": "string"
				},
				"SingleSignOnType": {
					"description": "The type of single sign on being used",
					"enum": [
						"Athens",
						"CountryCode",
						"Facebook",
						"Google",
						"LinkedIn",
						"SingleSignOn",
						"Shibboleth",
						"Twitter"
					],
					"type": "string"
				},
				"AuthenticationGroupCode": {
					"description": "The Authentication Group this authenication belongs to",
					"type": "string"
				},
				"SecurityRoleCode": {
					"description": "Security Role",
					"type": "string"
				},
				"IsEnabled": {
					"description": "Is enabled?",
					"type": "boolean"
				}
			}
		},
		"IpAddressAuthentication": {
			"description": "Object representing authentication information that are IP Addressed-based",
			"type": "object",
			"properties": {
				"AuthenticationNumber": {
					"description": "The unique number for the customer authentication method.",
					"type": "string"
				},
				"IpAddress": {
					"description": "IP Address or range",
					"type": "string"
				},
				"AuthenticationGroupCode": {
					"description": "The Authentication Group this authentication belongs to",
					"type": "string"
				},
				"SecurityRoleCode": {
					"description": "Security Role",
					"type": "string"
				},
				"IsEnabled": {
					"description": "Is enabled?",
					"type": "boolean"
				}
			}
		},
		"AuthenticationGroup": {
			"description": "Authentication Group Model",
			"type": "object",
			"properties": {
				"Code": {
					"description": "Value of Authentication Group Code",
					"type": "string"
				},
				"Name": {
					"description": "Value of Authentication Group Name",
					"type": "string"
				},
				"PasswordSecuritySetting": {
					"description": "How are user passwords secured in the database for this authentication group?",
					"enum": [
						"Masked",
						"Md5Hash",
						"None",
						"SaltedMd5"
					],
					"type": "string"
				},
				"LastUpdatedBy": {
					"description": "Value of Last Updated by",
					"type": "string"
				},
				"LastUpdated": {
					"format": "date-time",
					"description": "Value of Last Updated on",
					"type": "string"
				},
				"IsInUse": {
					"description": "Is this authentication group in use?  If it is in use then the password security setting cannot be changed.",
					"type": "boolean"
				}
			}
		},
		"AuthenticationGroupUpdateRequest": {
			"description": "Model for Update of an Authentication Group, given the Code",
			"type": "object",
			"properties": {
				"Name": {
					"description": "Value of Authentication Group Name",
					"type": "string"
				},
				"PasswordSecuritySetting": {
					"description": "How are user passwords secured in the database for this authentication group?  This setting\r\ncannot be updated once an authentication group is in use.",
					"enum": [
						"Masked",
						"Md5Hash",
						"None",
						"SaltedMd5"
					],
					"type": "string"
				}
			}
		},
		"AuthenticationGroupIn": {
			"description": "Model for Create/Update of an Authentication Group",
			"type": "object",
			"properties": {
				"Code": {
					"description": "Value of Authentication Group Code",
					"type": "string"
				},
				"Name": {
					"description": "Value of Authentication Group Name",
					"type": "string"
				},
				"PasswordSecuritySetting": {
					"description": "How are user passwords secured in the database for this authentication group?  This setting\r\ncannot be updated once an authentication group is in use.",
					"enum": [
						"Masked",
						"Md5Hash",
						"None",
						"SaltedMd5"
					],
					"type": "string"
				}
			}
		},
		"SavedBankAccount": {
			"description": "Information for a Direct Debit payment.",
			"type": "object",
			"properties": {
				"ElectronicPaymentId": {
					"description": "The unique payment identifier.",
					"type": "string"
				},
				"PaymentMethod": {
					"$ref": "#/definitions/DirectDebitPaymentMethod",
					"description": "The direct debit payment method."
				},
				"BankId": {
					"description": "The identifier for the bank that holds the account.",
					"type": "string"
				},
				"AccountNumber": {
					"description": "The number of the account.",
					"type": "string"
				},
				"AccountType": {
					"description": "The type of account (checking or savings).",
					"enum": [
						"Saving",
						"Checking"
					],
					"type": "string"
				},
				"IsValidForFuturePayments": {
					"description": "Is this debit valid for use in the future?",
					"type": "boolean"
				},
				"IsWebDefault": {
					"description": "Is this card a default for orders coming from the web?",
					"type": "boolean"
				},
				"DateLastUsed": {
					"format": "date-time",
					"description": "The date the direct debit was last used",
					"type": "string"
				},
				"DateAdded": {
					"format": "date-time",
					"description": "The date the direct debit was added",
					"type": "string"
				},
				"Nickname": {
					"description": "Affiliate nickname of the direct debit",
					"type": "string"
				}
			}
		},
		"DirectDebitPaymentMethod": {
			"description": "Information pertaining to a payment method.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The code identifying the payment method.",
					"type": "string"
				},
				"Name": {
					"description": "The name of this payment method.",
					"type": "string"
				},
				"SaveForFutureUse": {
					"description": "The default value of Save For Future Use for this payment method",
					"type": "string"
				},
				"PromptForBankId": {
					"description": "How to prompt user for Bank Id",
					"enum": [
						"Closed",
						"Hidden",
						"Optional",
						"Required"
					],
					"type": "string"
				},
				"PromptForBranchName": {
					"description": "How to prompt user for Branch Name",
					"enum": [
						"Closed",
						"Hidden",
						"Optional",
						"Required"
					],
					"type": "string"
				},
				"PromptForCheckingSaving": {
					"description": "How to prompt user for Account Type",
					"enum": [
						"Closed",
						"Hidden",
						"Optional",
						"Required"
					],
					"type": "string"
				},
				"PromptForConsentDate": {
					"description": "How to prompt user for Consent Date",
					"enum": [
						"Closed",
						"Hidden",
						"Optional",
						"Required"
					],
					"type": "string"
				},
				"PromptForOrigin": {
					"description": "How to prompt user for Origin",
					"enum": [
						"Closed",
						"Hidden",
						"Optional",
						"Required"
					],
					"type": "string"
				},
				"PromptForPersonalId": {
					"description": "How to prompt user for Personal Id",
					"enum": [
						"Closed",
						"Hidden",
						"Optional",
						"Required"
					],
					"type": "string"
				}
			}
		},
		"DirectDebitUpdateRequest": {
			"description": "Information for updating a direct debit. Fields are optional and won't result in a change if none provided.",
			"type": "object",
			"properties": {
				"SaveForFuturePayments": {
					"description": "Is this debit valid for use in the future?",
					"type": "boolean"
				},
				"IsWebDefault": {
					"description": "Is this card a default for orders coming from the web?",
					"type": "boolean"
				}
			}
		},
		"BankAccountCreateRequest": {
			"description": "Information for adding a direct debit payment method.",
			"type": "object",
			"properties": {
				"PaymentMethodCode": {
					"description": "The direct debit payment code.",
					"type": "string"
				},
				"BankId": {
					"description": "The identifier for the bank that holds the account.",
					"type": "string"
				},
				"AccountNumber": {
					"description": "The number of the account.",
					"type": "string"
				},
				"AccountType": {
					"description": "The type of account (checking or savings)",
					"enum": [
						"Saving",
						"Checking"
					],
					"type": "string"
				},
				"SaveForFutureUse": {
					"description": "Is this debit valid for use in the future?",
					"type": "boolean"
				},
				"IsWebDefault": {
					"description": "Is this direct debit a default for orders coming from the web?",
					"type": "boolean"
				},
				"CountryCode": {
					"description": "The country code of this direct debit account.",
					"type": "string"
				}
			}
		},
		"SavedPaymentResponse": {
			"description": "The response object received when saving a new payment method to a customer account.",
			"type": "object",
			"properties": {
				"ElectronicPaymentId": {
					"description": "The ID for the saved payment method",
					"type": "string"
				},
				"AccountNumberEnding": {
					"description": "Last four-digits of the account number",
					"type": "string"
				},
				"PaymentType": {
					"description": "Payment type (e.g. CreditCard)",
					"enum": [
						"Invalid",
						"CreditCard",
						"DirectDebit",
						"BillMe",
						"AvailableCredit",
						"Check",
						"BillPaymentService",
						"GiftCertificate",
						"MiscellaneousCredit",
						"WriteOff",
						"DigitalWallet"
					],
					"type": "string"
				}
			}
		},
		"PaymentMethodUses": {
			"description": "Holds the subscriptions, agreements and orders that are linked to a payment method",
			"type": "object",
			"properties": {
				"Subscriptions": {
					"description": "Subscriptions",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Subscription"
					}
				},
				"Agreements": {
					"description": "Agreements",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Agreement"
					}
				},
				"Orders": {
					"description": "Orders, This is only implemented for Credit Cards",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Order"
					}
				}
			}
		},
		"Order": {
			"description": "Information pertaining to an order.",
			"type": "object",
			"properties": {
				"OrderNumber": {
					"description": "The Advantage order number.",
					"type": "string"
				},
				"Status": {
					"$ref": "#/definitions/CombinedOrderStatus",
					"description": "The overall order status"
				},
				"BillTo": {
					"$ref": "#/definitions/CustomerAddressSummary",
					"description": "The customer being billed for the order."
				},
				"ShipTo": {
					"$ref": "#/definitions/CustomerAddressSummary",
					"description": "The customer to which the order is being shipped."
				},
				"Amounts": {
					"$ref": "#/definitions/OrderAmounts",
					"description": "Pricing information"
				},
				"ShippingInfo": {
					"$ref": "#/definitions/OrderShippingInfo",
					"description": "Shipping information"
				},
				"BillingOrganizationCode": {
					"description": "The organization being billed.",
					"type": "string"
				},
				"OrderDate": {
					"format": "date-time",
					"description": "The date the order is being placed.",
					"type": "string"
				},
				"OrderType": {
					"description": "The order type.",
					"enum": [
						"CreditMemoReturnOrder",
						"GratisOrder",
						"InvoiceableOrder",
						"ModifyOrder",
						"ProFormaOrder",
						"PostShippedOrder",
						"RepeatingOrder",
						"PreviewOrder",
						"WarehouseTransfer"
					],
					"type": "string"
				},
				"PurchaseOrderNumber": {
					"description": "The purchase order number given by the customer. \r\nCustomers and sales types can be setup to require this item.",
					"type": "string"
				},
				"PromotionCode": {
					"description": "The promotion code for the promotion the order was placed under.",
					"type": "string"
				},
				"SalesRepCode": {
					"description": "The code identifying the sales representative receiving credit for the order.",
					"type": "string"
				},
				"WebBillMeAllowed": {
					"description": "Are bill-me orders allowed?",
					"enum": [
						"Yes",
						"No",
						"Assumed"
					],
					"type": "string"
				},
				"CurrencyCode": {
					"description": "The currency code for the order.",
					"type": "string"
				},
				"DocketNumber": {
					"description": "The audit tracking number assigned to incoming documents.",
					"type": "string"
				},
				"OrderSourceCode": {
					"description": "Order source, indicating how the order came in.",
					"type": "string"
				},
				"GratisReasonCode": {
					"description": "The gratis reason code, indicating why you are entering a gratis order for this customer.",
					"type": "string"
				},
				"WarehouseCode": {
					"description": "The warehouse items will be shipped from for the current order.",
					"type": "string"
				},
				"BackorderFlag": {
					"description": "Are items are allowed to be back-ordered for the current order?",
					"type": "string"
				},
				"RefundFlag": {
					"description": "Indicates whether overpayments should be refunded to the customer.",
					"type": "string"
				},
				"ControlGroupDate": {
					"format": "date-time",
					"description": "The control group date",
					"type": "string"
				},
				"ControlGroupId": {
					"description": "The control group ID.",
					"type": "string"
				},
				"CreditReasonCode": {
					"description": "The credit creason code, indicates why you are entering a credtit memo for this order",
					"type": "string"
				},
				"IsBackorderFill": {
					"description": "Is this a backorder-fill order? A backorder-fill order\r\nis an order that was generated by Advantage to send back-ordered items that a\r\ncustomer ordered as part of a previous order.",
					"type": "boolean"
				},
				"IsOnApproval": {
					"description": "Is the order on approval?",
					"type": "boolean"
				},
				"IsPhoneOrder": {
					"description": "Is this a phone order?",
					"type": "boolean"
				},
				"IsPremiumFill": {
					"description": "Is this a premium-fill order?  A premium-fill order\r\nis an order that was generated by Advantage to send premiums that a\r\ncustomer earned based on another order, a payment, etc.",
					"type": "boolean"
				},
				"PurchaseOrderExpireDate": {
					"format": "date-time",
					"description": "The expiration date of the purchase order.",
					"type": "string"
				},
				"ProfileId": {
					"description": "A Profile Identifier Is A System-Generated Number To Uniquely Identify A Set Of Answers To Questionnaire(s).",
					"type": "string"
				},
				"ProformaOrderNumber": {
					"description": "The originating proforma order number for current order.",
					"type": "string"
				},
				"QuestionnaireCode": {
					"description": "The questionnaire name, identifying a particular extended demographics questionnaire.",
					"type": "string"
				},
				"EntryOrganizationCode": {
					"description": "The organization responsible for recording the transaction.",
					"type": "string"
				},
				"ApplyToOrderNumber": {
					"description": "The original order number for a credit transaction.",
					"type": "string"
				},
				"ReferredByCustomerNumber": {
					"description": "The customer number of the reference customer.",
					"type": "string"
				},
				"PremiumSetCode": {
					"description": "The first premium set for the order.",
					"type": "string"
				},
				"InvoiceDate": {
					"format": "date-time",
					"description": "The date on the invoice for the order.",
					"type": "string"
				},
				"Lines": {
					"description": "The order lines of the order.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderLine"
					}
				},
				"Payments": {
					"description": "The payments applied to the order.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderPayment"
					}
				},
				"InstallmentBilling": {
					"$ref": "#/definitions/OrderInstallmentBilling",
					"description": "Information pertaining to billing in installments."
				},
				"DefaultPaymentId": {
					"description": "The default payment method. (An Advantage electronic payment identifier).",
					"type": "string"
				},
				"Demographics": {
					"description": "Demographic field values for the order",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DemographicValue"
					}
				},
				"AssociatedOrders": {
					"description": "Associated order numbers",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AssociatedOrder"
					}
				},
				"AppliedGiftCertificates": {
					"description": "The gift certificates that have been applied to this order",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AppliedGiftCertificate"
					}
				}
			}
		},
		"CombinedOrderStatus": {
			"description": "The status of each part of the order",
			"type": "object",
			"properties": {
				"CombinedStatusCode": {
					"description": "The status of the order. Order status is determined by taking the last order status from \r\nthe original PRO, CIR, AMB, CEM orders (for combined orders).\r\n            \r\nThe order status codes are, in order of processing:\r\n    C - closed to entry\r\n    P - processed/shipping\r\n    B - invoiced and back-ordered\r\n    F - invoiced and finished processing",
					"type": "string"
				},
				"AccessStatusCode": {
					"description": "The order status for AMB items on the original order (if any).\r\nIf there are multiple agreements, the status will be based on the agreement\r\nwith the \"lowest\" status: U - Not Released, W - Waiting, A - Released",
					"type": "string"
				},
				"ConferenceStatusCode": {
					"description": "The order status for CEM items on the original order (if any).\r\nSee SYSKWV keyword CINV-PST for values.",
					"type": "string"
				},
				"SubscriptionStatusCode": {
					"description": "Order status for CIR items on the original order (if any).\r\nC - closed, P - posted, I - posted and invoiced",
					"type": "string"
				},
				"ProductStatusCode": {
					"description": "The order status for PRO items on the original order.",
					"type": "string"
				},
				"ProductStatusName": {
					"description": "A description of the order status code",
					"type": "string"
				}
			}
		},
		"OrderAmounts": {
			"description": "Pricing amounts for an order. Some properties may not be set for some types of orders.",
			"type": "object",
			"properties": {
				"MinimumPayment": {
					"format": "double",
					"description": "The minimum payment amount required for the order.",
					"type": "number"
				},
				"DiscountPercent": {
					"format": "double",
					"description": "The discount percentage of the order.  A 40% discount is entered as 40.",
					"type": "number"
				},
				"TotalDiscountOrdered": {
					"format": "double",
					"description": "The total amount discounted from the total cost of the items ordered.",
					"type": "number"
				},
				"MiscChargesOrdered": {
					"format": "double",
					"description": "Any other charges being billed to the customer for the items ordered.",
					"type": "number"
				},
				"ShippingChargesOrdered": {
					"format": "double",
					"description": "The amount charged for shipping the items ordered.",
					"type": "number"
				},
				"TotalSalesAmountOrdered": {
					"format": "double",
					"description": "The total sales amount for the items ordered.",
					"type": "number"
				},
				"SalesTaxOrdered": {
					"format": "double",
					"description": "The sales tax on the items ordered.",
					"type": "number"
				},
				"TotalCostOrdered": {
					"format": "double",
					"description": "The total cost for the items ordered.",
					"type": "number"
				},
				"MiscCharges": {
					"format": "double",
					"description": "Any other charges being billed to the customer for the order.",
					"type": "number"
				},
				"TotalCost": {
					"format": "double",
					"description": "The order total.",
					"type": "number"
				},
				"TotalDiscount": {
					"format": "double",
					"description": "The total amount discounted from the total cost of the order.",
					"type": "number"
				},
				"TotalSalesAmount": {
					"format": "double",
					"description": "The total sales amount for the order.",
					"type": "number"
				},
				"ShippingCharges": {
					"format": "double",
					"description": "The amount charged for shipping the order.",
					"type": "number"
				},
				"SalesTax": {
					"format": "double",
					"description": "The amount of sales tax on the order.",
					"type": "number"
				},
				"PaymentsReceived": {
					"format": "double",
					"description": "The total amount credited to the order.",
					"type": "number"
				},
				"BalanceDue": {
					"format": "double",
					"description": "The amount due for the order.",
					"type": "number"
				},
				"InitialPayment": {
					"format": "double",
					"description": "The initial payment for the order",
					"type": "number"
				}
			}
		},
		"OrderShippingInfo": {
			"description": "Information pertaining to shipping an order.",
			"type": "object",
			"properties": {
				"IsReturn": {
					"description": "Is this a return order? A return order is generated to track products that are returned by the customer.",
					"type": "boolean"
				},
				"IsRushShip": {
					"description": "Is this order flagged to be shipped immediately?",
					"type": "boolean"
				},
				"RequestedShipViaCode": {
					"description": "The requested shipping method for the order.",
					"type": "string"
				},
				"IsFreeShipping": {
					"description": "Do all items in this order receive free shipping?",
					"type": "boolean"
				},
				"ShipDate": {
					"format": "date-time",
					"description": "The requested date for the order to be picked for shipping.",
					"type": "string"
				},
				"ActualShipDate": {
					"format": "date-time",
					"description": "The actual ship date for the order.",
					"type": "string"
				},
				"IsPostShipped": {
					"description": "Has the order already been shipped?",
					"type": "boolean"
				},
				"IsDropShipped": {
					"description": "Has the order shipped from the printer?",
					"type": "boolean"
				},
				"ActualShipViaCode": {
					"description": "The actual shipping method for the order.",
					"type": "string"
				},
				"ShipThroughCustomerNumber": {
					"description": "The customer number of the freight forwarder that will receive the shipment to distribute to the ship-to.",
					"type": "string"
				},
				"ShipToCount": {
					"format": "int32",
					"description": "The number of distinct ship-to addresses.",
					"type": "integer"
				},
				"TrackingInformation": {
					"description": "Tracking information for the various shipments for the order.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderTrackingInformation"
					}
				}
			}
		},
		"OrderLine": {
			"description": "Information for a line in an order. \r\nThis contains information for order lines of various types (product, subscription, agreement, etc.)\r\nOnly properties for the appropriate order line type are populated.",
			"type": "object",
			"properties": {
				"OrderNumber": {
					"description": "The Advantage order number.",
					"type": "string"
				},
				"LineNumber": {
					"format": "int32",
					"description": "The line number of the order line within the order.",
					"type": "integer"
				},
				"ItemNumber": {
					"description": "The item number, identifying which product is being ordered.",
					"type": "string"
				},
				"ProductType": {
					"description": "The product type of the order line (subscription, product, etc.).",
					"enum": [
						"Product",
						"Subscription",
						"Access",
						"Conference",
						"BackIssue",
						"Package",
						"Unknown",
						"Membership",
						"Donation",
						"PrintJob",
						"Reprint",
						"Service",
						"Stock"
					],
					"type": "string"
				},
				"ProductName": {
					"description": "The product title. If available, the full title is returned. Otherwise, the short title is returned.",
					"type": "string"
				},
				"PromotionCode": {
					"description": "The promotion code (sometimes referred to as key code).",
					"type": "string"
				},
				"PromotionChoice": {
					"description": "The promotion choice, indicating a set of default settings for an order line.",
					"type": "string"
				},
				"ShipTo": {
					"$ref": "#/definitions/CustomerAddressSummary",
					"description": "Information pertaining to the ship-to customer."
				},
				"IsPackageComponent": {
					"description": "Is the order line a package component?  (Package component lines are added automatically when a \r\npackage header is added and the package is \"exploded\" into it's components.)",
					"type": "boolean"
				},
				"IsAssociationComponent": {
					"description": "Is the order line an association component?  (Association component lines are added automatically when an \r\nassociation is added and the association is \"exploded\" into it's components.)",
					"type": "boolean"
				},
				"IsPackageHeader": {
					"description": "Is the order line a package header?",
					"type": "boolean"
				},
				"IsPremium": {
					"description": "Is the order line a premium?  Premiums are free items added to qualifying orders.",
					"type": "boolean"
				},
				"QuantityOrdered": {
					"format": "int32",
					"description": "The quantity ordered for the current order line. For a subscribed product\r\nthe quantity ordered is the number of copies of each issue to receive.",
					"type": "integer"
				},
				"CurrencyCode": {
					"description": "The currency code in which this item is to be billed.",
					"type": "string"
				},
				"UnitPrice": {
					"format": "double",
					"description": "The price per quantity ordered.",
					"type": "number"
				},
				"SalesAmount": {
					"format": "double",
					"description": "The sales amount (i.e. unit price times quantity ordered) for the order line.\r\nThis sales amount includes (PRO) items that are not shipping (e.g. back-ordered) \r\nbut does not include lost sales.",
					"type": "number"
				},
				"Discount": {
					"format": "double",
					"description": "The discount amount, \r\nwhich excludes any (PRO) items that are not shipping (e.g. back-ordered, lost sales, etc.).",
					"type": "number"
				},
				"ShippingCharges": {
					"format": "double",
					"description": "Gets the shipping/postage charges, \r\nwhich excludes any (PRO) items that are not shipping (e.g. back-ordered, lost sales, etc.).",
					"type": "number"
				},
				"Tax": {
					"format": "double",
					"description": "The amount of tax,\r\nwhich excludes any (PRO) items that are not shipping (e.g. back-ordered, lost sales, etc.).",
					"type": "number"
				},
				"TotalCost": {
					"format": "double",
					"description": "The total cost, including order-line discounts, taxes, shipping.\r\nThe total cost excludes any (PRO) items that are not shipping (e.g. back-ordered, lost sales, etc).",
					"type": "number"
				},
				"ShippingChargesOrdered": {
					"format": "double",
					"description": "The shipping/postage charges for the order line.",
					"type": "number"
				},
				"DiscountOrdered": {
					"format": "double",
					"description": "The discount amount for the order line.",
					"type": "number"
				},
				"TaxOrdered": {
					"format": "double",
					"description": "The amount of tax for the order line.",
					"type": "number"
				},
				"SalesAmountOrdered": {
					"format": "double",
					"description": "The sales amount (i.e. unit price times quantity ordered) for the order line. \r\nIncludes product tax, if tax is included in price.",
					"type": "number"
				},
				"SalesAmountShipped": {
					"format": "double",
					"description": "The sales amount of shipped items (i.e. unit price times quantity shipped) for the order line. \r\nIncludes product tax, if tax is included in price.",
					"type": "number"
				},
				"TotalCostOrdered": {
					"format": "double",
					"description": "The total cost, including order-line discounts, taxes, shipping.",
					"type": "number"
				},
				"Status": {
					"description": "The order line status.",
					"enum": [
						"Unknown",
						"Subscription",
						"PendingEvaluation",
						"Shipping",
						"Discontinued",
						"ReorderLater",
						"Backordered",
						"NotYetPublished",
						"Registered"
					],
					"type": "string"
				},
				"PackageHeaderLineNumber": {
					"format": "int32",
					"description": "The line number of the package header, if the order line is a package component.",
					"type": "integer"
				},
				"AssociationAgreementId": {
					"description": "The agreement Id of the association if par tof an association",
					"type": "string"
				},
				"RecurringDonationFrequency": {
					"format": "int32",
					"description": "The number of months between recurring donation contributions.",
					"type": "integer"
				},
				"Demographics": {
					"description": "Demographic field values for the order line",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DemographicValue"
					}
				},
				"Access": {
					"$ref": "#/definitions/AccessOrderLine",
					"description": "Information about an AMB (agreement) order line."
				},
				"Subscription": {
					"$ref": "#/definitions/SubscriptionOrderLine",
					"description": "Information for creating a CIR (subscription) order line."
				},
				"Product": {
					"$ref": "#/definitions/ProductOrderLine",
					"description": "Information for creating a PRO (product) order line."
				},
				"Conference": {
					"$ref": "#/definitions/ConferenceOrderLine",
					"description": "Information for creating a CEM (conference) order line."
				},
				"Association": {
					"$ref": "#/definitions/AssociationOrderLine",
					"description": "Information about an AMM (association membership) order line."
				},
				"GiftMessage": {
					"$ref": "#/definitions/GiftMessage",
					"description": "Gift message for the order line"
				}
			}
		},
		"OrderPayment": {
			"description": "Information about a payment made on an order.",
			"type": "object",
			"properties": {
				"PaymentMethod": {
					"$ref": "#/definitions/PaymentMethod",
					"description": "The payment method"
				},
				"PaymentNumberEnding": {
					"description": "The last four digits of the card or account number.",
					"type": "string"
				},
				"Date": {
					"format": "date-time",
					"description": "The date the payment was applied.",
					"type": "string"
				},
				"Amount": {
					"format": "double",
					"description": "The amount paid.",
					"type": "number"
				}
			}
		},
		"OrderInstallmentBilling": {
			"description": "Information about installment billing.",
			"type": "object",
			"properties": {
				"InstallmentPlan": {
					"$ref": "#/definitions/InstallmentBillingPlan",
					"description": "The installment billing code."
				},
				"DownPayment": {
					"format": "double",
					"description": "The down payment. (The minimum down payment if this is an estimation.)",
					"type": "number"
				},
				"InstallmentFee": {
					"format": "double",
					"description": "The installment fee",
					"type": "number"
				},
				"Schedule": {
					"description": "The Schedule for the installment billing. This is an estimate if the order is not yet completed.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/InstallmentBill"
					}
				},
				"NextPaymentAmount": {
					"format": "double",
					"description": "The amount of the next payment due.",
					"type": "number"
				},
				"NextPaymentDue": {
					"format": "date-time",
					"description": "The date the next payment is due.",
					"type": "string"
				},
				"IsEstimate": {
					"description": "Whether or not this is an estimated installment billing plan.\r\nThis is an estimate if the order is not yet completed.",
					"type": "boolean"
				}
			}
		},
		"AssociatedOrder": {
			"description": "Information about an associated order",
			"type": "object",
			"properties": {
				"OrderNumber": {
					"description": "Order Number",
					"type": "string"
				},
				"OrderTotal": {
					"format": "double",
					"description": "Total Sales",
					"type": "number"
				}
			}
		},
		"AppliedGiftCertificate": {
			"description": "Information about the application of a gift certificate to an order",
			"type": "object",
			"properties": {
				"CertificateNumber": {
					"description": "Gift certificate number",
					"type": "string"
				},
				"CreditVoucherNumber": {
					"description": "Credit voucher number",
					"type": "string"
				},
				"AmountApplied": {
					"format": "double",
					"description": "Amount applied from the gift certificate to the order",
					"type": "number"
				},
				"CurrencyCode": {
					"description": "Currency of the application",
					"type": "string"
				},
				"ExpirationDate": {
					"format": "date-time",
					"description": "Date that the gift certificate expires",
					"type": "string"
				}
			}
		},
		"OrderTrackingInformation": {
			"description": "Information for tracking a shipment.",
			"type": "object",
			"properties": {
				"OrderNumber": {
					"description": "Identifies the order for the contents of this shipment.",
					"type": "string"
				},
				"ShippingSequence": {
					"description": "Identifies this shipment within an order, for associating order lines with the containing shipment.",
					"type": "string"
				},
				"TrackingNumber": {
					"description": "The tracking number for the shipment.",
					"type": "string"
				},
				"TrackingUrl": {
					"description": "The URL to see the status on the shipping company website.",
					"type": "string"
				},
				"ShippingDate": {
					"format": "date-time",
					"description": "The date the shipment was shipped.",
					"type": "string"
				},
				"Weight": {
					"format": "double",
					"description": "The total weight for the shipment.",
					"type": "number"
				},
				"ShipViaCode": {
					"description": "The actual ship via used for the shipment.",
					"type": "string"
				}
			}
		},
		"AccessOrderLine": {
			"description": "Information about an access order line",
			"type": "object",
			"properties": {
				"RenewalPolicyCode": {
					"description": "Indicates whether a renewal notice should be sent to the subscriber.",
					"type": "string"
				},
				"AgreementId": {
					"description": "The agreement ID.",
					"type": "string"
				},
				"AgreementType": {
					"description": "The type, categorizing the agreement.",
					"enum": [
						"Complimentary",
						"Invoiceable",
						"Proforma",
						"Trial"
					],
					"type": "string"
				},
				"PriceCode": {
					"description": "Price code, determining the unit price.",
					"type": "string"
				},
				"AccessServiceCode": {
					"description": "The service ID, defining a content access service - the top level of product structure in AMB.",
					"type": "string"
				},
				"AccessItemCode": {
					"description": "The service type, a way of packaging content within an access service.",
					"type": "string"
				},
				"TermNumber": {
					"format": "int32",
					"description": "The term number within the agreement.",
					"type": "integer"
				},
				"VersionNumber": {
					"format": "int32",
					"description": "The version number within the agreement term.",
					"type": "integer"
				},
				"AccessPeriodCode": {
					"description": "The period code, defining the length of the agreement.",
					"type": "string"
				},
				"Participants": {
					"description": "A List of email addresses of the participants to the agreement.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AgreementParticipant"
					}
				},
				"PricingMethod": {
					"description": "The pricing method of the agreement, denoting how the price of the agreement is determined.",
					"enum": [
						"AgreementBased",
						"ParticipantBased",
						"QuantityBased"
					],
					"type": "string"
				}
			}
		},
		"SubscriptionOrderLine": {
			"description": "Information about a subscription (CIR) order line",
			"type": "object",
			"properties": {
				"Publication": {
					"$ref": "#/definitions/PublicationSummary",
					"description": "The expected number of issues per year for the publication."
				},
				"RenewalPolicyCode": {
					"description": "Indicates whether a renewal notice should be sent to the subscriber.",
					"type": "string"
				},
				"Starts": {
					"format": "date-time",
					"description": "When the subscription/agreement starts; the start date maybe be assigned when the order line is created, \r\nor it may be assigned (or updated) later when the order is posted.",
					"type": "string"
				},
				"SubscriptionTypeCode": {
					"description": "The subscription type code.",
					"type": "string"
				},
				"DeliveryCode": {
					"description": "The subscription delivery code.",
					"type": "string"
				},
				"SubscriptionExpires": {
					"format": "date-time",
					"description": "The final expire date. For subscriptions, a final expire date will not be assigned at order entry time\r\nunless the start date is assigned.",
					"type": "string"
				},
				"IsModification": {
					"description": "Is the current subscription order line a modification transaction?  A subscription\r\nmodification transaction changes an existing subscription without adding a new term.\r\n(New subscriptions and renewals are not modification transactions.)",
					"type": "boolean"
				},
				"MembershipOrganizationCode": {
					"description": "A membership organization associates the subscription with a membership.",
					"type": "string"
				},
				"OperationCode": {
					"description": "The operation code indicates if the order line is a new individual subscription,\r\nan individual renewal, an upgrade, a demographics-only change, etc.",
					"type": "string"
				},
				"OperationName": {
					"description": "The name of the operation code.",
					"type": "string"
				},
				"ProfileId": {
					"description": "The profile ID for the subscription order line.  Demographics\r\ncan be collected in a profile, which is a set of answers to questionnaire\r\nquestions.  Use the WebProfile class to create a profile and add responses.\r\nUse WebQuestionnaire to get information about a questionnaire.",
					"type": "string"
				},
				"PriceCode": {
					"description": "Price code, determining the unit price.",
					"type": "string"
				},
				"SubscriptionClass": {
					"description": "The subscription class indicates whether the subscription is: R - a regular subscription,\r\nQ - a qualified controlled subscription, L - a delayed start controlled subscription,\r\nP - a perpetual subscription",
					"enum": [
						"Regular",
						"DelayedStart",
						"MonthlyInvoiced",
						"Perpetual",
						"QualifiedNonpaid",
						"Agreement"
					],
					"type": "string"
				},
				"SubscriptionId": {
					"description": "The unique identifier for the subscription being added or updated by\r\nthe current subscription order line.",
					"type": "string"
				},
				"TermLength": {
					"format": "int32",
					"description": "The subscription term (the number of issues).",
					"type": "integer"
				},
				"TermNumber": {
					"format": "int32",
					"description": "The term number gives an indicate of how many times the subscription has been renewed.",
					"type": "integer"
				},
				"BusinessIndustryCode": {
					"description": "The business industry demographic code.",
					"type": "string"
				},
				"Rate": {
					"format": "double",
					"description": "The price of the magazine.",
					"type": "number"
				},
				"BusinessTitleCode": {
					"description": "The business title demographic code.",
					"type": "string"
				},
				"ChargeCategoryCode": {
					"description": "The membership charge category.",
					"type": "string"
				},
				"SubscriptionStatusCode": {
					"description": "The current circulation status of the subscription being renewed (or blank).",
					"type": "string"
				},
				"PromoteByEmail": {
					"description": "Should the subscriber be promoted by email?",
					"type": "string"
				},
				"PromoteByFax": {
					"description": "Should the subscriber be promoted by fax?",
					"type": "string"
				},
				"PromoteByMail": {
					"description": "Should the subscriber be promoted by mail?",
					"type": "string"
				},
				"PromoteByPhone": {
					"description": "Should the subscriber be promoted by phone?",
					"type": "string"
				},
				"ReferredByCustomerNumber": {
					"description": "The customer number of the reference customer.",
					"type": "string"
				},
				"EditionCode": {
					"description": "The edition code.",
					"type": "string"
				},
				"GiftMessage": {
					"description": "The gift message.",
					"type": "string"
				}
			}
		},
		"ProductOrderLine": {
			"description": "Information about a (PRO) product order line.",
			"type": "object",
			"properties": {
				"BookclubShipmentFrequency": {
					"format": "int32",
					"description": "Shipment frequency, the number of days between shipments.",
					"type": "integer"
				},
				"ItemDescription1": {
					"description": "The first name, usually the item name 1 (e.g. title) of the product ordered.",
					"type": "string"
				},
				"ItemDescription2": {
					"description": "The second name, usually the item name 2 (e.g. author) of the product ordered.",
					"type": "string"
				},
				"ItemDescription3": {
					"description": "The third name , usually the item name 3 (e.g. ISBN) of the product ordered.",
					"type": "string"
				},
				"InventoryStatus": {
					"description": "Product inventory status",
					"enum": [
						"InStock",
						"Discontinued",
						"Reorder",
						"Backordered",
						"PrePublication"
					],
					"type": "string"
				},
				"QuantityBackordered": {
					"format": "int32",
					"description": "The quantity placed on backorder. When the product is ready to ship,\r\na new \"backorder fill\" order is created track the fulfillment of the back-ordered items.",
					"type": "integer"
				},
				"QuantityLost": {
					"format": "int32",
					"description": "The quantity of lost sales.  If the product is out of stock and cannot be back-ordered\r\nthen it is considered a lost sale.",
					"type": "integer"
				},
				"QuantityRemaining": {
					"format": "int32",
					"description": "The quantity remaining to be fulfilled",
					"type": "integer"
				},
				"QuantityReturned": {
					"format": "int32",
					"description": "The quantity returned",
					"type": "integer"
				},
				"QuantityShipped": {
					"format": "int32",
					"description": "The quantity shipped, which is incremented when the inventory is available.\r\nIt does not indicate that the product has actually shipped from the warehouse.\r\nIt indicates that the product has shipped or is in the process of shipping.",
					"type": "integer"
				},
				"RequestedShipViaCode": {
					"description": "The requested shipping method.",
					"type": "string"
				},
				"ActualShipViaCode": {
					"description": "The actual shipping method.",
					"type": "string"
				},
				"ShippingSequence": {
					"description": "Identifies which shipment contained this order line.",
					"type": "string"
				},
				"StartsBookclubParticipation": {
					"description": "Should the current inventory order line result in a new book club series?",
					"type": "boolean"
				},
				"StockStatusCode": {
					"description": "The current status of the item in the inventory (out of stock, unavailable, etc.)",
					"type": "string"
				},
				"IsInsert": {
					"description": "Is the current PRO order line an insert?  Inserts are free items added to qualifying orders.",
					"type": "boolean"
				},
				"IsCanceled": {
					"description": "Is the current PRO order line canceled?",
					"type": "boolean"
				},
				"ManuscriptNumber": {
					"description": "The manuscript number, which is a means to identify an RPS article.",
					"type": "string"
				},
				"ProductFormatCode": {
					"description": "The media format code (hardcover, CD, etc.)",
					"type": "string"
				},
				"PriceCode": {
					"description": "The price code used when determining the price to be charged for this line.",
					"type": "string"
				}
			}
		},
		"ConferenceOrderLine": {
			"description": "Information about a conference (CEM) order line",
			"type": "object",
			"properties": {
				"ConferenceCode": {
					"description": "The identifier for the conference",
					"type": "string"
				},
				"ConferenceName": {
					"description": "Name of the conference",
					"type": "string"
				},
				"SessionCode": {
					"description": "The identifier for a specific event within a conference.",
					"type": "string"
				},
				"SessionName": {
					"description": "The name of the conference session.",
					"type": "string"
				},
				"RegistrationId": {
					"description": "Conference registration Id",
					"type": "string"
				}
			}
		},
		"AssociationOrderLine": {
			"description": "Information about an association (AMM) order line",
			"type": "object",
			"properties": {
				"LevelCode": {
					"description": "The association level code",
					"type": "string"
				},
				"AgreementId": {
					"description": "Agreement Id of the association",
					"type": "string"
				},
				"ProfileId": {
					"description": "The profile ID for the order line.  Demographics\r\ncan be collected in a profile, which is a set of answers to questionnaire\r\nquestions.  Use the WebProfile class to create a profile and add responses.\r\nUse WebQuestionnaire to get information about a questionnaire.",
					"type": "string"
				},
				"AssociationStructureNodeId": {
					"description": "The Association Structure Node Id indicates the structure node that an association member has selected.\r\nThe structure node is usually an association chapter.",
					"type": "string"
				}
			}
		},
		"GiftMessage": {
			"description": "Information for a gift message.",
			"type": "object",
			"properties": {
				"GiftMessageType": {
					"description": "Gift Message Type",
					"type": "string"
				},
				"MessageText": {
					"description": "Gift Message Text",
					"type": "string"
				},
				"DeferDate": {
					"format": "date-time",
					"description": "Defer Date",
					"type": "string"
				}
			}
		},
		"InstallmentBillingPlan": {
			"description": "Information about the installment billing.",
			"type": "object",
			"properties": {
				"InstallmentBillingCode": {
					"description": "The installment billing code uniquely identifies this installment billing plan.",
					"type": "string"
				},
				"Name": {
					"description": "The installment billing plan name.",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "The currency code for this installment billing plan.",
					"type": "string"
				}
			}
		},
		"InstallmentBill": {
			"description": "Information for an installment bill.",
			"type": "object",
			"properties": {
				"DueDate": {
					"format": "date-time",
					"description": "The date the bill is due.",
					"type": "string"
				},
				"AmountDue": {
					"format": "double",
					"description": "The Amount Due on the due date.",
					"type": "number"
				},
				"AmountPaid": {
					"format": "double",
					"description": "The Amount already paid on this installment.",
					"type": "number"
				},
				"TotalDebits": {
					"format": "double",
					"description": "Total debits.",
					"type": "number"
				}
			}
		},
		"PaymentMethodEligibleUses": {
			"description": "Contains the subscriptions and agreements that are eligible for being auto-charged",
			"type": "object",
			"properties": {
				"Subscriptions": {
					"description": "Subscriptions",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Subscription"
					}
				},
				"Agreements": {
					"description": "Agreements",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Agreement"
					}
				}
			}
		},
		"ProcessRequest": {
			"description": "A request to run a process",
			"type": "object",
			"properties": {
				"ProcessCode": {
					"description": "Process Code",
					"type": "string"
				},
				"Parameters": {
					"description": "The process request parameters",
					"type": "array",
					"items": {
						"$ref": "#/definitions/RequestParameter"
					}
				}
			}
		},
		"RequestParameter": {
			"description": "A parameter for a process or jobstream request",
			"type": "object",
			"properties": {
				"Name": {
					"description": "The request parameter (field) name",
					"type": "string"
				},
				"Value": {
					"description": "The request parameter value",
					"type": "string"
				}
			}
		},
		"JobstreamRequest": {
			"description": "A request to run a jobstream",
			"type": "object",
			"properties": {
				"JobstreamCode": {
					"description": "Jobstream Code",
					"type": "string"
				},
				"Parameters": {
					"description": "The process request parameters",
					"type": "array",
					"items": {
						"$ref": "#/definitions/RequestParameter"
					}
				}
			}
		},
		"SearchResultWithCount[BroadcastMessage]": {
			"description": "The Order History response.",
			"type": "object",
			"properties": {
				"TotalCount": {
					"format": "int32",
					"description": "Gets the total number of orders found for the given customer.",
					"type": "integer"
				},
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/BroadcastMessage"
					}
				}
			}
		},
		"BroadcastMessage": {
			"description": "Broadcast Message Model",
			"type": "object",
			"properties": {
				"BroadcastMessageId": {
					"description": "Broadcast Message Id",
					"type": "string"
				},
				"MessageTitle": {
					"description": "Message Title",
					"type": "string"
				},
				"MessageText": {
					"description": "Message Text",
					"type": "string"
				},
				"IsMessagePinned": {
					"description": "Is Message Pinned?",
					"type": "boolean"
				},
				"CreationDate": {
					"format": "date-time",
					"description": "Creation Date",
					"type": "string"
				},
				"CreationUser": {
					"description": "Creation User",
					"type": "string"
				},
				"UpdateDate": {
					"format": "date-time",
					"description": "Update Date",
					"type": "string"
				},
				"UpdateUser": {
					"description": "Update User",
					"type": "string"
				}
			}
		},
		"BroadcastMessageCreateRequest": {
			"description": "Information for creating a new broadcast message.",
			"type": "object",
			"properties": {
				"MessageTitle": {
					"description": "Message Title",
					"type": "string"
				},
				"MessageText": {
					"description": "Message Text",
					"type": "string"
				},
				"IsMessagePinned": {
					"description": "Is Message Pinned?",
					"type": "boolean"
				}
			}
		},
		"BroadcastMessageCreateResponse": {
			"description": "The information received in response to an broadcast message creation request.",
			"type": "object",
			"properties": {
				"BroadcastMessageId": {
					"description": "Broadcast Message Id (Generated Unique Identifier)",
					"type": "string"
				}
			}
		},
		"BroadcastMessageUpdateRequest": {
			"description": "Information for a broadcast message.",
			"type": "object",
			"properties": {
				"MessageTitle": {
					"description": "Message Title",
					"type": "string"
				},
				"MessageText": {
					"description": "Message Text",
					"type": "string"
				},
				"IsMessagePinned": {
					"description": "Is Message Pinned?",
					"type": "boolean"
				}
			}
		},
		"CallListFilter": {
			"description": "Filter criteria for calls on a call list",
			"type": "object",
			"properties": {
				"BeginDate": {
					"format": "date-time",
					"description": "The earliest call date to include",
					"type": "string"
				},
				"EndDate": {
					"format": "date-time",
					"description": "The latest call date to include",
					"type": "string"
				}
			}
		},
		"CallList": {
			"description": "Data transfer object for CallList data",
			"type": "object",
			"properties": {
				"CallbackDays": {
					"format": "int32",
					"description": "Callback days",
					"type": "integer"
				},
				"CallsAssigned": {
					"format": "int32",
					"description": "Total calls assigned",
					"type": "integer"
				},
				"CallsCompleted": {
					"format": "int32",
					"description": "Total number of completed calls",
					"type": "integer"
				},
				"CallsLost": {
					"format": "int32",
					"description": "Total number of calls lost",
					"type": "integer"
				},
				"CallsRemaining": {
					"format": "int32",
					"description": "Total number of remaining calls",
					"type": "integer"
				},
				"CallsRemainingOnList": {
					"format": "int32",
					"description": "Total number of calls remaining on the list",
					"type": "integer"
				},
				"CallsUnassigned": {
					"format": "int32",
					"description": "Total calls unassigned",
					"type": "integer"
				},
				"CallType": {
					"description": "Call Type",
					"type": "string"
				},
				"DateCreated": {
					"format": "date-time",
					"description": "Date Created",
					"type": "string"
				},
				"FocusItemNumber": {
					"description": "Focus Item Number",
					"type": "string"
				},
				"ListDate": {
					"format": "date-time",
					"description": "List Date",
					"type": "string"
				},
				"Name": {
					"description": "List Description",
					"type": "string"
				},
				"Code": {
					"description": "List ID",
					"type": "string"
				},
				"Priority": {
					"format": "int32",
					"description": "List Priority",
					"type": "integer"
				},
				"SalesMade": {
					"format": "int32",
					"description": "Number of sales made",
					"type": "integer"
				},
				"SalesTotal": {
					"format": "double",
					"description": "Sales Total",
					"type": "number"
				},
				"SalesTotalCurrency": {
					"description": "Currency that sales total was calculated in",
					"type": "string"
				},
				"Source": {
					"description": "List Source",
					"type": "string"
				},
				"Status": {
					"description": "List Status",
					"type": "string"
				},
				"Narrative": {
					"description": "Narrative in Rich Text Format (RTF)",
					"type": "string"
				},
				"TotalCallbacks": {
					"format": "int32",
					"description": "Total number of callbacks",
					"type": "integer"
				},
				"TotalCalls": {
					"format": "int32",
					"description": "Total calls on call list",
					"type": "integer"
				},
				"Calls": {
					"description": "The calls included on the call list",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Call"
					}
				}
			}
		},
		"Call": {
			"description": "Data transfer object for Call data",
			"type": "object",
			"properties": {
				"AddressCode": {
					"description": "Address Code",
					"type": "string"
				},
				"CallbackDate": {
					"format": "date-time",
					"description": "Callback Date",
					"type": "string"
				},
				"CallOutcome": {
					"description": "Call Outcome",
					"type": "string"
				},
				"CallPriority": {
					"format": "int32",
					"description": "Call Priority",
					"type": "integer"
				},
				"ContactCommentLine1": {
					"description": "Contact Comment",
					"type": "string"
				},
				"ContactCommentLine2": {
					"description": "Contact Comment",
					"type": "string"
				},
				"CustomerNumber": {
					"description": "Customer Number",
					"type": "string"
				},
				"DateCalled": {
					"format": "date-time",
					"description": "Date Called",
					"type": "string"
				},
				"ItemStatus": {
					"description": "Item Status",
					"type": "string"
				},
				"ListDate": {
					"format": "date-time",
					"description": "List Date",
					"type": "string"
				},
				"ListId": {
					"description": "List ID",
					"type": "string"
				},
				"PromotionCode": {
					"description": "Promotion Code",
					"type": "string"
				},
				"ReasonRefused": {
					"description": "Reason Refused",
					"type": "string"
				},
				"Resolution": {
					"description": "Resolution",
					"type": "string"
				},
				"SalesRep": {
					"description": "Sales Rep",
					"type": "string"
				},
				"SalesRepCreditedWithSale": {
					"description": "Sales rep credited with the sale",
					"type": "string"
				},
				"CallSource": {
					"description": "Call Source",
					"type": "string"
				},
				"SourceNote": {
					"description": "Source Note",
					"type": "string"
				},
				"CustomerName": {
					"description": "Customer Name",
					"type": "string"
				},
				"ListDescription": {
					"description": "List Description",
					"type": "string"
				},
				"IsInbound": {
					"description": "True if call is inbound, false otherwise",
					"type": "boolean"
				},
				"TimesCalled": {
					"format": "int32",
					"description": "Number of calls made to the customer associated with this call for this call list",
					"type": "integer"
				},
				"LastCallbackOutcome": {
					"description": "Call outcome for the last callback made to the customer associated with this call for this call list",
					"type": "string"
				},
				"EmailAddress": {
					"description": "Email Address",
					"type": "string"
				},
				"StateCode": {
					"description": "State Code",
					"type": "string"
				},
				"CountryCode": {
					"description": "Country Code",
					"type": "string"
				},
				"TimeZone": {
					"description": "Time Zone",
					"type": "string"
				}
			}
		},
		"SearchResult[CallListAssignment]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CallListAssignment"
					}
				}
			}
		},
		"CallListAssignment": {
			"description": "Data transfer object for CallList data",
			"type": "object",
			"properties": {
				"CallList": {
					"$ref": "#/definitions/CallList",
					"description": "Call list on which this rep has assigned calls"
				},
				"NumberOfCallbacks": {
					"format": "int32",
					"description": "Number of callbacks",
					"type": "integer"
				},
				"QuantityAssigned": {
					"format": "int32",
					"description": "Number of calls assigned to this sales rep",
					"type": "integer"
				},
				"QuantityCompleted": {
					"format": "int32",
					"description": "Number of calls this sales rep has completed",
					"type": "integer"
				},
				"SalesRep": {
					"$ref": "#/definitions/SalesRep",
					"description": "Sales Representative"
				},
				"TotalRemaining": {
					"format": "int32",
					"description": "Number of remaining calls for this sales rep",
					"type": "integer"
				},
				"TotalRemainingOnList": {
					"format": "int32",
					"description": "Total number of remaining calls on the list",
					"type": "integer"
				}
			}
		},
		"SalesRep": {
			"description": "Sales Rep Model",
			"type": "object",
			"properties": {
				"Code": {
					"description": "Returns the sales rep number",
					"type": "string"
				},
				"Name": {
					"description": "Name of Sales Rep",
					"type": "string"
				},
				"UserName": {
					"description": "Mapped user description, if exists. Otherwise, same as name.",
					"type": "string"
				},
				"CustomerNumber": {
					"description": "Customer Number of owning customer",
					"type": "string"
				},
				"Group": {
					"$ref": "#/definitions/CustomValue",
					"description": "Sales Rep Group Name and Code"
				},
				"TerritoryName": {
					"description": "Sales Rep's Territory",
					"type": "string"
				},
				"OptionNumber": {
					"description": "Option number for the current sales rep.\r\nThe option number is a client specific attribute of a sales representative.",
					"type": "string"
				},
				"Email": {
					"description": "Email address for the current sales rep",
					"type": "string"
				},
				"Fax": {
					"description": "Fax number for the current sales rep.\r\nThe fax number is the telephone number of the sales rep's fax machine.",
					"type": "string"
				},
				"Phone": {
					"description": "Phone number for the current sales rep.",
					"type": "string"
				},
				"OrganizationCode": {
					"description": "Organization Code for the current sales rep.",
					"type": "string"
				},
				"LastCommissionCalculatedDate": {
					"format": "date-time",
					"description": "Last commission calculated date for the current sales rep.\r\nThis is the date the last commissions were calculated for this sales representative \r\n(by the process COM310).",
					"type": "string"
				},
				"SupervisorCode": {
					"description": "Sales rep supervisor for the current sales rep.\r\nThis is a sales rep number of another sales rep.",
					"type": "string"
				},
				"Initials": {
					"description": "Sales rep initials for the current sales rep",
					"type": "string"
				},
				"CommissionCycleCode": {
					"description": "Commission cycle for the current sales rep.\r\nThe commission cycle indicates when commissions are paid (Monthly, Bimonthly, Weekly,...).\r\nThese values are setup at CDSVLU. Keyword name: COM-CYC.",
					"type": "string"
				},
				"CommissionMethodCode": {
					"description": "Commission method for the current sales rep.\r\nThe commission method indicates whether commissions are paid through A/P ('A') or \r\npayroll ('P'). Blank means \"not used\".",
					"type": "string"
				},
				"PayeeVendorNumber": {
					"description": "Sales rep payee number for the current sales rep. \r\nThe sales rep payee number identifies a vendor or an employee.\r\nThese values are setup at CDSVLU. Keyword name: SLM-EMP.",
					"type": "string"
				},
				"Description": {
					"description": "Sales rep description for the current sales rep. This field is a \r\nconcatenation of the name, territory, and group.",
					"type": "string"
				}
			}
		},
		"CustomValue": {
			"description": "The CustomValue class provides information about client customized\r\nvalid value that is set up at CDSVLU for fields like address code or\r\nCDSSYS/KYO for fields like subscription demographics.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The identifier for the valid value.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the valid value.",
					"type": "string"
				},
				"UserField1": {
					"description": "The first user defined field (optional).",
					"type": "string"
				},
				"UserField2": {
					"description": "The second user defined field (optional).",
					"type": "string"
				},
				"UserField3": {
					"description": "The third user defined field (optional).",
					"type": "string"
				}
			}
		},
		"CallStatisticsFilter": {
			"description": "Filter criteria for callbacks search",
			"type": "object",
			"properties": {
				"BeginDate": {
					"format": "date-time",
					"description": "The earliest call date to include in statistics.",
					"type": "string"
				},
				"EndDate": {
					"format": "date-time",
					"description": "The latest call date to include in statistics.",
					"type": "string"
				},
				"ListCode": {
					"description": "List code of the list to limit the statistics to or null or empty string to compile\r\nstatistics across lists.",
					"type": "string"
				},
				"ListDate": {
					"format": "date-time",
					"description": "The date associated with the call list",
					"type": "string"
				}
			}
		},
		"SearchResult[Call]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Call"
					}
				}
			}
		},
		"SearchResult[CallList]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CallList"
					}
				}
			}
		},
		"CallListComparison": {
			"description": "A filter to apply to a call search",
			"type": "object",
			"properties": {
				"Field": {
					"description": "Name of field in table to compare",
					"enum": [
						"SalesRepCode",
						"SalesManagerCode",
						"ListId",
						"ListDate",
						"IsRemainingCall",
						"IsCallback"
					],
					"type": "string"
				},
				"Operator": {
					"description": "Operator to use in comparison",
					"enum": [
						"Equal",
						"NotEqual",
						"Less",
						"LessOrEqual",
						"Greater",
						"GreaterOrEqual",
						"IsNull",
						"IsNotNull",
						"Like",
						"NotLike",
						"Contains",
						"NotContains",
						"StartsWith",
						"NotStartsWith",
						"EndsWith",
						"NotEndsWith",
						"In",
						"Between"
					],
					"type": "string"
				},
				"Value": {
					"description": "Value to compare the field name to",
					"type": "string"
				}
			}
		},
		"EndCallRequest": {
			"description": "Information for ending a call.",
			"type": "object",
			"properties": {
				"Calls": {
					"description": "Calls to Close",
					"type": "array",
					"items": {
						"$ref": "#/definitions/EndCallInfo"
					}
				}
			}
		},
		"EndCallInfo": {
			"description": "Information for ending a call.",
			"type": "object",
			"properties": {
				"ListCode": {
					"description": "Call list ID",
					"type": "string"
				},
				"ListDate": {
					"format": "date-time",
					"description": "Call list date",
					"type": "string"
				},
				"CustomerNumber": {
					"description": "Customer number",
					"type": "string"
				},
				"IsCancel": {
					"description": "True if we are canceling the call",
					"type": "boolean"
				},
				"CallOutcomeCode": {
					"description": "Call outcome",
					"type": "string"
				},
				"CallbackDate": {
					"format": "date-time",
					"description": "Callback date",
					"type": "string"
				},
				"ReasonRefusedCode": {
					"description": "Reason refused",
					"type": "string"
				},
				"ContactComment": {
					"description": "Contact comment",
					"type": "string"
				},
				"KeepCallbackOnList": {
					"description": "Keep callback on list",
					"type": "boolean"
				},
				"CustomerClassificationCode": {
					"description": "Customer classification",
					"type": "string"
				},
				"CallStartTime": {
					"format": "date-time",
					"description": "Optionally set the start time of the call as well",
					"type": "string"
				},
				"IsInboundCall": {
					"description": "Optionally set whether or not the call is inbound",
					"type": "boolean"
				}
			}
		},
		"CallOutcomesFilter": {
			"description": "Filter criteria for call outcomes",
			"type": "object",
			"properties": {
				"BeginDate": {
					"format": "date-time",
					"description": "The earliest call date to include in statistics.",
					"type": "string"
				},
				"EndDate": {
					"format": "date-time",
					"description": "The latest call date to include in statistics.",
					"type": "string"
				},
				"SalesRepCode": {
					"description": "The sales rep code to filter by",
					"type": "string"
				}
			}
		},
		"SearchResult[CallListOutcome]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CallListOutcome"
					}
				}
			}
		},
		"CallListOutcome": {
			"description": "Information about an outcome for a particular call list",
			"type": "object",
			"properties": {
				"Code": {
					"description": "Outcome Code",
					"type": "string"
				},
				"Name": {
					"description": "Outcome Name",
					"type": "string"
				},
				"ResolutionCode": {
					"description": "Resolution Code",
					"type": "string"
				},
				"Count": {
					"format": "int32",
					"description": "Outcome Count",
					"type": "integer"
				}
			}
		},
		"SearchResult[FieldValidValue]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/FieldValidValue"
					}
				}
			}
		},
		"FieldValidValue": {
			"description": "Information about a predefined value for a field.",
			"type": "object",
			"properties": {
				"Value": {
					"description": "The predefined value.",
					"type": "string"
				},
				"Name": {
					"description": "The description of the value",
					"type": "string"
				}
			}
		},
		"SearchResult[CallOutcome]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CallOutcome"
					}
				}
			}
		},
		"CallOutcome": {
			"description": "Call Outcome Codes",
			"type": "object",
			"properties": {
				"OutcomeCode": {
					"description": "Outcome Code",
					"type": "string"
				},
				"ResolutionCode": {
					"description": "Resolution Code",
					"type": "string"
				}
			}
		},
		"CallListAssignmentUpdateRequest": {
			"description": "Information for updating a Call List Assignment",
			"type": "object",
			"properties": {
				"ListId": {
					"description": "Call list ID",
					"type": "string"
				},
				"ListDate": {
					"format": "date-time",
					"description": "Call List date",
					"type": "string"
				},
				"CallCountUpdates": {
					"description": "Information detailing how many calls to assign to or release from each rep",
					"type": "array",
					"items": {
						"$ref": "#/definitions/SalesRepCallCountUpdate"
					}
				}
			}
		},
		"SalesRepCallCountUpdate": {
			"description": "Information detailing how many calls to assign to or release from a sales rep",
			"type": "object",
			"properties": {
				"Code": {
					"description": "Sales rep code",
					"type": "string"
				},
				"AssignmentOffset": {
					"format": "int32",
					"description": "Number of calls to assign or release for this representative",
					"type": "integer"
				}
			}
		},
		"InboundCallListCreateRequest": {
			"description": "Information for creating an Inbound Call List",
			"type": "object",
			"properties": {
				"SalesRep": {
					"description": "Sales Rep Code",
					"type": "string"
				},
				"CustomerNumber": {
					"description": "Customer Number",
					"type": "string"
				},
				"AddressCode": {
					"description": "Address Code",
					"type": "string"
				}
			}
		},
		"CampaignCreateRequest": {
			"description": "Information for creating a new campaign.",
			"type": "object",
			"properties": {
				"Name": {
					"description": "The name of the campaign.",
					"type": "string"
				},
				"Initiator": {
					"description": "Who initiated the campaign.",
					"type": "string"
				},
				"Initiated": {
					"format": "date-time",
					"description": "The date the campaign is/was initiated.",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "Local currency code of the campaign.",
					"type": "string"
				},
				"EstimatedCost": {
					"format": "double",
					"description": "Estimated cost of the campaign.",
					"type": "number"
				},
				"EstimatedQuantity": {
					"format": "double",
					"description": "Estimated quantity.",
					"type": "number"
				},
				"CostAccumulationMethodCode": {
					"description": "Specifies how to accumulate costs for the campaign.",
					"type": "string"
				}
			}
		},
		"SearchResultWithCount[Campaign]": {
			"description": "The Order History response.",
			"type": "object",
			"properties": {
				"TotalCount": {
					"format": "int32",
					"description": "Gets the total number of orders found for the given customer.",
					"type": "integer"
				},
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Campaign"
					}
				}
			}
		},
		"Campaign": {
			"description": "Information for a campaign, which is the highest level of promotion control tracking.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The campaign code, identifying the campaign.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the campaign.",
					"type": "string"
				}
			}
		},
		"CardVaultClientSettingsResponse": {
			"description": "Information about a CardVault client",
			"type": "object",
			"properties": {
				"ClientId": {
					"description": "Client ID",
					"type": "string"
				},
				"ClientSecret": {
					"description": "Client secret",
					"type": "string"
				}
			}
		},
		"CatalogGetSettings": {
			"description": "Settings that determine what is included in Catalog end-point response.",
			"type": "object",
			"properties": {
				"IncludeProducts": {
					"description": "Include products in the response?  The default is to include products only at the leaf levels.",
					"enum": [
						"Yes",
						"No",
						"LeafOnly"
					],
					"type": "string"
				},
				"MaxDepth": {
					"format": "int32",
					"description": "A catalog is a tree structure that may include many levels of nested subjects.\r\nUse the MaxDepth setting to limit the child levels in the response to a maximum depth.  For example, \r\npass 1 to return only the first level of child subjects or zero to return no child subjects.\r\nThe default is to limit the response to a maximum of 50 child levels deep.",
					"type": "integer"
				}
			}
		},
		"SearchResult[SubjectTreeLevel]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/SubjectTreeLevel"
					}
				}
			}
		},
		"SubjectTreeLevel": {
			"description": "Information for subject tree levels.\r\nProducts may be associated with one or more subjects and then Advantage users and Internet\r\nbrowsers can search for products by subject.  To assist with Internet browsing and searching,\r\nsubject trees may be created with specific hierarchical combinations of subjects.\r\nItems may be linked to a subject tree level by creating a link between the item and \r\nevery subject that is part of the subject tree level.",
			"type": "object",
			"properties": {
				"Id": {
					"format": "int64",
					"description": "The identifier for this subject level.",
					"type": "integer"
				},
				"SubjectCode": {
					"description": "The code for the subject tree level.",
					"type": "string"
				},
				"SubjectName": {
					"description": "The name of the subject tree level",
					"type": "string"
				},
				"ImageUrl": {
					"description": "The URL for the image to display for this level.",
					"type": "string"
				},
				"Children": {
					"description": "The children levels of this level.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/SubjectTreeLevel"
					}
				},
				"Products": {
					"description": "The products on this level of the subject tree.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Product"
					}
				}
			}
		},
		"Conference": {
			"description": "Contains all of the information about a Conference",
			"type": "object",
			"properties": {
				"ConferenceId": {
					"description": "Conference ID",
					"type": "string"
				},
				"Name": {
					"description": "Conference Description",
					"type": "string"
				},
				"FullName": {
					"description": "Conference Long Description",
					"type": "string"
				},
				"Description": {
					"description": "Conference Text",
					"type": "string"
				},
				"ConferenceFocusCode": {
					"description": "Conference Focus",
					"type": "string"
				},
				"ConfirmationMessage": {
					"description": "Confirmation Message",
					"type": "string"
				},
				"WelcomeMessage": {
					"description": "Welcome Message",
					"type": "string"
				},
				"DefaultRateCode": {
					"description": "Default Rate Code",
					"type": "string"
				},
				"SessionSelectionOpens": {
					"format": "date-time",
					"description": "Date session selection (registration) opens",
					"type": "string"
				},
				"Sessions": {
					"description": "The list of sessions associated with the conference",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ConferenceSession"
					}
				},
				"Locations": {
					"description": "The list of locations associated with the conference",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ConferenceLocation"
					}
				}
			}
		},
		"ConferenceSessionUpdateRequest": {
			"description": "Contains information for updating a conference session",
			"type": "object",
			"properties": {
				"SessionName": {
					"description": "Session Name",
					"type": "string"
				},
				"Narrative": {
					"description": "Narrative (Description)",
					"type": "string"
				},
				"SessionStarts": {
					"format": "date-time",
					"description": "Time session starts (only the time portion is relevant)",
					"type": "string"
				},
				"SessionEnds": {
					"format": "date-time",
					"description": "Time session ends (only the time portion is relevant)",
					"type": "string"
				},
				"ConferenceDay": {
					"format": "int32",
					"description": "Day the session takes place (e.g. 2 indicates second day of conference)",
					"type": "integer"
				}
			}
		},
		"ConferenceChoice": {
			"description": "The details and list of sessions associated with a conference choice code",
			"type": "object",
			"properties": {
				"ConferenceId": {
					"description": "Conference ID",
					"type": "string"
				},
				"ChoiceCode": {
					"description": "Conference choice code",
					"type": "string"
				},
				"Name": {
					"description": "Conference choice name",
					"type": "string"
				},
				"BillBy": {
					"description": "Bill by registration or attendee?",
					"enum": [
						"Registration",
						"Attendee"
					],
					"type": "string"
				},
				"LocationCode": {
					"description": "The conference location",
					"type": "string"
				},
				"PremiumSetCode": {
					"description": "The premium set code, if any",
					"type": "string"
				},
				"Status": {
					"description": "The status of this conference choice",
					"enum": [
						"Active",
						"Inactive"
					],
					"type": "string"
				},
				"ValidUntil": {
					"format": "date-time",
					"description": "The date on which the choice expires",
					"type": "string"
				},
				"WebBillMeAllowed": {
					"description": "Are web bill-me orders allowed?",
					"enum": [
						"Yes",
						"No",
						"Assumed"
					],
					"type": "string"
				},
				"InstallmentBillingCode": {
					"description": "The installment billing code to use for this conference choice",
					"type": "string"
				},
				"Sessions": {
					"description": "The sessions for this conference choice",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ConferenceChoiceSession"
					}
				}
			}
		},
		"ConferenceChoiceSession": {
			"description": "Information about a session associated with a conference choice",
			"type": "object",
			"properties": {
				"SessionSequenceNumber": {
					"format": "int32",
					"description": "Value of Session Sequence Number",
					"type": "integer"
				},
				"CurrencyCode": {
					"description": "Value of Billing Currency",
					"type": "string"
				},
				"Quantity": {
					"format": "int32",
					"description": "Value of Quantity",
					"type": "integer"
				},
				"PriceCode": {
					"description": "Value of Rate Code",
					"type": "string"
				},
				"SessionCode": {
					"description": "Value of Session ID",
					"type": "string"
				},
				"SessionName": {
					"description": "Value of Session Name",
					"type": "string"
				},
				"UnitPriceOverride": {
					"format": "double",
					"description": "Value of Unit Price",
					"type": "number"
				},
				"OverrideReasonCode": {
					"description": "Value of Override Reason",
					"type": "string"
				}
			}
		},
		"ConferenceChoiceCreateRequest": {
			"description": "Contains the information required for creating a new conference choice",
			"type": "object",
			"properties": {
				"ChoiceCode": {
					"description": "Value of Conference Choice Code",
					"type": "string"
				},
				"Name": {
					"description": "Value of Choice Description",
					"type": "string"
				},
				"BillBy": {
					"description": "Value of Bill By:\r\nR - Registration, A - Attendee",
					"enum": [
						"Registration",
						"Attendee"
					],
					"type": "string"
				},
				"LocationCode": {
					"description": "Value of Conference Location",
					"type": "string"
				},
				"PremiumSetCode": {
					"description": "Value of Premium Set",
					"type": "string"
				},
				"Status": {
					"description": "Value of Status:\r\nA - Active, I - Inactive",
					"enum": [
						"Active",
						"Inactive"
					],
					"type": "string"
				},
				"ValidUntil": {
					"format": "date-time",
					"description": "Value of Valid Until date",
					"type": "string"
				},
				"WebBillMeAllowed": {
					"description": "Bill me later status",
					"enum": [
						"Yes",
						"No",
						"Assumed"
					],
					"type": "string"
				},
				"InstallmentBillingCode": {
					"description": "Installment billing code",
					"type": "string"
				},
				"Sessions": {
					"description": "The list of sessions that will be associated with this conference choice",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ConferenceChoiceSessionIn"
					}
				}
			}
		},
		"ConferenceChoiceSessionIn": {
			"description": "Contains the information needed to create or update a session on a conference choice",
			"type": "object",
			"properties": {
				"SessionCode": {
					"description": "Value of Session ID",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "Value of Billing Currency",
					"type": "string"
				},
				"Quantity": {
					"format": "int32",
					"description": "Value of Quantity",
					"type": "integer"
				},
				"PriceCode": {
					"description": "Value of Rate Code",
					"type": "string"
				},
				"UnitPriceOverride": {
					"format": "double",
					"description": "Value of Unit Price",
					"type": "number"
				},
				"OverrideReasonCode": {
					"description": "Value of Override Reason",
					"type": "string"
				}
			}
		},
		"ConferenceChoiceUpdateRequest": {
			"description": "Information for updating a conference choice",
			"type": "object",
			"properties": {
				"BillBy": {
					"description": "Value of Bill By:\r\nR - Registration, A - Attendee",
					"enum": [
						"Registration",
						"Attendee"
					],
					"type": "string"
				},
				"Name": {
					"description": "Value of Choice Description",
					"type": "string"
				},
				"LocationCode": {
					"description": "Value of Conference Location",
					"type": "string"
				},
				"PremiumSetCode": {
					"description": "Value of Premium Set",
					"type": "string"
				},
				"Status": {
					"description": "Value of Status:\r\nA - Active, I - Inactive",
					"enum": [
						"Active",
						"Inactive"
					],
					"type": "string"
				},
				"ValidUntil": {
					"format": "date-time",
					"description": "Value of Valid Until date",
					"type": "string"
				},
				"WebBillMeAllowed": {
					"description": "Bill me later status",
					"enum": [
						"Yes",
						"No",
						"Assumed"
					],
					"type": "string"
				},
				"InstallmentBillingCode": {
					"description": "Installment billing code",
					"type": "string"
				},
				"Sessions": {
					"description": "A list of sessions that will be updated or created",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ConferenceChoiceSessionIn"
					}
				}
			}
		},
		"ConferenceLocationUpdateRequest": {
			"description": "Contains information for updating a conference location",
			"type": "object",
			"properties": {
				"LocationName": {
					"description": "Location Name",
					"type": "string"
				},
				"Starts": {
					"format": "date-time",
					"description": "Start date",
					"type": "string"
				},
				"Ends": {
					"format": "date-time",
					"description": "End date",
					"type": "string"
				}
			}
		},
		"ConferenceAttendeeUpdateRequest": {
			"description": "Contains all of the information about a conference attendee's registration",
			"type": "object",
			"properties": {
				"BadgeName": {
					"description": "The conference attendee registration (badge) name",
					"type": "string"
				},
				"AttendeeType": {
					"description": "Conference attendee registration type",
					"enum": [
						"Attendee",
						"Exhibitor",
						"Presenter",
						"Staff"
					],
					"type": "string"
				}
			}
		},
		"ConferenceAttendee": {
			"description": "Contains all of the information about a conference attendee's registration",
			"type": "object",
			"properties": {
				"SequenceNumber": {
					"description": "The registration sequence number",
					"type": "string"
				},
				"BadgeName": {
					"description": "The conference attendee registration (badge) name",
					"type": "string"
				},
				"BillTo": {
					"$ref": "#/definitions/CustomerAddressSummary",
					"description": "The bill-to customer address for this attendee. If the bill-by is \"Bill By Registration,\" the bill-to\r\nwill be stored on the registration record. If the bill-by is \"Bill By Attendee,\" the bill-to\r\nwill be stored on the attendee record."
				},
				"Attendee": {
					"$ref": "#/definitions/CustomerAddressSummary",
					"description": "The attendee"
				},
				"AttendeeName": {
					"description": "The attendee customer's full name",
					"type": "string"
				},
				"AttendeeType": {
					"description": "Conference attendee registration type",
					"enum": [
						"Attendee",
						"Exhibitor",
						"Presenter",
						"Staff"
					],
					"type": "string"
				},
				"RegistrationDate": {
					"format": "date-time",
					"description": "Conference registration date for attendee",
					"type": "string"
				},
				"TotalCharges": {
					"format": "double",
					"description": "Total charges for the attendee",
					"type": "number"
				},
				"Sessions": {
					"description": "List of sessions for attendee",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ConferenceAttendeeSession"
					}
				},
				"AttendeeStatus": {
					"description": "Registration Status (A=Active, C=Cancelled, etc)",
					"type": "string"
				},
				"IsAttendeeActive": {
					"description": "True if the attendee is active",
					"type": "boolean"
				}
			}
		},
		"ConferenceAttendeeSession": {
			"description": "Contains all of the information about a specific selected session for a conference attendee",
			"type": "object",
			"properties": {
				"SessionCode": {
					"description": "Session ID",
					"type": "string"
				},
				"SessionName": {
					"description": "Session name",
					"type": "string"
				},
				"WebParticipationType": {
					"description": "The Web Participation Type is one of the following:\r\n-  \"C\" (available on the Web when the conference opens)\r\n-  \"S\" (available on the Web when session selection opens)\r\n-  blank (not available on the Web)",
					"type": "string"
				},
				"AmountCharged": {
					"format": "double",
					"description": "Amount charged for session",
					"type": "number"
				}
			}
		},
		"ConferenceAttendeeCancelRequest": {
			"description": "Contains all of the information about a conference attendee's registration",
			"type": "object",
			"properties": {
				"Reason": {
					"description": "The reason the attendee is being canceled",
					"type": "string"
				}
			}
		},
		"ConferenceRegistrationComparison": {
			"description": "Data transfer object for conference attendee search expressions",
			"type": "object",
			"properties": {
				"Field": {
					"description": "Name of field in table to compare",
					"enum": [
						"AttendeeCustomerNumber",
						"BillToCustomerNumber",
						"ConferenceId",
						"LocationId",
						"BillingOrganizationCode"
					],
					"type": "string"
				},
				"Operator": {
					"description": "Operator to use in comparison",
					"enum": [
						"Equal",
						"NotEqual",
						"Less",
						"LessOrEqual",
						"Greater",
						"GreaterOrEqual",
						"IsNull",
						"IsNotNull",
						"Like",
						"NotLike",
						"Contains",
						"NotContains",
						"StartsWith",
						"NotStartsWith",
						"EndsWith",
						"NotEndsWith",
						"In",
						"Between"
					],
					"type": "string"
				},
				"Value": {
					"description": "Value to compare the field to; specify comma separated values if the operator is \"In\"",
					"type": "string"
				}
			}
		},
		"SearchResult[ConferenceRegistration]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ConferenceRegistration"
					}
				}
			}
		},
		"ConferenceRegistration": {
			"description": "Contains all of the information about a conference attendee's registration",
			"type": "object",
			"properties": {
				"RegistrationId": {
					"description": "Conference registration id",
					"type": "string"
				},
				"ConferenceSummary": {
					"$ref": "#/definitions/ConferenceLocationSummary",
					"description": "The conference and location for this registration"
				},
				"CurrencyCode": {
					"description": "The billing currency for this conference registration",
					"type": "string"
				},
				"Attendees": {
					"description": "The attendees for this conference registration",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ConferenceAttendee"
					}
				},
				"Name": {
					"description": "The registration name",
					"type": "string"
				},
				"BillTo": {
					"$ref": "#/definitions/CustomerAddressSummary",
					"description": "The bill-to customer address for this registration"
				},
				"RegistrationStatus": {
					"description": "Registration Status (A=Active, C=Cancelled, etc)",
					"type": "string"
				},
				"IsRegistrationActive": {
					"description": "True if the registration is active",
					"type": "boolean"
				}
			}
		},
		"ConferenceLocationSummary": {
			"description": "Contains all of the information about a Conference",
			"type": "object",
			"properties": {
				"ConferenceId": {
					"description": "Conference ID",
					"type": "string"
				},
				"LocationCode": {
					"description": "Conference ID",
					"type": "string"
				},
				"LocationName": {
					"description": "The name of this conference location",
					"type": "string"
				},
				"ConferenceName": {
					"description": "Conference Description",
					"type": "string"
				},
				"Starts": {
					"format": "date-time",
					"description": "The start date of the conference at this location",
					"type": "string"
				},
				"Finishes": {
					"format": "date-time",
					"description": "The finish date of the conference at this location",
					"type": "string"
				}
			}
		},
		"CancelConferenceRegistrationRequest": {
			"description": "Information for requesting a subscription to be canceled.",
			"type": "object",
			"properties": {
				"CancelReason": {
					"description": "The reason for the cancellation (e.g. Cancelled from web)",
					"type": "string"
				}
			}
		},
		"SearchResult[ContinuingEducationProvider]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContinuingEducationProvider"
					}
				}
			}
		},
		"ContinuingEducationProvider": {
			"description": "Information about a continuing education provider",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The continuing education provider code",
					"type": "string"
				},
				"Name": {
					"description": "The name of the continuing education provider",
					"type": "string"
				},
				"Courses": {
					"description": "The courses available from the provider",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContinuingEducationCourse"
					}
				}
			}
		},
		"ContinuingEducationCourse": {
			"description": "Information about a continuing education course",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The continuing education course code",
					"type": "string"
				},
				"Name": {
					"description": "The name of the continuing education course",
					"type": "string"
				},
				"NumberOfUnits": {
					"format": "int32",
					"description": "The number of continuing education units (credits) earned from this course",
					"type": "integer"
				}
			}
		},
		"SearchResult[ContinuingEducationCredit]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ContinuingEducationCredit"
					}
				}
			}
		},
		"ContinuingEducationCredit": {
			"description": "Information about a continuing education credit",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "The customer number",
					"type": "string"
				},
				"ProviderCode": {
					"description": "The continuing education provider code",
					"type": "string"
				},
				"CourseCode": {
					"description": "The continuing education course code",
					"type": "string"
				},
				"EarnedDate": {
					"format": "date-time",
					"description": "The date the credit was earned",
					"type": "string"
				}
			}
		},
		"ContinuingEducationCreditCreateRequest": {
			"description": "Information for creating a continuing education credit",
			"type": "object",
			"properties": {
				"ProviderCode": {
					"description": "The continuing education provider code",
					"type": "string"
				},
				"CourseCode": {
					"description": "The continuing education course code",
					"type": "string"
				},
				"EarnedDate": {
					"format": "date-time",
					"description": "The date the credit was earned. Defaults to today, if null.",
					"type": "string"
				}
			}
		},
		"ControlGroup": {
			"description": "Model for Control Group",
			"type": "object",
			"properties": {
				"Date": {
					"format": "date-time",
					"description": "Control Group Date",
					"type": "string"
				},
				"Code": {
					"description": "Control Group ID",
					"type": "string"
				},
				"Name": {
					"description": "Control Group Name (Description)",
					"type": "string"
				},
				"OrderSourceCode": {
					"description": "Origination of this order",
					"type": "string"
				},
				"ActualTotals": {
					"$ref": "#/definitions/ControlGroupTotals",
					"description": "Actual Control Totals"
				},
				"ExpectedTotals": {
					"$ref": "#/definitions/ControlGroupTotals",
					"description": "Expected Control Totals"
				},
				"Defaults": {
					"$ref": "#/definitions/ControlGroupDefaults",
					"description": "Defaults"
				},
				"SubscriptionDefaults": {
					"$ref": "#/definitions/ControlGroupSubscriptionDefaults",
					"description": "Subscription Defaults"
				},
				"SubscriptionAuditDefaults": {
					"$ref": "#/definitions/ControlGroupSubscriptionAuditDefaults",
					"description": "Circulation Audit Defaults"
				},
				"ProductDefaults": {
					"$ref": "#/definitions/ControlGroupProductDefaults",
					"description": "Product Defaults"
				},
				"MembershipDefaults": {
					"$ref": "#/definitions/ControlGroupMembershipDefaults",
					"description": "Membership Defaults"
				},
				"ConferenceDefaults": {
					"$ref": "#/definitions/ControlGroupConferenceDefaults",
					"description": "Conference Defaults"
				},
				"Status": {
					"$ref": "#/definitions/ControlGroupStatus",
					"description": "Status Code and Name"
				},
				"OwningUserCode": {
					"description": "Owner user ID",
					"type": "string"
				}
			}
		},
		"ControlGroupTotals": {
			"description": "Actual Totals for the Control Group Model",
			"type": "object",
			"properties": {
				"OrderCount": {
					"format": "int32",
					"description": "The actual number of orders",
					"type": "integer"
				},
				"LineCount": {
					"format": "int32",
					"description": "The actual number of order lines",
					"type": "integer"
				},
				"SalesAmount": {
					"format": "double",
					"description": "The actual total sales amount",
					"type": "number"
				},
				"CashAmount": {
					"format": "double",
					"description": "The actual total cash amount",
					"type": "number"
				}
			}
		},
		"ControlGroupDefaults": {
			"description": "Defaults for Control Group Model",
			"type": "object",
			"properties": {
				"PromotionCode": {
					"description": "Promotion Code",
					"type": "string"
				},
				"PromotionChoiceCode": {
					"description": "Promotion Choice",
					"type": "string"
				},
				"DocketNumber": {
					"description": "Docket Number",
					"type": "string"
				},
				"PaymentCurrencyCode": {
					"description": "Payment Currency",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "Restrict order currency",
					"type": "string"
				},
				"BillingOrganizationCode": {
					"description": "Billing Organization",
					"type": "string"
				},
				"InstallmentBillingCode": {
					"description": "Installment Billing Code",
					"type": "string"
				},
				"QuestionnaireCode": {
					"description": "Questionnaire Name",
					"type": "string"
				},
				"AutoCreateAuthentication": {
					"description": "True to auto-create customer authentication",
					"type": "boolean"
				},
				"ItemNumber": {
					"description": "Item Number",
					"type": "string"
				},
				"PriceCode": {
					"description": "Price Code",
					"type": "string"
				},
				"DifferentShipTo": {
					"description": "Different ship-to flag",
					"type": "boolean"
				},
				"ReserveCreditRuleCode": {
					"description": "Reserve Credit Rule Code",
					"type": "string"
				}
			}
		},
		"ControlGroupSubscriptionDefaults": {
			"description": "Subscription Defaults for Control Group Model",
			"type": "object",
			"properties": {
				"CurrencyCode": {
					"description": "Default Currency",
					"type": "string"
				},
				"Rate": {
					"format": "double",
					"description": "Default Rate",
					"type": "number"
				},
				"DeliveryCode": {
					"description": "Default Delivery Code",
					"type": "string"
				},
				"TermLength": {
					"format": "int32",
					"description": "Default Term",
					"type": "integer"
				},
				"SubscriptionClassCode": {
					"description": "Default Subscription Class",
					"type": "string"
				},
				"Postage": {
					"format": "double",
					"description": "Default Postage",
					"type": "number"
				},
				"BillingStatusCode": {
					"description": "Default Bill Status",
					"type": "string"
				},
				"Starts": {
					"format": "date-time",
					"description": "Default issue date",
					"type": "string"
				},
				"RenewalStarts": {
					"format": "date-time",
					"description": "Default renewal start date",
					"type": "string"
				},
				"DonorTypeCode": {
					"description": "Default Donor Type",
					"type": "string"
				},
				"SubscriptionTypeCode": {
					"description": "Default subscription type",
					"type": "string"
				},
				"SalesRepCode": {
					"description": "Default Sales Rep",
					"type": "string"
				},
				"InvoiceDate": {
					"format": "date-time",
					"description": "Default Invoice Date",
					"type": "string"
				},
				"IssueGroupCode": {
					"description": "Default Issue Group",
					"type": "string"
				},
				"FreeIssues": {
					"format": "int32",
					"description": "Default Free Issues",
					"type": "integer"
				},
				"CheckForDuplicateSubscriptions": {
					"description": "Default for check duplicate subscriptions",
					"type": "boolean"
				},
				"EditionCode": {
					"description": "Default Edition Number",
					"type": "string"
				},
				"OverrideEdition": {
					"description": "Default Override Edition",
					"type": "boolean"
				},
				"QuestionnaireCode": {
					"description": "Default Questionnaire",
					"type": "string"
				},
				"ReferredByCustomerNumber": {
					"description": "Default Reference Customer",
					"type": "string"
				}
			}
		},
		"ControlGroupSubscriptionAuditDefaults": {
			"description": "Subscription Audit Defaults for Control Group Model",
			"type": "object",
			"properties": {
				"BusinessIndustryCode": {
					"description": "Default business/industry code",
					"type": "string"
				},
				"BusinessTitleCode": {
					"description": "Default Business Title",
					"type": "string"
				},
				"AddressTypeCode": {
					"description": "Default Address Type",
					"type": "string"
				},
				"QualificationSourceCode": {
					"description": "Default Qualification Source",
					"type": "string"
				},
				"DateSigned": {
					"format": "date-time",
					"description": "Default Date Signed",
					"type": "string"
				},
				"DateClassified": {
					"format": "date-time",
					"description": "Default Class Date",
					"type": "string"
				},
				"BackToAuditFlag": {
					"description": "Are back-to-audit (BTA) transactions allowed in this control group?",
					"type": "boolean"
				},
				"UnitNumber": {
					"description": "Default unit number",
					"type": "string"
				}
			}
		},
		"ControlGroupProductDefaults": {
			"description": "Product Defaults for Control Group Model",
			"type": "object",
			"properties": {
				"DiscountPercent": {
					"format": "double",
					"description": "Discount percent",
					"type": "number"
				},
				"WarehouseCode": {
					"description": "Warehouse",
					"type": "string"
				},
				"ShipDate": {
					"format": "date-time",
					"description": "Requested shipping date",
					"type": "string"
				},
				"OrderDate": {
					"format": "date-time",
					"description": "Order date",
					"type": "string"
				},
				"RepeatingOrder": {
					"description": "true if repeating order",
					"type": "boolean"
				},
				"RepeatingCycle": {
					"format": "int32",
					"description": "Repeating order cycle",
					"type": "integer"
				},
				"ShiptoCustomerNumber": {
					"description": "Shipto customer",
					"type": "string"
				},
				"CancellationReasonCode": {
					"description": "Cancel reason",
					"type": "string"
				},
				"RoundToCase": {
					"description": "Round to case flag",
					"enum": [
						"NoButAllowOverride",
						"Always",
						"IfStockAvailable",
						"No"
					],
					"type": "string"
				},
				"GratisReasonCode": {
					"description": "Gratis reason",
					"type": "string"
				},
				"PremiumSetCode": {
					"description": "Premium set",
					"type": "string"
				},
				"CreditReasonCode": {
					"description": "Credit reason",
					"type": "string"
				},
				"InvoiceTermsCode": {
					"description": "Term ID",
					"type": "string"
				},
				"ShipViaCode": {
					"description": "Requested Ship via",
					"type": "string"
				},
				"BackorderSetting": {
					"description": "Backorder flag",
					"enum": [
						"No",
						"OutOfStockOnly",
						"PrepubOnly",
						"Yes"
					],
					"type": "string"
				},
				"SearchForCustomerFirst": {
					"description": "True if do customer search first",
					"type": "boolean"
				},
				"OrderType": {
					"description": "Order type",
					"enum": [
						"CreditMemoReturnOrder",
						"GratisOrder",
						"InvoiceableOrder",
						"ModifyOrder",
						"ProFormaOrder",
						"PostShippedOrder",
						"RepeatingOrder",
						"PreviewOrder",
						"WarehouseTransfer"
					],
					"type": "string"
				},
				"DuplicateItemCheck": {
					"description": "Duplicate item flag",
					"enum": [
						"AcrossOrders",
						"CurrentOrder",
						"None"
					],
					"type": "string"
				},
				"SalesRepCode": {
					"description": "Sales rep",
					"type": "string"
				},
				"ShippingRuleCode": {
					"description": "Shipping rule Code",
					"type": "string"
				}
			}
		},
		"ControlGroupMembershipDefaults": {
			"description": "Membership Audit Defaults for Control Group Model",
			"type": "object",
			"properties": {
				"MemberOrganizationCode": {
					"description": "Membership organization default",
					"type": "string"
				}
			}
		},
		"ControlGroupConferenceDefaults": {
			"description": "Conference Defaults",
			"type": "object",
			"properties": {
				"ConferenceCode": {
					"description": "conference ID",
					"type": "string"
				},
				"ConferenceLocationCode": {
					"description": "Conference Location",
					"type": "string"
				}
			}
		},
		"ControlGroupStatus": {
			"description": "Status for Control Group Model",
			"type": "object",
			"properties": {
				"Code": {
					"description": "Status",
					"type": "string"
				},
				"Name": {
					"description": "Status Description",
					"type": "string"
				}
			}
		},
		"ControlGroupUpdateRequest": {
			"description": "Model for update of a Control Group",
			"type": "object",
			"properties": {
				"Totals": {
					"$ref": "#/definitions/ControlGroupTotals",
					"description": "Control Totals"
				},
				"Defaults": {
					"$ref": "#/definitions/ControlGroupDefaultsIn",
					"description": "Defaults"
				},
				"SubscriptionDefaults": {
					"$ref": "#/definitions/ControlGroupSubscriptionDefaultsIn",
					"description": "Subscription Defaults"
				},
				"SubscriptionAuditDefaults": {
					"$ref": "#/definitions/ControlGroupSubscriptionAuditDefaultsIn",
					"description": "Circulation Audit Defaults"
				},
				"ProductDefaults": {
					"$ref": "#/definitions/ControlGroupProductDefaultsIn",
					"description": "Product Defaults"
				},
				"MembershipDefaults": {
					"$ref": "#/definitions/ControlGroupMembershipDefaults",
					"description": "Membership organization default"
				},
				"ConferenceDefaults": {
					"$ref": "#/definitions/ControlGroupConferenceDefaults",
					"description": "Conference Defaults"
				},
				"OwningUserCode": {
					"description": "Owner user ID",
					"type": "string"
				}
			}
		},
		"ControlGroupDefaultsIn": {
			"description": "Defaults for Control Group In Model",
			"type": "object",
			"properties": {
				"PromotionCode": {
					"description": "Promotion Code",
					"type": "string"
				},
				"PromotionChoiceCode": {
					"description": "Promotion Choice",
					"type": "string"
				},
				"DocketNumber": {
					"description": "Docket Number",
					"type": "string"
				},
				"PaymentCurrencyCode": {
					"description": "Payment Currency",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "Restrict order currency",
					"type": "string"
				},
				"BillingOrganizationCode": {
					"description": "Billing Organization",
					"type": "string"
				},
				"InstallmentBillingCode": {
					"description": "Installment Billing Code",
					"type": "string"
				},
				"QuestionnaireCode": {
					"description": "Questionnaire Name",
					"type": "string"
				},
				"AutoCreateAuthentication": {
					"description": "True to auto-create customer authentication",
					"type": "boolean"
				},
				"ItemNumber": {
					"description": "Item Number",
					"type": "string"
				},
				"PriceCode": {
					"description": "Price Code",
					"type": "string"
				},
				"ReserveCreditRuleCode": {
					"description": "Reserve Credit Rule Code",
					"type": "string"
				}
			}
		},
		"ControlGroupSubscriptionDefaultsIn": {
			"description": "Subscription Defaults for Control Group In Model",
			"type": "object",
			"properties": {
				"CurrencyCode": {
					"description": "Default Currency",
					"type": "string"
				},
				"Rate": {
					"format": "double",
					"description": "Default Rate",
					"type": "number"
				},
				"DeliveryCode": {
					"description": "Default Delivery Code",
					"type": "string"
				},
				"TermLength": {
					"format": "int32",
					"description": "Default Term",
					"type": "integer"
				},
				"SubscriptionClassCode": {
					"description": "Default Subscription Class",
					"type": "string"
				},
				"Postage": {
					"format": "double",
					"description": "Default Postage",
					"type": "number"
				},
				"BillingStatusCode": {
					"description": "Default billing status code",
					"type": "string"
				},
				"Starts": {
					"format": "date-time",
					"description": "Default issue date",
					"type": "string"
				},
				"RenewalStarts": {
					"format": "date-time",
					"description": "Default renewal start date",
					"type": "string"
				},
				"DonorTypeCode": {
					"description": "Default Donor Type",
					"type": "string"
				},
				"SubscriptionTypeCode": {
					"description": "Default subscription type",
					"type": "string"
				},
				"SalesRepCode": {
					"description": "Default Sales Rep",
					"type": "string"
				},
				"InvoiceDate": {
					"format": "date-time",
					"description": "Default Invoice Date",
					"type": "string"
				},
				"IssueGroupCode": {
					"description": "Default Issue Group",
					"type": "string"
				},
				"FreeIssues": {
					"format": "int32",
					"description": "Default Free Issues",
					"type": "integer"
				},
				"CheckForDuplicateSubscriptions": {
					"description": "Default for check duplicate subscriptions",
					"type": "boolean"
				},
				"EditionCode": {
					"description": "Default Edition Number",
					"type": "string"
				},
				"OverrideEdition": {
					"description": "Default Override Edition",
					"type": "boolean"
				},
				"QuestionnaireCode": {
					"description": "Default Questionnaire",
					"type": "string"
				},
				"ReferredByCustomerNumber": {
					"description": "Default Reference Customer",
					"type": "string"
				}
			}
		},
		"ControlGroupSubscriptionAuditDefaultsIn": {
			"description": "Circulation Audit Defaults for Control Group In Model",
			"type": "object",
			"properties": {
				"BusinessIndustryCode": {
					"description": "Default business/industry code",
					"type": "string"
				},
				"BusinessTitleCode": {
					"description": "Default Business Title",
					"type": "string"
				},
				"AddressTypeCode": {
					"description": "Default Address Type",
					"type": "string"
				},
				"QualificationSourceCode": {
					"description": "Default Qualification Source",
					"type": "string"
				},
				"DateSigned": {
					"format": "date-time",
					"description": "Default Date Signed",
					"type": "string"
				},
				"DateClassified": {
					"format": "date-time",
					"description": "Default Class Date",
					"type": "string"
				},
				"BackToAuditFlag": {
					"description": "Are back-to-audit (BTA) transactions allowed in this control group?",
					"type": "boolean"
				},
				"UnitNumber": {
					"description": "Default unit number",
					"type": "string"
				},
				"ExcludeUnitOverride": {
					"description": "Default exclude unit override",
					"type": "boolean"
				}
			}
		},
		"ControlGroupProductDefaultsIn": {
			"description": "Product Defaults for Control Group In Model",
			"type": "object",
			"properties": {
				"DiscountPercent": {
					"format": "double",
					"description": "Discount percent",
					"type": "number"
				},
				"WarehouseCode": {
					"description": "Warehouse",
					"type": "string"
				},
				"ShipDate": {
					"format": "date-time",
					"description": "Requested shipping date",
					"type": "string"
				},
				"OrderDate": {
					"format": "date-time",
					"description": "Order date",
					"type": "string"
				},
				"RepeatingOrder": {
					"description": "true if repeating order",
					"type": "boolean"
				},
				"RepeatingCycle": {
					"format": "int32",
					"description": "Repeating order cycle",
					"type": "integer"
				},
				"ShiptoCustomerNumber": {
					"description": "Ship-to customer",
					"type": "string"
				},
				"CancellationReasonCode": {
					"description": "Cancel reason",
					"type": "string"
				},
				"RoundToCase": {
					"description": "Round to case flag",
					"enum": [
						"NoButAllowOverride",
						"Always",
						"IfStockAvailable",
						"No"
					],
					"type": "string"
				},
				"GratisReasonCode": {
					"description": "Gratis reason",
					"type": "string"
				},
				"PremiumSetCode": {
					"description": "Premium set",
					"type": "string"
				},
				"CreditReasonCode": {
					"description": "Credit reason",
					"type": "string"
				},
				"InvoiceTermsCode": {
					"description": "Invoice Terms Code",
					"type": "string"
				},
				"ShipViaCode": {
					"description": "Requested Ship via",
					"type": "string"
				},
				"BackorderSetting": {
					"description": "Backorder flag",
					"enum": [
						"No",
						"OutOfStockOnly",
						"PrepubOnly",
						"Yes"
					],
					"type": "string"
				},
				"SearchForCustomerFirst": {
					"description": "True if do customer search first",
					"type": "boolean"
				},
				"OrderType": {
					"description": "Order type",
					"enum": [
						"CreditMemoReturnOrder",
						"GratisOrder",
						"InvoiceableOrder",
						"ModifyOrder",
						"ProFormaOrder",
						"PostShippedOrder",
						"RepeatingOrder",
						"PreviewOrder",
						"WarehouseTransfer"
					],
					"type": "string"
				},
				"DuplicateItemCheck": {
					"description": "Duplicate item flag",
					"enum": [
						"AcrossOrders",
						"CurrentOrder",
						"None"
					],
					"type": "string"
				},
				"SalesRepCode": {
					"description": "Sales rep",
					"type": "string"
				},
				"ShippingRuleCode": {
					"description": "Shipping rule ID",
					"type": "string"
				}
			}
		},
		"ControlGroupIn": {
			"description": "Model for input of a Control Group",
			"type": "object",
			"properties": {
				"Date": {
					"format": "date-time",
					"description": "Control Group Date",
					"type": "string"
				},
				"Code": {
					"description": "Control Group ID",
					"type": "string"
				},
				"Name": {
					"description": "Control Group Name (Description",
					"type": "string"
				},
				"UserCode": {
					"description": "User creating the control group or blank to use the WWWEB user",
					"type": "string"
				},
				"ArpUserCode": {
					"description": "ARP user used to set up ARP control group or null to use\r\nthe user creating the control group",
					"type": "string"
				},
				"OrderSource": {
					"description": "Origination of this order",
					"type": "string"
				},
				"ProductDefaltsScriptCode": {
					"description": "PRO script or null to use the Web PRO script option (WEB/PROSCRPT)",
					"type": "string"
				},
				"SubscriptionDefaultsScriptCode": {
					"description": "CIR script or null to use the Web CIR script option (WEB/CIRSCRPT)",
					"type": "string"
				},
				"AccessDefaultsScriptCode": {
					"description": "AMB script or null to use the Web AMB script option (AMB/CIRSCRPT)",
					"type": "string"
				},
				"OwningUserCode": {
					"description": "Owner user ID",
					"type": "string"
				},
				"Totals": {
					"$ref": "#/definitions/ControlGroupTotals",
					"description": "Control Totals"
				},
				"Defaults": {
					"$ref": "#/definitions/ControlGroupDefaultsIn",
					"description": "Defaults"
				},
				"SubscriptionDefaults": {
					"$ref": "#/definitions/ControlGroupSubscriptionDefaultsIn",
					"description": "Subscription Defaults"
				},
				"SubscriptionAuditDefaults": {
					"$ref": "#/definitions/ControlGroupSubscriptionAuditDefaultsIn",
					"description": "Circulation Audit Defaults"
				},
				"ProductDefaults": {
					"$ref": "#/definitions/ControlGroupProductDefaultsIn",
					"description": "Product Defaults"
				},
				"MembershipDefaults": {
					"$ref": "#/definitions/ControlGroupMembershipDefaults",
					"description": "Membership organization default"
				},
				"ConferenceDefaults": {
					"$ref": "#/definitions/ControlGroupConferenceDefaults",
					"description": "conference ID"
				}
			}
		},
		"ControlGroupBalanceRequest": {
			"description": "Model for Control Group Balance Method",
			"type": "object",
			"properties": {
				"RequestPaymentValidation": {
					"description": "Request Payment Validation?",
					"type": "boolean"
				},
				"AutoRelease": {
					"description": "Also release the control group if it balances?",
					"type": "boolean"
				}
			}
		},
		"ControlGroupUnreleaseRequest": {
			"description": "Model for Unrelease of a Control Group",
			"type": "object",
			"properties": {
				"UserCode": {
					"description": "The ARP user ID to recreate the ARP control group;\r\nWWWEB is used by default",
					"type": "string"
				}
			}
		},
		"ControlGroupPurgeRequest": {
			"description": "Model for Control Group PurgeOffline",
			"type": "object",
			"properties": {
				"DeleteControlGroup": {
					"description": "True to delete the control group after purging orders",
					"type": "boolean"
				}
			}
		},
		"Country": {
			"description": "Information related to a country.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "A unique code identifying the country.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the country.",
					"type": "string"
				},
				"PostalCodeMask": {
					"description": "The mask used to validate the postal code. A = alphanumeric, 9 = numeric, X = optional alphanumeric, 1 = optional numeric.",
					"type": "string"
				},
				"IsoAlpha2": {
					"description": "The 2-character alphabetic symbol for the country, following the ISO standard.",
					"type": "string"
				},
				"IsoAlpha3": {
					"description": "The 3-character alphabetic symbol for the country, following the ISO standard.",
					"type": "string"
				},
				"RegionCode": {
					"description": "The identifier for the region of this country.",
					"type": "string"
				},
				"IsoNumeric": {
					"format": "int32",
					"description": "The numeric symbol for the country, following the ISO standard.",
					"type": "integer"
				},
				"States": {
					"description": "The states that are part of the country.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/State"
					}
				}
			}
		},
		"State": {
			"description": "Information for a state or province within a country.",
			"type": "object",
			"properties": {
				"CountryCode": {
					"description": "The code of the country this state is a member of.",
					"type": "string"
				},
				"Code": {
					"description": "The identifying code of the state.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the state.",
					"type": "string"
				}
			}
		},
		"PostalCode": {
			"description": "Model for PostalCode Data",
			"type": "object",
			"properties": {
				"Code": {
					"description": "Value of Postal Code",
					"type": "string"
				},
				"CountryCode": {
					"description": "Country Code",
					"type": "string"
				},
				"StateCode": {
					"description": "State",
					"type": "string"
				},
				"CityName": {
					"description": "City Name",
					"type": "string"
				},
				"CountyName": {
					"description": "County Name",
					"type": "string"
				},
				"ClassificationCode": {
					"description": "Classification Code",
					"type": "string"
				}
			}
		},
		"SearchResult[PostalCode]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PostalCode"
					}
				}
			}
		},
		"SearchResult[CouponUse]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CouponUse"
					}
				}
			}
		},
		"CouponUse": {
			"description": "Information about a customer's use of a coupon",
			"type": "object",
			"properties": {
				"OrderNumber": {
					"description": "Order number",
					"type": "string"
				},
				"CouponCode": {
					"description": "Coupon code",
					"type": "string"
				},
				"CustomerNumber": {
					"description": "Customer number",
					"type": "string"
				},
				"PreCouponAmount": {
					"format": "double",
					"description": "Pre coupon amount",
					"type": "number"
				},
				"PostCouponAmount": {
					"format": "double",
					"description": "Post coupon amount",
					"type": "number"
				},
				"BillingCurrencyCode": {
					"description": "Billing currency code",
					"type": "string"
				}
			}
		},
		"ReassignCreditRequest": {
			"description": "Parameters for requesting a credit reassignment.",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "Customer number to reassign specified credit to (either this or DebitNumber must be supplied).",
					"type": "string"
				},
				"CreditReversalInfo": {
					"$ref": "#/definitions/CreditReversalInfo",
					"description": "Information describing how the credit being reassigned is to be reversed to the original customer (before reassigning)."
				}
			}
		},
		"CreditReversalInfo": {
			"description": "This class is used as set of parameter fields to perform a credit reversal.",
			"type": "object",
			"properties": {
				"ReversalEntryDate": {
					"format": "date-time",
					"description": "The date of the reversal entry. If not supplied the control group date is used",
					"type": "string"
				},
				"BadCheckOrCredit": {
					"description": "Bad Check or Credit? defaults to false.",
					"type": "boolean"
				},
				"CreditComment": {
					"description": "The Credit Comment, \"Reassign to Cust#{0}\" is used if assigned",
					"type": "string"
				},
				"SuspensionAccount": {
					"description": "Suspension G/L account, default values used if not assigned",
					"type": "string"
				},
				"CashAccount": {
					"description": "Cash G/L account, default values used if not assigned",
					"type": "string"
				},
				"CreditReasonCode": {
					"description": "The Credit Reason, defaults to blank",
					"type": "string"
				}
			}
		},
		"SavedCreditCard": {
			"description": "Information pertaining to credit card payment.",
			"type": "object",
			"properties": {
				"Token": {
					"description": "The credit card token",
					"type": "string"
				},
				"CardMask": {
					"description": "The masked credit card number.",
					"type": "string"
				},
				"PaymentMethod": {
					"$ref": "#/definitions/CreditCardPaymentMethod",
					"description": "i.e. Visa or MasterCard."
				},
				"ExpireMonth": {
					"format": "int32",
					"description": "Card expiration month.",
					"type": "integer"
				},
				"ExpireYear": {
					"format": "int32",
					"description": "Card expiration year (four digits).",
					"type": "integer"
				},
				"IsValidForFuturePayments": {
					"description": "Is this card valid for future use?",
					"type": "boolean"
				},
				"ElectronicPaymentId": {
					"description": "The electronic payment ID which uniquely identifies this card.  To use the saved card on a new order, \r\nor to update the expire date, use this payment ID to identify the card.",
					"type": "string"
				},
				"IsLinkedToAutoRenewal": {
					"description": "Whether this card is used for any auto-renewals.",
					"type": "boolean"
				},
				"IsWebDefault": {
					"description": "Is this card a default for orders coming from the web?",
					"type": "boolean"
				},
				"DateLastUsed": {
					"format": "date-time",
					"description": "The date the credit card was last used",
					"type": "string"
				},
				"DateAdded": {
					"format": "date-time",
					"description": "The date the credit card was added",
					"type": "string"
				},
				"Nickname": {
					"description": "Affiliate nickname of the card",
					"type": "string"
				}
			}
		},
		"CreditCardPaymentMethod": {
			"description": "Information pertaining to a payment method.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The code identifying the payment method.",
					"type": "string"
				},
				"Name": {
					"description": "The name of this payment method.",
					"type": "string"
				},
				"Provider": {
					"description": "Card provider (Visa, Mastercard, etc.)",
					"enum": [
						"Unknown",
						"AmericanExpress",
						"AustralianBankCard",
						"BankCard",
						"CarteBlue",
						"DinersClub",
						"Discover",
						"Dankort",
						"Visa",
						"VisaDelta",
						"VisaElectron",
						"Jcb",
						"MaestroDomestic",
						"MaestroInternational",
						"MasterCard"
					],
					"type": "string"
				},
				"Vendor": {
					"description": "Credit Card Vendor (Cybersource, Litle, Westpac, etc.)",
					"enum": [
						"Unknown",
						"AdvancedIntegrationMethod",
						"ChasePaymentech",
						"CyberSource",
						"DataCash",
						"DibsPaymentServices",
						"EgateVirtualPaymentClient",
						"FirstData",
						"FranceCt6",
						"HdfcBank",
						"Litle",
						"GenericVendor",
						"OgoneDirectlink",
						"PayflowPro",
						"Payline",
						"PaymentExpress",
						"TestVendor",
						"Westpac",
						"Worldpay"
					],
					"type": "string"
				},
				"AccountId": {
					"description": "Account ID",
					"type": "string"
				},
				"SecurityCodeHandling": {
					"description": "Indicates how to handle the card security code.",
					"enum": [
						"Required",
						"Optional",
						"None"
					],
					"type": "string"
				},
				"IsMaestro": {
					"description": "True if the card is a Maestro card.",
					"type": "boolean"
				},
				"SaveForFutureUse": {
					"description": "Default value of save for future use for this payment method",
					"type": "string"
				}
			}
		},
		"CreditCardUpdateRequest": {
			"description": "Information needed to update a credit card.",
			"type": "object",
			"properties": {
				"ExpireMonth": {
					"format": "int32",
					"description": "The new expiration month.",
					"type": "integer"
				},
				"ExpireYear": {
					"format": "int32",
					"description": "The new expiration year.",
					"type": "integer"
				},
				"IsValidForFuturePayments": {
					"description": "Is this card valid for use in the future?",
					"type": "boolean"
				},
				"IsWebDefault": {
					"description": "Is card a default for orders from the web?",
					"type": "boolean"
				}
			}
		},
		"CreditCardAddRequest": {
			"description": "Information for adding a credit card to a customer account.",
			"type": "object",
			"properties": {
				"CardVaultToken": {
					"description": "Card vault token value. Provide this value only if the card was already deposited into Card Vault.",
					"type": "string"
				},
				"Token": {
					"description": "Card vendor token value. Provide this value only if the card was already tokenized outside Advantage with the card vendor.",
					"type": "string"
				},
				"Number": {
					"description": "The card number, or card mask if supplying Token.",
					"type": "string"
				},
				"PaymentMethodCode": {
					"description": "The Advantage payment code for the type of card to use.",
					"type": "string"
				},
				"ExpireMonth": {
					"format": "int32",
					"description": "Card expiration month.",
					"type": "integer"
				},
				"ExpireYear": {
					"format": "int32",
					"description": "Card expiration year (four digits).",
					"type": "integer"
				},
				"StartYear": {
					"description": "The card start year (required for some types of credit cards)",
					"type": "string"
				},
				"StartMonth": {
					"description": "The card start month (required for some types of credit cards)",
					"type": "string"
				},
				"IssueNumber": {
					"description": "The card issue number (required for some types of credit cards)",
					"type": "string"
				},
				"SaveForFuturePayments": {
					"description": "Is this card valid for future use?",
					"type": "boolean"
				},
				"IsWebDefault": {
					"description": "Is this card a default for orders from the web?",
					"type": "boolean"
				}
			}
		},
		"CreditCardAuthorizationRequest": {
			"description": "A credit card authorization request may be for a new credit card or a card saved on a customer account.",
			"type": "object",
			"properties": {
				"Customer": {
					"$ref": "#/definitions/CustomerAddressUpdateRequest",
					"description": "Customer information"
				},
				"Card": {
					"$ref": "#/definitions/CreditCardAddRequest",
					"description": "Credit card information"
				},
				"Amount": {
					"format": "double",
					"description": "Authorization amount",
					"type": "number"
				},
				"CscNumber": {
					"description": "CSC number",
					"type": "string"
				},
				"AuthorizationDescription": {
					"description": "Authorization description",
					"type": "string"
				}
			}
		},
		"CustomerAddressUpdateRequest": {
			"description": "Information for a customer's address.",
			"type": "object",
			"properties": {
				"AddressCode": {
					"description": "The identifying address code for this address.",
					"type": "string"
				},
				"FullName": {
					"description": "The full name of the customer.  \r\nWhen adding or updating a customer address you should provide the Name or the FullName, not both.",
					"type": "string"
				},
				"Name": {
					"$ref": "#/definitions/CustomerName",
					"description": "The elements of the customer's name.  \r\nWhen adding or updating a customer address you should provide the Name or the FullName, not both."
				},
				"Email": {
					"description": "The email for the customer.",
					"type": "string"
				},
				"Phone": {
					"description": "The primary phone number for the customer.",
					"type": "string"
				},
				"Phone2": {
					"description": "An alternate phone number for the customer.",
					"type": "string"
				},
				"Phone3": {
					"description": "An alternate phone number for the customer.",
					"type": "string"
				},
				"Fax": {
					"description": "The Fax number for the customer.",
					"type": "string"
				},
				"Company": {
					"description": "The company name.",
					"type": "string"
				},
				"Department": {
					"description": "The department name",
					"type": "string"
				},
				"PostalAddress": {
					"$ref": "#/definitions/PostalAddressUpdateRequest",
					"description": "The physical postal address."
				},
				"PromoteByEmail": {
					"description": "Specifies whether or not to send promotional emails.",
					"type": "string"
				},
				"PromoteByPhone": {
					"description": "Specifies whether or not to make promotional calls.",
					"type": "string"
				},
				"PromoteBySms": {
					"description": "Specifies whether or not to send promotional texts.",
					"type": "string"
				},
				"PromoteByMail": {
					"description": "Specifies whether or not to send promotional mail.",
					"type": "string"
				},
				"PromoteByFax": {
					"description": "Specifies whether or not to send promotional faxes.",
					"type": "string"
				},
				"PromoteByPhone1": {
					"description": "Specifies whether or not to make promotional calls to the customer's Phone Number 1.",
					"type": "string"
				},
				"PromoteByPhone2": {
					"description": "Specifies whether or not to make promotional calls to the customer's Phone Number 2.",
					"type": "string"
				},
				"PromoteByPhone3": {
					"description": "Specifies whether or not to make promotional calls to the customer's Phone Number 3.",
					"type": "string"
				},
				"IsDefault": {
					"description": "Is this the customer's default address?",
					"type": "boolean"
				},
				"ChangeSource": {
					"description": "The system that last changed the customer record",
					"type": "string"
				}
			}
		},
		"PostalAddressUpdateRequest": {
			"description": "Information for a physical postal address.",
			"type": "object",
			"properties": {
				"Line1": {
					"description": "The first line of the address.",
					"type": "string"
				},
				"Line2": {
					"description": "The second line of the address.",
					"type": "string"
				},
				"Line3": {
					"description": "The third line of the address.",
					"type": "string"
				},
				"City": {
					"description": "The name of the city.",
					"type": "string"
				},
				"StateCode": {
					"description": "State or province.",
					"type": "string"
				},
				"CountryCode": {
					"description": "Country.",
					"type": "string"
				},
				"PostalCode": {
					"description": "Postal code.",
					"type": "string"
				}
			}
		},
		"CreditCardAuthorization": {
			"description": "Credit card authorizations are the data associated with a credit card transaction that is either\r\nfrom a credit card associate with an Advantage customer or a pre-authorization that may not have\r\na card saved in Advantage.",
			"type": "object",
			"properties": {
				"AuthorizationDate": {
					"format": "date-time",
					"description": "Authorization date",
					"type": "string"
				},
				"AuthorizationCode": {
					"description": "Authorization code",
					"type": "string"
				},
				"AuthorizationTransaction": {
					"description": "Authorization transaction numbers",
					"type": "string"
				},
				"IsAuthorized": {
					"description": "Authorization is valid",
					"type": "boolean"
				}
			}
		},
		"AccountCreateRequest": {
			"description": "Information for requesting the creation of an account.",
			"type": "object",
			"properties": {
				"Customer": {
					"$ref": "#/definitions/CustomerCreateRequest",
					"description": "Information for creating a customer."
				},
				"User": {
					"$ref": "#/definitions/UserCreateRequest",
					"description": "Information for creating a user.  (Optional)"
				},
				"SingleSignOn": {
					"$ref": "#/definitions/SingleSignOnCreateRequest",
					"description": "Information for creating a single sign-on authentication record. (Optional)"
				}
			}
		},
		"CustomerCreateRequest": {
			"description": "Information needed to request the creation of a customer.",
			"type": "object",
			"properties": {
				"Address": {
					"$ref": "#/definitions/CustomerAddressUpdateRequest",
					"description": "The information needed for the customer's address."
				},
				"AddressStandardizationSetting": {
					"description": "The standardization settings for validating the address.",
					"enum": [
						"UseAdvantageSystemOption",
						"Off",
						"Accept",
						"MarkExempt",
						"MarkForReview",
						"MarkInvalid",
						"Reject"
					],
					"type": "string"
				},
				"Promote": {
					"description": "Specifies whether or not the customer has opted to receive promotions.\r\nIf this isn't set, a Y/N value will be extrapolated based on the Address.PromoteByX settings.",
					"type": "string"
				},
				"PromoteByPartners": {
					"description": "Specifies whether or not the customer has opted to receive promotions from third-parties.",
					"type": "string"
				},
				"BirthDate": {
					"format": "date-time",
					"description": "The customer's date of birth",
					"type": "string"
				},
				"SexCode": {
					"description": "The customer's gender",
					"type": "string"
				},
				"CustomerType": {
					"description": "The type code for the customer",
					"type": "string"
				},
				"ChangeSource": {
					"description": "The system that last changed the customer record",
					"type": "string"
				},
				"Demographics": {
					"description": "Customer demographic values (from the CUS-DMO1, CUS-DMO2, CUS-DMO3 partitions) to store on the\r\nnew customer record.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DemographicValue"
					}
				},
				"BlockDuplicateMatchLevelCode": {
					"description": "You can optionally block the addition of a new customer if a duplicate customer already exists.\r\nTo enable this check, specify a match level for the duplicate customer search.  If a duplicate\r\ncustomer is found using this check then no customer is added and no customer information is returned.",
					"type": "string"
				},
				"ForceCreate": {
					"description": "In addition to the duplicate blocking feature, the Advantage API includes a set of system options\r\nthat can enable additional duplicate handling.  For example, the options can be configured such that\r\nduplicate customers are prevented by converting a customer creation request into an update of the\r\nexisting (duplicate) customer.  Use the ForceCreate flag to override the duplicate handling settings\r\nand always create new customers.",
					"type": "boolean"
				},
				"IsAccount": {
					"description": "Is this an account customer?",
					"type": "boolean"
				},
				"BlockDuplicateMatchWithActivity": {
					"description": "You can optionally block the addition of a new customer if a duplicate customer already exists.\r\nTo enable this check, specify a BlockDuplicateMatchLevelCode.  However, in some cases we may want \r\nto require that a customer doesn't \"already exist\" unless they actually have activity (orders or authentication). \r\nWithout activity, these customer records are possibly just residue from simple email list participation.  \r\nThis option works in conjunction with BlockDuplicateMatchLevelCode and says to only consider the existing customer \"found\" \r\nif the they have activity.",
					"type": "boolean"
				}
			}
		},
		"UserCreateRequest": {
			"description": "Information for creating a user login (\"L\" type authentication).",
			"type": "object",
			"properties": {
				"UserName": {
					"description": "The username.",
					"type": "string"
				},
				"Password": {
					"description": "The password.",
					"type": "string"
				},
				"PasswordHint": {
					"description": "A password hint to can provided by a customer to help them remember their password",
					"type": "string"
				},
				"AuthenticationGroupCode": {
					"description": "The user's authentication group.",
					"type": "string"
				}
			}
		},
		"SingleSignOnCreateRequest": {
			"description": "Information for creating a single sign-on authentication record (e.g. Google, Shibboleth)",
			"type": "object",
			"properties": {
				"ExternalId": {
					"description": "The external id that uniquely identifies a user from a third-party such as Google.\r\nIf this is blank, the {Advantage.Rest.Models.SingleSignOnCreateRequest.SingleSignOnAuthenticationType} is set to SingleSignOn and\r\nthe {Advantage.Rest.Models.SingleSignOnCreateRequest.AuthenticationGroupCode} is configured for SSO integration,\r\nthen we'll create a user in the SSO.",
					"type": "string"
				},
				"AuthenticationGroupCode": {
					"description": "The user's authentication group.",
					"type": "string"
				},
				"SingleSignOnAuthenticationType": {
					"description": "Single sign-on authentication type",
					"enum": [
						"Athens",
						"CountryCode",
						"Facebook",
						"Google",
						"LinkedIn",
						"SingleSignOn",
						"Shibboleth",
						"Twitter"
					],
					"type": "string"
				},
				"UserName": {
					"description": "The customer's desired username, used for creating a new user in the single sign-on system.\r\nThis is optional and should only be provided when an {Advantage.Rest.Models.SingleSignOnCreateRequest.ExternalId} is not provided.\r\nThis is typically the customer's email address.",
					"type": "string"
				},
				"Password": {
					"description": "The customer's desired password, used for creating a new user in the single sign-on system.\r\nThis is optional and should only be provided when an {Advantage.Rest.Models.SingleSignOnCreateRequest.ExternalId} is not provided.\r\nIf a password is not specified and a new single-sign on user is created, then a password will be generated\r\nand the user will be prompted via email to reset.",
					"type": "string"
				}
			}
		},
		"AccountCreateResponse": {
			"description": "The information received in response to an account creation request.",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "The customer number of customer tied to the account. (This may be a new customer number.)\r\nIs Null if a matching customer was found and request was for not matching and not making new customer.",
					"type": "string"
				},
				"AddressCode": {
					"description": "The address code of the customer tied to the account.",
					"type": "string"
				},
				"FirstName": {
					"description": "The first name of the customer tied to the account.",
					"type": "string"
				},
				"LastName": {
					"description": "The last name of the customer tied to the account.",
					"type": "string"
				},
				"Email": {
					"description": "The Email Address of the customer tied to the account.",
					"type": "string"
				},
				"AuthenticationNumber": {
					"description": "The authentication number of the created customer authentication method record",
					"type": "string"
				}
			}
		},
		"CustomerComparison": {
			"description": "A filter to apply to a customer search",
			"type": "object",
			"properties": {
				"Field": {
					"description": "Name of field in table to compare",
					"enum": [
						"CustomerNumber",
						"FullName",
						"EmailAddress",
						"PhoneNumber",
						"PhoneNumber2",
						"PhoneNumber3",
						"Street1",
						"Street2",
						"Street3",
						"City",
						"State",
						"CountryCode",
						"PostalCode",
						"FaxNumber",
						"Company",
						"CustomerType",
						"PromoteFlag",
						"PromoteByPartners",
						"PromoteByPhone",
						"PromoteByFax",
						"PromoteByEmail",
						"PromoteByMail",
						"PromoteBySms",
						"PromoteByPhone1",
						"PromoteByPhone2",
						"PromoteByPhone3",
						"Title",
						"FirstName",
						"MiddleInitial",
						"LastName",
						"Suffix",
						"JobTitle",
						"JobPositionCode",
						"CommunicationPreference",
						"SourcePromotion",
						"AddressCode",
						"DefaultCurrency",
						"Department",
						"County",
						"PinCode",
						"SocialSecurityNumber",
						"StreetName",
						"StreetType",
						"LastUpdatedOn",
						"ItemNumber",
						"LastNameSoundex",
						"CompanyNameSoundex"
					],
					"type": "string"
				},
				"Operator": {
					"description": "Operator to use in comparison",
					"enum": [
						"Equal",
						"NotEqual",
						"Less",
						"LessOrEqual",
						"Greater",
						"GreaterOrEqual",
						"IsNull",
						"IsNotNull",
						"Like",
						"NotLike",
						"Contains",
						"NotContains",
						"StartsWith",
						"NotStartsWith",
						"EndsWith",
						"NotEndsWith",
						"In",
						"Between"
					],
					"type": "string"
				},
				"Value": {
					"description": "Value to compare the field to; specify comma separated values if the operator is \"In\"",
					"type": "string"
				}
			}
		},
		"SearchResult[Customer]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Customer"
					}
				}
			}
		},
		"Customer": {
			"description": "Information for a customer.",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "The Advantage customer number",
					"type": "string"
				},
				"Promote": {
					"description": "A setting that denotes whether or not the customer is OK to promote to.",
					"type": "string"
				},
				"PromoteByPartners": {
					"description": "A setting that denotes whether or not the customer is OK to promote to by third-parties.",
					"type": "string"
				},
				"BirthDate": {
					"format": "date-time",
					"description": "The customer's date of birth",
					"type": "string"
				},
				"SexCode": {
					"description": "The customer's gender",
					"type": "string"
				},
				"TaxExemptionId": {
					"description": "The customer's tax exemption ID",
					"type": "string"
				},
				"CreditStatusCode": {
					"description": "The customer's credit status",
					"type": "string"
				},
				"CustomerTypeCode": {
					"description": "The customer type is used to categorize customers",
					"type": "string"
				},
				"ChangeSource": {
					"description": "The system that last changed the customer record",
					"type": "string"
				},
				"CreditSummary": {
					"$ref": "#/definitions/CustomerCreditSummary",
					"description": "A summary of the customer A/R, reflecting all posted credits and debits."
				},
				"Addresses": {
					"description": "The customer's saved addresses",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomerAddress"
					}
				},
				"Demographics": {
					"description": "Customer demographic values (from the CUS-DMO1, CUS-DMO2, CUS-DMO3 partitions) saved on the customer record.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DemographicValue"
					}
				},
				"CustomerUrl": {
					"description": "Returns the value of the Customer URL for the current customer",
					"type": "string"
				},
				"SubscriptionList": {
					"description": "Returns a list of pub codes of the first 16 subscriptions found for the customer",
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"CustomerCreditSummary": {
			"description": "The credit summary reflects all posted credits and debits on the customer's A/R.",
			"type": "object",
			"properties": {
				"CurrencyCode": {
					"description": "Gets the customer's default currency code.",
					"type": "string"
				},
				"CreditStatusCode": {
					"description": "Gets the credit status code assigned by the accounting department to the customer.",
					"type": "string"
				},
				"BadPaymentCount": {
					"format": "int32",
					"description": "Gets the number of bad payments for the customer.  This includes bad checks\r\nand rejected credit card and direct debit payments.",
					"type": "integer"
				},
				"BadPaymentAmount": {
					"format": "double",
					"description": "Gets the total value of bad payments for the current customer.",
					"type": "number"
				},
				"WrittenOffAmount": {
					"format": "double",
					"description": "Gets the amount written off for the current customer.",
					"type": "number"
				},
				"AccountBalance": {
					"format": "double",
					"description": "Gets the account balance for the current customer in the customer's default currency.",
					"type": "number"
				}
			}
		},
		"CustomerAddress": {
			"description": "Information for a customer's address.",
			"type": "object",
			"properties": {
				"FullName": {
					"description": "The full name of the customer.",
					"type": "string"
				},
				"Name": {
					"$ref": "#/definitions/CustomerName",
					"description": "The elements of the customer's name."
				},
				"Email": {
					"description": "The email for the customer.",
					"type": "string"
				},
				"Phone": {
					"description": "The primary phone number for the customer.",
					"type": "string"
				},
				"Phone2": {
					"description": "An alternate phone number for the customer.",
					"type": "string"
				},
				"Phone3": {
					"description": "An alternate phone number for the customer.",
					"type": "string"
				},
				"Fax": {
					"description": "The Fax number for the customer.",
					"type": "string"
				},
				"Company": {
					"description": "The company name.",
					"type": "string"
				},
				"Department": {
					"description": "The department name",
					"type": "string"
				},
				"PostalAddress": {
					"$ref": "#/definitions/PostalAddress",
					"description": "The physical postal address."
				},
				"AddressCode": {
					"description": "The identifying address code for this address.",
					"type": "string"
				},
				"CustomerNumber": {
					"description": "The customer number.",
					"type": "string"
				},
				"PromoteByEmail": {
					"description": "Specifies whether or not to send promotional emails.",
					"type": "string"
				},
				"PromoteByPhone": {
					"description": "Specifies whether or not to make promotional calls.",
					"type": "string"
				},
				"PromoteBySms": {
					"description": "Specifies whether or not to send promotional texts.",
					"type": "string"
				},
				"PromoteByMail": {
					"description": "Specifies whether or not to send promotional mail.",
					"type": "string"
				},
				"PromoteByFax": {
					"description": "Specifies whether or not to send promotional faxes.",
					"type": "string"
				},
				"IsValidBillToAddress": {
					"description": "Specifies whether or not this is a valid bill to address.",
					"type": "boolean"
				},
				"IsValidShipToAddress": {
					"description": "Specifies whether or not this is a valid ship to address.",
					"type": "boolean"
				},
				"NotOkAsBillToReason": {
					"description": "If IsValidBillToAddress is false, then this holds the reason why the address cannot be used as a bill-to.",
					"type": "string"
				},
				"NixieCounter": {
					"format": "int32",
					"description": "The nixie counter.",
					"type": "integer"
				},
				"NotOkAsShipToReason": {
					"description": "If IsValidShipToAddress is false, then this holds the reason why the address cannot be used as a ship-to.",
					"type": "string"
				},
				"PromoteByPhone1": {
					"description": "Specifies whether or not to make promotional calls to the customer's Phone Number 1.",
					"type": "string"
				},
				"PromoteByPhone2": {
					"description": "Specifies whether or not to make promotional calls to the customer's Phone Number 2.",
					"type": "string"
				},
				"PromoteByPhone3": {
					"description": "Specifies whether or not to make promotional calls to the customer's Phone Number 3.",
					"type": "string"
				},
				"IsDefault": {
					"description": "Is this the customer's default address?",
					"type": "boolean"
				},
				"ChangeSource": {
					"description": "The system that last changed the customer record",
					"type": "string"
				},
				"JobPositionCode": {
					"description": "Position code indicating position in company",
					"type": "string"
				},
				"JobTitleName": {
					"description": "Prospect's job title",
					"type": "string"
				}
			}
		},
		"PostalAddress": {
			"description": "Information for a physical postal address.",
			"type": "object",
			"properties": {
				"Line1": {
					"description": "The first line of the address.",
					"type": "string"
				},
				"Line2": {
					"description": "The second line of the address.",
					"type": "string"
				},
				"Line3": {
					"description": "The third line of the address.",
					"type": "string"
				},
				"City": {
					"description": "The name of the city.",
					"type": "string"
				},
				"StateCode": {
					"description": "State or province.",
					"type": "string"
				},
				"CountryCode": {
					"description": "Country.",
					"type": "string"
				},
				"PostalCode": {
					"description": "Postal code.",
					"type": "string"
				},
				"AddressBlock": {
					"description": "The complete postal address with &lt;br/&gt; tags separating address lines",
					"type": "string"
				}
			}
		},
		"ValidateAccountPostalCodeRequest": {
			"description": "Information for validating a customer number using the customer's postal code and country code.",
			"type": "object",
			"properties": {
				"CountryCode": {
					"description": "The country code supplied by the customer",
					"type": "string"
				},
				"PostalCode": {
					"description": "The postal code supplied by the customer",
					"type": "string"
				}
			}
		},
		"ActivateAccountRequest": {
			"description": "Information for activating a new account (an Advantage web user).",
			"type": "object",
			"properties": {
				"AddressCode": {
					"description": "The email address will be associated with this customer address.  If not provided then the email address is \r\nassociated with the customer's default address.  (Optional)",
					"type": "string"
				},
				"Email": {
					"description": "The email address to associate with this customer.  (Optional)",
					"type": "string"
				},
				"User": {
					"$ref": "#/definitions/UserCreateRequest",
					"description": "Information for creating a user. (Optional if SingleSignOn object is provided.)"
				},
				"SingleSignOn": {
					"$ref": "#/definitions/SingleSignOnCreateRequest",
					"description": "Information for creating a single sign-on authentication record. (Optional if User object is provided.)"
				}
			}
		},
		"CustomerUpdateRequest": {
			"description": "Information to update addresses for a customer. All fields are optional and will not change if not provided.",
			"type": "object",
			"properties": {
				"Promote": {
					"description": "Is it OK to promote to this customer?",
					"type": "string"
				},
				"PromoteByPartners": {
					"description": "Specifies whether the customer allows third-party promotions.",
					"type": "string"
				},
				"BirthDate": {
					"format": "date-time",
					"description": "The customer's date of birth",
					"type": "string"
				},
				"SexCode": {
					"description": "The customer's gender",
					"type": "string"
				},
				"CustomerType": {
					"description": "The type code for the customer",
					"type": "string"
				},
				"ChangeSource": {
					"description": "The system that last changed the customer record",
					"type": "string"
				},
				"Demographics": {
					"description": "Customer demographic values (from the CUS-DMO1, CUS-DMO2, CUS-DMO3 partitions) to store on the\r\ncustomer record.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DemographicValue"
					}
				},
				"Addresses": {
					"description": "The new information for the addresses to update.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomerAddressUpdateRequest"
					}
				},
				"AddressStandardizationSetting": {
					"description": "The standardization settings for validating the address",
					"enum": [
						"UseAdvantageSystemOption",
						"Off",
						"Accept",
						"MarkExempt",
						"MarkForReview",
						"MarkInvalid",
						"Reject"
					],
					"type": "string"
				}
			}
		},
		"CustomerEmailUpdateRequest": {
			"description": "Information to update email addresses for a customer. All fields except Email Address \r\nare optional and will not change if not provided. Update requests without the email \r\naddress will be ignored.",
			"type": "object",
			"properties": {
				"Email": {
					"description": "An Email Address",
					"type": "string"
				},
				"EmailTargetDevice": {
					"description": "An Email Target Device",
					"type": "string"
				},
				"IsEmailValid": {
					"description": "An Email Valid",
					"type": "boolean"
				},
				"PromoteByEmail": {
					"description": "A Promote By Email",
					"type": "string"
				},
				"ChangeSource": {
					"description": "A Change Source",
					"type": "string"
				},
				"Demographics": {
					"description": "Customer email demographic values saved on the customer email record (CDSEML-M).",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DemographicValue"
					}
				}
			}
		},
		"CustomerActivityPaginationSettings": {
			"description": "Pagination settings for customer activity",
			"type": "object",
			"properties": {
				"OrderByFields": {
					"description": "Enumeration of order by columns",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomerActivityOrderByField"
					}
				},
				"Skip": {
					"format": "int32",
					"description": "The number of records to skip.",
					"type": "integer"
				},
				"Take": {
					"format": "int32",
					"description": "The number of records to return.",
					"type": "integer"
				}
			}
		},
		"CustomerActivityOrderByField": {
			"description": "Customer activity field to order by",
			"type": "object",
			"properties": {
				"FieldName": {
					"description": "Name of field to order by",
					"enum": [
						"SystemName",
						"ProductType",
						"ItemNumber",
						"StatusDescription",
						"ActivityId",
						"TermNumber",
						"SequenceNumber",
						"Status",
						"CustomerNumber",
						"AddressCode",
						"SubReference",
						"AgreementId",
						"CustomerPoNumber",
						"OriginalOrderNumber",
						"OwningOrganization",
						"ItemDescription",
						"FinalExpireDate",
						"MembershipOrganization",
						"MembershipCategory",
						"ControlGroupDate",
						"ControlGroupId",
						"PromotionCode",
						"PromotionChoice",
						"Rate",
						"RemainingLiability",
						"BillingStatus",
						"BillingStatusDescription",
						"CirculationStatus",
						"CirculationStatusDescription"
					],
					"type": "string"
				},
				"Ascending": {
					"description": "True if order is ascending; false if order is descending",
					"type": "boolean"
				}
			}
		},
		"CustomerActivityComparison": {
			"description": "Data transfer object for customer activity search expressions",
			"type": "object",
			"properties": {
				"Field": {
					"description": "Name of field in table to compare",
					"enum": [
						"SystemName",
						"OriginalOrderNumber"
					],
					"type": "string"
				},
				"Operator": {
					"description": "Operator to use in comparison",
					"enum": [
						"Equal",
						"NotEqual",
						"Less",
						"LessOrEqual",
						"Greater",
						"GreaterOrEqual",
						"IsNull",
						"IsNotNull",
						"Like",
						"NotLike",
						"Contains",
						"NotContains",
						"StartsWith",
						"NotStartsWith",
						"EndsWith",
						"NotEndsWith",
						"In",
						"Between"
					],
					"type": "string"
				},
				"Value": {
					"description": "Value to compare the field to; specify comma separated values if the operator is \"In\"",
					"type": "string"
				}
			}
		},
		"SearchResultWithCount[CustomerActivity]": {
			"description": "The Order History response.",
			"type": "object",
			"properties": {
				"TotalCount": {
					"format": "int32",
					"description": "Gets the total number of orders found for the given customer.",
					"type": "integer"
				},
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomerActivity"
					}
				}
			}
		},
		"CustomerActivity": {
			"description": "Contains all of the information about a Customer Activity",
			"type": "object",
			"properties": {
				"SystemName": {
					"description": "System Name",
					"type": "string"
				},
				"ProductType": {
					"description": "Product Type",
					"type": "string"
				},
				"ActivityId": {
					"description": "Activity ID",
					"type": "string"
				},
				"TermNumber": {
					"format": "int32",
					"description": "Term Number",
					"type": "integer"
				},
				"ActivitySequence": {
					"format": "int32",
					"description": "Activity Sequence",
					"type": "integer"
				},
				"ItemNumber": {
					"description": "Item Number",
					"type": "string"
				},
				"CustomerNumber": {
					"description": "Customer Number",
					"type": "string"
				},
				"AddressCode": {
					"description": "Address Code",
					"type": "string"
				},
				"ActivityStatus": {
					"description": "Status",
					"type": "string"
				},
				"StatusDescription": {
					"description": "Status Description",
					"type": "string"
				},
				"SubReference": {
					"description": "Sub. Reference",
					"type": "string"
				},
				"AgreementId": {
					"description": "Agreement ID",
					"type": "string"
				},
				"CustomerPoNumber": {
					"description": "Customer PO #",
					"type": "string"
				},
				"OwningOrganization": {
					"description": "Owning Organization",
					"type": "string"
				},
				"OriginalOrderNumber": {
					"description": "Original Order",
					"type": "string"
				},
				"PromotionCode": {
					"description": "Promotion Code",
					"type": "string"
				},
				"PromotionChoice": {
					"description": "Promotion Choice",
					"type": "string"
				},
				"BillingStatus": {
					"description": "Billing Status",
					"type": "string"
				},
				"BillingStatusDescription": {
					"description": "A formattted billing status description, usually description followed by code in parenthesis",
					"type": "string"
				},
				"FinalExpireDate": {
					"format": "date-time",
					"description": "Final Expire",
					"type": "string"
				},
				"ItemDescription": {
					"description": "Item Description",
					"type": "string"
				},
				"ControlGroupDate": {
					"format": "date-time",
					"description": "Original Control Group Date",
					"type": "string"
				},
				"ControlGroupId": {
					"description": "Original Control Group ID",
					"type": "string"
				},
				"MembershipOrganization": {
					"description": "Membership Organization",
					"type": "string"
				},
				"MembershipCategory": {
					"description": "Membership Category",
					"type": "string"
				},
				"CirculationStatus": {
					"description": "Circulation Status",
					"type": "string"
				},
				"CirculationStatusDescription": {
					"type": "string"
				},
				"Rate": {
					"format": "double",
					"description": "Rate",
					"type": "number"
				},
				"RemainingLiability": {
					"format": "double",
					"description": "Remaining Liability",
					"type": "number"
				}
			}
		},
		"CustomerActivityAr": {
			"description": "Information about A/R associated with a customer activity",
			"type": "object",
			"properties": {
				"TransactionDate": {
					"format": "date-time",
					"description": "Transaction Date",
					"type": "string"
				},
				"Source": {
					"description": "Source",
					"type": "string"
				},
				"SourceReference": {
					"description": "Source Reference",
					"type": "string"
				},
				"BillingOrganization": {
					"description": "Billing Organization",
					"type": "string"
				},
				"TotalAmount": {
					"format": "double",
					"description": "Total Amount",
					"type": "number"
				},
				"RemainingAmount": {
					"format": "double",
					"description": "Remaining Amount",
					"type": "number"
				},
				"DueDate": {
					"format": "date-time",
					"description": "Due Date",
					"type": "string"
				},
				"PaymentType": {
					"description": "Payment Type",
					"type": "string"
				},
				"PaymentCode": {
					"description": "Payment Code",
					"type": "string"
				},
				"PaymentNumber": {
					"description": "Payment Number",
					"type": "string"
				},
				"CreditCardExpireMonth": {
					"description": "Credit Card Expire Month",
					"type": "string"
				},
				"CreditCardExpireYear": {
					"description": "Credit Card Expire Year",
					"type": "string"
				},
				"IsPosted": {
					"description": "Is Posted?",
					"type": "boolean"
				},
				"PromotionCode": {
					"description": "Promotion Code",
					"type": "string"
				},
				"ControlGroupId": {
					"description": "Control Group Id",
					"type": "string"
				},
				"ChargebackAmount": {
					"format": "double",
					"description": "Chargeback Amount",
					"type": "number"
				},
				"CheckNumber": {
					"description": "Check Number",
					"type": "string"
				},
				"CheckStatus": {
					"description": "Check Status",
					"type": "string"
				},
				"IsPrinted": {
					"description": "Is Printed?",
					"type": "boolean"
				},
				"TransactionStatusDescription": {
					"description": "Transaction Status Description",
					"type": "string"
				},
				"BillingCurrency": {
					"description": "Billing Currency",
					"type": "string"
				},
				"InstallmentBillingCode": {
					"description": "Installment Billing Code",
					"type": "string"
				},
				"DebitSequenceNumber": {
					"description": "Debit Sequence Number",
					"type": "string"
				},
				"TransactionNumber": {
					"description": "Transaction Number",
					"type": "string"
				},
				"AppliedToNumber": {
					"description": "Applied-To Number",
					"type": "string"
				},
				"CreditOrDebit": {
					"description": "Credit or Debit",
					"type": "string"
				},
				"DebitPaid": {
					"description": "Is debit fully paid?",
					"type": "boolean"
				}
			}
		},
		"Receivable": {
			"description": "Information about a credit voucher or debit",
			"type": "object",
			"properties": {
				"AppliedAmount": {
					"format": "double",
					"description": "Applied Amount",
					"type": "number"
				},
				"RemainingAmount": {
					"format": "double",
					"description": "Remaining balance",
					"type": "number"
				},
				"TotalAmount": {
					"format": "double",
					"description": "Total amount of transaction",
					"type": "number"
				},
				"TransactionDate": {
					"format": "date-time",
					"description": "Transaction occurred on this date",
					"type": "string"
				},
				"TransactionType": {
					"description": "Credit or Debit",
					"enum": [
						"Credit",
						"Debit"
					],
					"type": "string"
				},
				"DebitNumber": {
					"description": "Debit Number",
					"type": "string"
				},
				"SequenceNumber": {
					"description": "A/R Sequence Number",
					"type": "string"
				},
				"SourceSystem": {
					"description": "Source System",
					"type": "string"
				},
				"BillingCurrency": {
					"description": "Billing Currency",
					"type": "string"
				},
				"LocalCurrency": {
					"description": "Local Currency",
					"type": "string"
				},
				"UnpostedAmount": {
					"format": "double",
					"description": "Unposted Amount",
					"type": "number"
				},
				"IsPosted": {
					"description": "True if receivable is posted, false otherwise",
					"type": "boolean"
				}
			}
		},
		"CustomerEmail": {
			"description": "Information on email addresses for a customer.",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "A Customer Number",
					"type": "string"
				},
				"Email": {
					"description": "An email address",
					"type": "string"
				},
				"EmailId": {
					"description": "An Email Id",
					"type": "string"
				},
				"EmailTargetDevice": {
					"description": "An Email Target Device",
					"type": "string"
				},
				"IsEmailValid": {
					"description": "An Email Valid",
					"type": "boolean"
				},
				"LastUpdatedBy": {
					"description": "A Last Updated By",
					"type": "string"
				},
				"LastUpdatedOn": {
					"format": "date-time",
					"description": "A Last Updated On",
					"type": "string"
				},
				"PromoteByEmail": {
					"description": "A Promote By Email",
					"type": "string"
				},
				"ChangeSource": {
					"description": "A Change Source",
					"type": "string"
				},
				"Demographics": {
					"description": "Customer email demographic values saved on the customer email record (Cdseml-m).",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DemographicValue"
					}
				}
			}
		},
		"CustomerDefaults": {
			"description": "Information for customer defaults settings. These are applied automatically when a customer is created unless they are overridden.",
			"type": "object",
			"properties": {
				"PromoteByPhone": {
					"description": "Is it OK to promote to this customer by phone?",
					"type": "string"
				},
				"PromoteByMail": {
					"description": "Is it OK to promote to this customer by mail?",
					"type": "string"
				},
				"PromoteByEmail": {
					"description": "Is it OK to promote to this customer by email?",
					"type": "string"
				},
				"PromoteBySms": {
					"description": "Is it OK to promote to this customer by text message?",
					"type": "string"
				},
				"PromoteByFax": {
					"description": "Is it OK to promote to this customer by fax?",
					"type": "string"
				},
				"PreferredCommunicationMethodCode": {
					"description": "This customer type's preferred communication method.",
					"type": "string"
				},
				"DefaultAddressCode": {
					"description": "This customer type's default address code.",
					"type": "string"
				},
				"Promote": {
					"description": "Is it OK to promote to this customer?",
					"type": "string"
				}
			}
		},
		"SearchResult[CustomerAddress]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomerAddress"
					}
				}
			}
		},
		"AccountBalance": {
			"description": "The customer account balance",
			"type": "object",
			"properties": {
				"CurrencyCode": {
					"description": "The currency",
					"type": "string"
				},
				"Amount": {
					"format": "double",
					"description": "The amount due in the given currency",
					"type": "number"
				}
			}
		},
		"SearchResult[User]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/User"
					}
				}
			}
		},
		"UnappliedCreditComparison": {
			"description": "A filter to apply to an unapplied credit search",
			"type": "object",
			"properties": {
				"Field": {
					"description": "Name of field in table to compare",
					"enum": [
						"CreditReasonCode",
						"BillingOrganizationCode"
					],
					"type": "string"
				},
				"Operator": {
					"description": "Operator to use in comparison",
					"enum": [
						"Equal",
						"NotEqual",
						"Less",
						"LessOrEqual",
						"Greater",
						"GreaterOrEqual",
						"IsNull",
						"IsNotNull",
						"Like",
						"NotLike",
						"Contains",
						"NotContains",
						"StartsWith",
						"NotStartsWith",
						"EndsWith",
						"NotEndsWith",
						"In",
						"Between"
					],
					"type": "string"
				},
				"Value": {
					"description": "Value to compare the field name to",
					"type": "string"
				}
			}
		},
		"UnappliedCredit": {
			"description": "Information about a customer's unapplied credit.",
			"type": "object",
			"properties": {
				"VoucherNumber": {
					"description": "The Credit Voucher Number is a unique identification number assigned to the credit by the system.",
					"type": "string"
				},
				"CreditDocumentNumber": {
					"description": "he Credit Document Number is the check number or other customer-provided ID number.",
					"type": "string"
				},
				"Amount": {
					"format": "double",
					"description": "Amount of credit",
					"type": "number"
				},
				"Balance": {
					"format": "double",
					"description": "Unapplied credit balance",
					"type": "number"
				},
				"CurrencyCode": {
					"description": "Payment currency",
					"type": "string"
				},
				"PostingFlag": {
					"description": "Posted/unposted flag",
					"type": "string"
				},
				"PaymentType": {
					"description": "Payment type",
					"enum": [
						"Invalid",
						"CreditCard",
						"DirectDebit",
						"BillMe",
						"AvailableCredit",
						"Check",
						"BillPaymentService",
						"GiftCertificate",
						"MiscellaneousCredit",
						"WriteOff",
						"DigitalWallet"
					],
					"type": "string"
				},
				"PaymentMethodCode": {
					"description": "Payment code",
					"type": "string"
				},
				"PaymentDate": {
					"format": "date-time",
					"description": "Payment date",
					"type": "string"
				},
				"ControlGroupDate": {
					"format": "date-time",
					"description": "Control group date",
					"type": "string"
				},
				"ControlGroupId": {
					"description": "Control group ID",
					"type": "string"
				},
				"CreditReasonCode": {
					"description": "Credit Reason Code",
					"type": "string"
				}
			}
		},
		"PurchaseHistoryComparison": {
			"description": "Data transfer object for product search expressions",
			"type": "object",
			"properties": {
				"Field": {
					"description": "Name of field in table to compare",
					"enum": [
						"ItemNumber",
						"ProductFormatCode",
						"BillingOrganizationCode",
						"OrderDate",
						"BillToCustomer",
						"ShipToCustomer"
					],
					"type": "string"
				},
				"Operator": {
					"description": "Operator to use in comparison",
					"enum": [
						"Equal",
						"NotEqual",
						"Less",
						"LessOrEqual",
						"Greater",
						"GreaterOrEqual",
						"IsNull",
						"IsNotNull",
						"Like",
						"NotLike",
						"Contains",
						"NotContains",
						"StartsWith",
						"NotStartsWith",
						"EndsWith",
						"NotEndsWith",
						"In",
						"Between"
					],
					"type": "string"
				},
				"Value": {
					"description": "Value to compare the field to; specify comma separated values if the operator is \"In\"",
					"type": "string"
				}
			}
		},
		"SearchResult[PurchaseHistoryItem]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PurchaseHistoryItem"
					}
				}
			}
		},
		"PurchaseHistoryItem": {
			"description": "Information for an item purchased by a customer.",
			"type": "object",
			"properties": {
				"OrderNumber": {
					"description": "The order number of the purchase.",
					"type": "string"
				},
				"CustomerNumber": {
					"description": "The customer number of the purchase, determined based on an Advantage system option.",
					"type": "string"
				},
				"IsCustomerBillTo": {
					"description": "Is the customer the bill to for the order?",
					"type": "boolean"
				},
				"SequenceNumber": {
					"format": "int32",
					"description": "Order line number.",
					"type": "integer"
				},
				"DateOrdered": {
					"format": "date-time",
					"description": "The date of the order.",
					"type": "string"
				},
				"ItemNumber": {
					"description": "The product ordered.",
					"type": "string"
				},
				"Operation": {
					"description": "The operation of the order line.",
					"enum": [
						"Other",
						"New",
						"Renewal",
						"Complimentary",
						"Conference"
					],
					"type": "string"
				},
				"QuantityShipped": {
					"format": "int32",
					"description": "Quantity shipped.",
					"type": "integer"
				},
				"NetAmount": {
					"format": "double",
					"description": "Amount ordered.",
					"type": "number"
				},
				"TaxAmount": {
					"format": "double",
					"description": "Tax amount.",
					"type": "number"
				},
				"BillingCurrencyCode": {
					"description": "Billing currency.",
					"type": "string"
				}
			}
		},
		"SavedCreditCardFilter": {
			"description": "A set of fields that can filter out saved credit cards based on inputs from a soon-to-be order, or an order.",
			"type": "object",
			"properties": {
				"PromotionCode": {
					"description": "Promotion Code",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "Currency Code",
					"type": "string"
				},
				"BillingOrganizationCode": {
					"description": "Billing Organization",
					"type": "string"
				},
				"WebEnabledOnly": {
					"description": "True to limit credit cards to those that are setup to be \"web enabled\"",
					"type": "boolean"
				}
			}
		},
		"SavedPaymentFilter": {
			"description": "Filter criteria for callbacks search",
			"type": "object",
			"properties": {
				"BillingOrganization": {
					"description": "The Billing Organization of the saved payment to filter results by",
					"type": "string"
				},
				"BillingCurrency": {
					"description": "The Billing Currency of the saved payment to filter results by",
					"type": "string"
				},
				"PromotionCode": {
					"description": "The billing Promotion Code of the saved payment to filter results by",
					"type": "string"
				},
				"CallListId": {
					"description": "The Call List Id used to get an alternative billing organization",
					"type": "string"
				},
				"CallListDate": {
					"format": "date-time",
					"description": "The Call List Date used to get an alternative billing organization",
					"type": "string"
				}
			}
		},
		"SearchResult[SavedPayment]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/SavedPayment"
					}
				}
			}
		},
		"SavedPayment": {
			"description": "Data describing either a saved credit card or saved bank account",
			"type": "object",
			"properties": {
				"BankAccount": {
					"$ref": "#/definitions/SavedBankAccount",
					"description": "Bank account information"
				},
				"CreditCard": {
					"$ref": "#/definitions/SavedCreditCard",
					"description": "Credit card information"
				}
			}
		},
		"CustomerRelationship": {
			"description": "Information for a customer relationship.",
			"type": "object",
			"properties": {
				"FromCustomerNumber": {
					"description": "The Advantage customer number of the \"Related-From\" customer.",
					"type": "string"
				},
				"RelationshipTypeCode": {
					"description": "The customer relationship type describes the relationship between two customers.",
					"type": "string"
				},
				"ToCustomerNumber": {
					"description": "The Advantage customer number of the \"Related-To\" customer.",
					"type": "string"
				},
				"IsAddressLinked": {
					"description": "Specifies if the relationship is linked for automatic address changes.",
					"type": "boolean"
				}
			}
		},
		"CustomerRelationshipCreateRequest": {
			"description": "Information needed to request the creation of a customer relationship.",
			"type": "object",
			"properties": {
				"RelationshipTypeCode": {
					"description": "The customer relationship type describes the relationship between two customers.",
					"type": "string"
				},
				"ToCustomerNumber": {
					"description": "The Advantage customer number of the \"Related-To\" customer.",
					"type": "string"
				}
			}
		},
		"SearchResult[PendingPremium]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PendingPremium"
					}
				}
			}
		},
		"PendingPremium": {
			"description": "The PendingPremium class provides information about premiums and\r\npremium sets that have not yet been filled.",
			"type": "object",
			"properties": {
				"EarnedAt": {
					"description": "When is the premium earned",
					"enum": [
						"FirstDays",
						"FirstResponses",
						"Payment",
						"PremiumHold",
						"Response",
						"Returned"
					],
					"type": "string"
				},
				"ItemNumber": {
					"description": "Premium item code",
					"type": "string"
				},
				"ItemName": {
					"description": "Premium item name",
					"type": "string"
				},
				"OrderNumber": {
					"description": "Order number that premium was generated for",
					"type": "string"
				},
				"Quantity": {
					"format": "int32",
					"description": "Quantity for premium",
					"type": "integer"
				},
				"SequenceNumber": {
					"format": "int32",
					"description": "Sequence number",
					"type": "integer"
				},
				"ShipToCustomerNumber": {
					"description": "Customer to ship-to customer number",
					"type": "string"
				},
				"TransactionDate": {
					"format": "date-time",
					"description": "Transaction date",
					"type": "string"
				}
			}
		},
		"Field": {
			"description": "Information about a field in the Advantage Data Dictionary",
			"type": "object",
			"properties": {
				"Caption": {
					"description": "Prompt",
					"type": "string"
				},
				"FieldWidth": {
					"format": "int32",
					"description": "Maximum width in characters",
					"type": "integer"
				},
				"DisplayWidth": {
					"format": "int32",
					"description": "Display width in characters",
					"type": "integer"
				},
				"DecimalPlaces": {
					"format": "int32",
					"description": "Number of decimal places",
					"type": "integer"
				},
				"FieldType": {
					"description": "The Field Type (ALN, NUM...)",
					"enum": [
						"None",
						"ALN",
						"CAM",
						"CID",
						"CUR",
						"CTL",
						"DAT",
						"NUM",
						"OVP",
						"NST",
						"RTE",
						"TXT",
						"UTC"
					],
					"type": "string"
				},
				"Filter": {
					"description": "The Filter Code (UP, YN...)",
					"enum": [
						"None",
						"Upcase",
						"U9",
						"Translatable",
						"YesOrNo",
						"Identifier"
					],
					"type": "string"
				},
				"SystemValues": {
					"description": "A set of valid system values for this field",
					"type": "array",
					"items": {
						"$ref": "#/definitions/SystemValue"
					}
				}
			}
		},
		"SystemValue": {
			"description": "An Advantage valid value the Advantage System Keyword table.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The code for the valid value.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the valid value.",
					"type": "string"
				},
				"UserField1": {
					"description": "The first user defined field. (Optional)",
					"type": "string"
				},
				"UserField2": {
					"description": "The second user defined field. (Optional)",
					"type": "string"
				},
				"UserField3": {
					"description": "The third user defined field. (Optional)",
					"type": "string"
				}
			}
		},
		"ValueListFilter": {
			"description": "Information about a value list",
			"type": "object",
			"properties": {
				"FieldName": {
					"description": "Name of the field being used to filter the value list",
					"type": "string"
				},
				"Value": {
					"description": "Value of the field being used to filter the value list",
					"type": "string"
				}
			}
		},
		"DistributionRunUpdateRequest": {
			"description": "The distribution run update request allows you to update a distribution run.",
			"type": "object",
			"properties": {
				"StatusCode": {
					"description": "Status code for the distribution run",
					"type": "string"
				}
			}
		},
		"SearchResult[EmailListRegistration]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/EmailListRegistration"
					}
				}
			}
		},
		"EmailListRegistration": {
			"description": "An item on an email list. This identifies a customer and an email for that customer. \r\nIn Advantage, an email list will store a collection of these objects.",
			"type": "object",
			"properties": {
				"ListCode": {
					"description": "The list code of the list to which this object belongs.",
					"type": "string"
				},
				"Email": {
					"description": "An email address.",
					"type": "string"
				},
				"CustomerNumber": {
					"description": "The Advantage customer number.",
					"type": "string"
				},
				"StatusCode": {
					"description": "The status code of the of this item on the email list.",
					"type": "string"
				}
			}
		},
		"EmailList": {
			"description": "Email lists hold a list of customers and their emails. This is usually used to promote \r\nto a group of customers or deliver content.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The email list code. This identifies an email list in Advantage. An email list\r\nholds list email objects each of which identify a customer and an email.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the  email list.",
					"type": "string"
				},
				"Narrative": {
					"description": "The narrative of the email List. This is usually what the end user sees. (Usually on the web.)",
					"type": "string"
				},
				"IsWebEnabled": {
					"description": "Is the email list enabled for web use?",
					"type": "boolean"
				}
			}
		},
		"SearchResult[EmailList]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/EmailList"
					}
				}
			}
		},
		"EmailListUpdateRequest": {
			"description": "Information to update on an email list.",
			"type": "object",
			"properties": {
				"Description": {
					"description": "Description of the email list",
					"type": "string"
				}
			}
		},
		"EmailListRegistrationReplacementRequest": {
			"description": "An update request for list participation for a given customer.",
			"type": "object",
			"properties": {
				"CompleteInclusiveParticipation": {
					"description": "A complete inclusive list of this customer's desired participation across all lists. \r\n(A collection of ListEmail objects.)",
					"type": "array",
					"items": {
						"$ref": "#/definitions/EmailListRegistration"
					}
				}
			}
		},
		"GiftCertificate": {
			"description": "Information about a gift certificate",
			"type": "object",
			"properties": {
				"CertificateNumber": {
					"description": "Certificate Number",
					"type": "string"
				},
				"ExpirationDate": {
					"format": "date-time",
					"description": "Expiration Date, or null if no expiration",
					"type": "string"
				},
				"ProgramCode": {
					"description": "Gift Certificate Program",
					"type": "string"
				},
				"RedemptionValue": {
					"format": "double",
					"description": "Certificate redemption value",
					"type": "number"
				},
				"RemainingAmount": {
					"format": "double",
					"description": "Certificate remaining amount",
					"type": "number"
				},
				"StatusCode": {
					"description": "Gift Cert Status",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "Billing Currency",
					"type": "string"
				},
				"ProgramName": {
					"description": "Gift certificate program name",
					"type": "string"
				}
			}
		},
		"OrderInvoice": {
			"description": "An invoice for a customer transaction",
			"type": "object",
			"properties": {
				"DebitNumber": {
					"description": "Debit number",
					"type": "string"
				},
				"BillTo": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "Customer number"
				},
				"DueDate": {
					"format": "date-time",
					"description": "Due Date",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "Currency",
					"type": "string"
				},
				"InvoiceAmount": {
					"format": "double",
					"description": "Invoice amount",
					"type": "number"
				},
				"AmountDue": {
					"format": "double",
					"description": "Total amount remaining to be paid",
					"type": "number"
				},
				"AmountPaid": {
					"format": "double",
					"description": "Amount paid",
					"type": "number"
				},
				"DiscountAmount": {
					"format": "double",
					"description": "Total of discounts applied",
					"type": "number"
				},
				"EarlyPaymentDiscountAvailable": {
					"format": "double",
					"description": "Available early payment discount on invoice",
					"type": "number"
				},
				"EarlyPaymentDiscountDate": {
					"format": "date-time",
					"description": "Date after which early payment discount expires",
					"type": "string"
				},
				"Installments": {
					"description": "Invoice installment details, for installment billed invoices.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderInvoiceInstallment"
					}
				}
			}
		},
		"OrderInvoiceInstallment": {
			"description": "An installment for an installment-billed invoice",
			"type": "object",
			"properties": {
				"AmountDue": {
					"format": "double",
					"description": "Total amount remaining",
					"type": "number"
				},
				"AmountPaid": {
					"format": "double",
					"description": "Amount paid",
					"type": "number"
				},
				"DueDate": {
					"format": "date-time",
					"description": "Installment due date",
					"type": "string"
				},
				"InstallmentAmount": {
					"format": "double",
					"description": "The installment amount",
					"type": "number"
				}
			}
		},
		"OrderAvailableCreditPaymentRequest": {
			"description": "Information for making a payment using a customer's available credit.",
			"type": "object",
			"properties": {
				"Amount": {
					"format": "double",
					"description": "The amount of credit to apply.",
					"type": "number"
				}
			}
		},
		"PaymentResponse": {
			"description": "The response object received when adding a payment to an open invoice.",
			"type": "object",
			"properties": {
				"AmountApplied": {
					"format": "double",
					"description": "The payment amount applied to the debit",
					"type": "number"
				}
			}
		},
		"OrderSavedCreditCardPaymentRequest": {
			"description": "Information about a payment made toward an order from a credit card payment method.",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "The Advantage customer number of the customer providing the payment.",
					"type": "string"
				},
				"ElectronicPaymentId": {
					"description": "The electronic payment ID identifying the payment method.",
					"type": "string"
				},
				"SecurityCode": {
					"description": "The security code of the credit card payment method.",
					"type": "string"
				},
				"Amount": {
					"format": "double",
					"description": "The amount to pay on the order",
					"type": "number"
				},
				"PromotionCode": {
					"description": "The promotion code",
					"type": "string"
				}
			}
		},
		"OrderCreditCardPaymentRequest": {
			"description": "Information about a payment made toward an order from a credit card payment method.",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "The Advantage customer number of the customer providing the payment.",
					"type": "string"
				},
				"PaymentMethodCode": {
					"description": "The credit card type (e.g., VISA)",
					"type": "string"
				},
				"CardVaultToken": {
					"description": "The Card Vault token (for tokens, the card mask must also be supplied).",
					"type": "string"
				},
				"Token": {
					"description": "The card token (for tokens, the card mask must also be supplied).",
					"type": "string"
				},
				"CardNumberOrMask": {
					"description": "The card number, or mask, if supplying token.",
					"type": "string"
				},
				"ExpireMonth": {
					"format": "int32",
					"description": "The card expiration month (MM)",
					"type": "integer"
				},
				"ExpireYear": {
					"format": "int32",
					"description": "The card expiration year (CCYY)",
					"type": "integer"
				},
				"Amount": {
					"format": "double",
					"description": "The amount to pay on the order",
					"type": "number"
				}
			}
		},
		"OrderCreditMemoPaymentRequest": {
			"description": "Information about a payment made toward an order from a credit memo method.",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "The Advantage customer number of the customer providing the payment.",
					"type": "string"
				},
				"PaymentMethodCode": {
					"description": "Miscellaneous Credit Code. Also maps to a distribution account.",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "Currency Code associated with payment amount (ex, USD, GBP, EUR)",
					"type": "string"
				},
				"Amount": {
					"format": "double",
					"description": "The amount to pay on the order",
					"type": "number"
				},
				"CreditComment": {
					"description": "Comments on the credit",
					"type": "string"
				},
				"DistributionAccount": {
					"description": "Distribution account.",
					"type": "string"
				},
				"CreditReasonCode": {
					"description": "Credit Reason Code",
					"type": "string"
				},
				"PromotionCode": {
					"description": "Promotion Code",
					"type": "string"
				},
				"ControlGroupDate": {
					"format": "date-time",
					"description": "The control group date",
					"type": "string"
				},
				"ControlGroupId": {
					"description": "Control Group ID",
					"type": "string"
				}
			}
		},
		"OrderSavedDirectDebitPaymentRequest": {
			"description": "Information about a payment to be made toward an order from a direct debit payment method.",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "The Advantage customer number of the customer providing the payment.",
					"type": "string"
				},
				"ElectronicPaymentId": {
					"description": "The electronic payment ID identifying the direct debit payment method.",
					"type": "string"
				},
				"Amount": {
					"format": "double",
					"description": "The amount to pay on the order.",
					"type": "number"
				},
				"BillingOrganization": {
					"description": "Billing organization.",
					"type": "string"
				},
				"EntryOrganization": {
					"description": "Entry organization.",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "Billing currency code.",
					"type": "string"
				},
				"DirectDebitDetails": {
					"$ref": "#/definitions/DirectDebitDetails",
					"description": "Direct Debit details"
				}
			}
		},
		"DirectDebitDetails": {
			"description": "Contains fields that may be required by ARPDDP prompts for Branch name/address, origin and consent date",
			"type": "object",
			"properties": {
				"BranchName": {
					"description": "The name of this bank branch",
					"type": "string"
				},
				"BranchStreet": {
					"description": "Street address of this bank",
					"type": "string"
				},
				"BranchStreet2": {
					"description": "Second line street address for bank",
					"type": "string"
				},
				"BranchStreet3": {
					"description": "Third line of street address for bank",
					"type": "string"
				},
				"BranchCity": {
					"description": "City in which this bank branch is located",
					"type": "string"
				},
				"BranchState": {
					"description": "State in which this bank branch is located",
					"type": "string"
				},
				"BranchCountry": {
					"description": "Country in which this bank branch is located",
					"type": "string"
				},
				"BranchPostalCode": {
					"description": "The postal (zip) code of this bank branch",
					"type": "string"
				},
				"Origin": {
					"description": "Bank Account Origin",
					"type": "string"
				},
				"ConsentDate": {
					"format": "date-time",
					"description": "The account consent date",
					"type": "string"
				},
				"PersonalId": {
					"description": "Personal ID number associated with direct debit account",
					"type": "string"
				},
				"CollectionDate": {
					"format": "date-time",
					"description": "The account collection date",
					"type": "string"
				}
			}
		},
		"CheckPaymentRequest": {
			"description": "Information about a payment made toward an order from a check.",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "The Advantage customer number of the customer providing the payment.",
					"type": "string"
				},
				"CheckNumber": {
					"description": "The check number",
					"type": "string"
				},
				"Amount": {
					"format": "double",
					"description": "The amount to pay on the order",
					"type": "number"
				},
				"OkToRefund": {
					"description": "Ok to refund",
					"type": "boolean"
				},
				"UnappliedCreditReason": {
					"description": "The unapplied credit reason. when applying a check bigger then amount owed",
					"type": "string"
				},
				"PromotionCode": {
					"description": "The promotion code",
					"type": "string"
				},
				"ControlGroupDate": {
					"format": "date-time",
					"description": "The control group date",
					"type": "string"
				},
				"ControlGroupId": {
					"description": "The control group id",
					"type": "string"
				},
				"CheckCode": {
					"description": "The check code, defaults to \"CHECK\"",
					"type": "string"
				},
				"PaymentDescription": {
					"description": "The payment description",
					"type": "string"
				}
			}
		},
		"DigitalWalletPaymentRequest": {
			"description": "Information for a digital wallet payment",
			"type": "object",
			"properties": {
				"Amount": {
					"format": "double",
					"description": "Amount",
					"type": "number"
				},
				"DigitalWallet": {
					"$ref": "#/definitions/DigitalWalletCreateRequest",
					"description": "Information for creating a digital wallet"
				}
			}
		},
		"DigitalWalletCreateRequest": {
			"description": "Information for creating a digital wallet",
			"type": "object",
			"properties": {
				"BillingAgreementId": {
					"description": "Billing Agreement ID",
					"type": "string"
				},
				"CreditReserveRuleId": {
					"description": "Credit Reserve Rule ID",
					"type": "string"
				},
				"PaymentCode": {
					"description": "Digital wallet payment code",
					"type": "string"
				},
				"PaymentDate": {
					"format": "date-time",
					"description": "Payment date",
					"type": "string"
				},
				"TransactionId": {
					"description": "Transaction ID",
					"type": "string"
				},
				"TransactionStatus": {
					"description": "Transaction Status",
					"enum": [
						"Authorized",
						"Settled"
					],
					"type": "string"
				}
			}
		},
		"InvoiceComparison": {
			"description": "Data transfer object for order invoice search expressions",
			"type": "object",
			"properties": {
				"Field": {
					"description": "Name of field in table to compare",
					"enum": [
						"OrderNumber",
						"OrderTotal",
						"AmountPaid",
						"DebitFullyPaidFlag",
						"DueDate",
						"CurrencyCode",
						"CustomerNumber",
						"BillingOrganizationCode"
					],
					"type": "string"
				},
				"Operator": {
					"description": "Operator to use in comparison",
					"enum": [
						"Equal",
						"NotEqual",
						"Less",
						"LessOrEqual",
						"Greater",
						"GreaterOrEqual",
						"IsNull",
						"IsNotNull",
						"Like",
						"NotLike",
						"Contains",
						"NotContains",
						"StartsWith",
						"NotStartsWith",
						"EndsWith",
						"NotEndsWith",
						"In",
						"Between"
					],
					"type": "string"
				},
				"Value": {
					"description": "Value to compare the field to; specify comma separated values if the operator is \"In\"",
					"type": "string"
				}
			}
		},
		"SearchResult[OrderInvoice]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderInvoice"
					}
				}
			}
		},
		"SearchResult[CustomValue]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomValue"
					}
				}
			}
		},
		"SearchResult[SystemValue]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/SystemValue"
					}
				}
			}
		},
		"AddressCode": {
			"description": "An address code is used to describe a type of Address in Advantage.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The address code.",
					"type": "string"
				},
				"Name": {
					"description": "A name of the address code.",
					"type": "string"
				}
			}
		},
		"Organization": {
			"description": "All orders, subscriptions, and accounts receivables in Advantage are tied to a particular\r\norganization.  Organizations are sometimes referred to as offices in Advantage.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The unique code identifying an organization.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the organization.",
					"type": "string"
				},
				"IsActive": {
					"description": "Whether or not the organization is active.",
					"type": "boolean"
				}
			}
		},
		"SearchResult[RenewalPolicy]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/RenewalPolicy"
					}
				}
			}
		},
		"CustomerTitle": {
			"description": "Advantage customer title. The customer title is typically displayed as a prefix for a \r\ncustomer name, e.g. \"DR\" or \"MS.\"",
			"type": "object",
			"properties": {
				"Title": {
					"description": "The customer title.",
					"type": "string"
				},
				"CustomerType": {
					"description": "The default customer type for this customer title.",
					"type": "string"
				}
			}
		},
		"Currency": {
			"description": "Advantage supports order entry and reporting in multiple currencies.  The Currency entity describes one of\r\nthe currencies supported by the Advantage application.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The Advantage currency code.",
					"type": "string"
				},
				"IsoCurrencyCode": {
					"description": "The ISO 3 character currency code.",
					"type": "string"
				},
				"Name": {
					"description": "The full currency name.",
					"type": "string"
				},
				"Precision": {
					"format": "int32",
					"description": "The decimal precision of the currency.",
					"type": "integer"
				},
				"SymbolPosition": {
					"description": "The symbol position when displaying currency amounts.\r\n(L - left, R - right, C - center)",
					"type": "string"
				},
				"Symbol": {
					"description": "The currency symbol to use when displaying currency amounts.",
					"type": "string"
				},
				"Punctuation": {
					"description": "Is the currency generally displayed using (1) American style with a period for the decimal separator\r\n(e.g. 1,000,000.00) or (2) European style with a comma for the decimal separator (e.g. 1.000.000,00)?",
					"type": "string"
				}
			}
		},
		"SubscriptionType": {
			"description": "Information about subscription types.",
			"type": "object",
			"properties": {
				"SubscriptionTypeCode": {
					"description": "Subscription type code.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the subscription type.",
					"type": "string"
				}
			}
		},
		"SearchResult[InstallmentBillingPlan]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/InstallmentBillingPlan"
					}
				}
			}
		},
		"SearchResult[IssueGroup]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/IssueGroup"
					}
				}
			}
		},
		"IssueGroup": {
			"description": "An issue group is a logical subset of overall issue table for a specific publication.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "Issue group code.",
					"type": "string"
				},
				"PublicationCode": {
					"description": "The publication code of the issue group.",
					"type": "string"
				},
				"Name": {
					"description": "The issue group description.",
					"type": "string"
				}
			}
		},
		"SearchResult[CreditPolicy]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CreditPolicy"
					}
				}
			}
		},
		"CreditPolicy": {
			"description": "Information about credit policies.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The credit policy code.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the credit policy.",
					"type": "string"
				}
			}
		},
		"SearchResult[AgreementAutoRenewalChain]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AgreementAutoRenewalChain"
					}
				}
			}
		},
		"AgreementAutoRenewalChain": {
			"description": "Information about an access auto-renewal chain.",
			"type": "object",
			"properties": {
				"RenewChainId": {
					"description": "Access auto-renewal chain ID.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the access auto-renewal chain.",
					"type": "string"
				}
			}
		},
		"SearchResult[CustomerServiceReasons]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CustomerServiceReasons"
					}
				}
			}
		},
		"CustomerServiceReasons": {
			"description": "A reason for the adjustment (suspension or cancellation) of a subscription.",
			"type": "object",
			"properties": {
				"ServiceReasonCode": {
					"description": "The reason code for the adjustment.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the Reason.",
					"type": "string"
				},
				"ModuleCode": {
					"description": "The module code of the Advantage module this reason belongs to.",
					"type": "string"
				},
				"OperationCode": {
					"description": "The operation code of the operation this reason is a part of.",
					"type": "string"
				}
			}
		},
		"SearchResult[ResponseType]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ResponseType"
					}
				}
			}
		},
		"ResponseType": {
			"description": "An Advantage Response Type (or Order Source) from the CDSRST-T table",
			"type": "object",
			"properties": {
				"Code": {
					"description": "Response type code (also known as Order Source Code)",
					"type": "string"
				},
				"Name": {
					"description": "The response type name.",
					"type": "string"
				},
				"IsOnPhone": {
					"description": "Is this response type used for orders taken over the phone?",
					"type": "boolean"
				},
				"IsFromWeb": {
					"description": "Is this response type used for orders taken over the web?",
					"type": "boolean"
				},
				"AreFtcNoticesSent": {
					"description": "Send FTC Notices",
					"type": "boolean"
				},
				"IsCheckPaymentAllowed": {
					"description": "Are check payments allowed by this response type?",
					"type": "boolean"
				},
				"IsCreditCardPaymentAllowed": {
					"description": "Are credit card payments allowed by this response type?",
					"type": "boolean"
				},
				"IsDirectDebitPaymentAllowed": {
					"description": "Are direct debit payments allowed by this response type?",
					"type": "boolean"
				},
				"IsAccountCreditPaymentAllowed": {
					"description": "Are account credit payments allowed by this response type?",
					"type": "boolean"
				},
				"IsMiscellaneousCreditPaymentAllowed": {
					"description": "Are miscellaneous credit payments allowed by this response type?",
					"type": "boolean"
				},
				"IsGiftCertificatePaymentAllowed": {
					"description": "Are gift certificate payments allowed by this response type?",
					"type": "boolean"
				},
				"IsActive": {
					"description": "Status",
					"type": "boolean"
				},
				"PromptForCardSecurityCode": {
					"description": "Prompt for CSC Code",
					"type": "boolean"
				}
			}
		},
		"DemographicPartition": {
			"description": "A demographic partition is a block of text stored on an Advantage record, e.g. a customer or subscription order line.\r\ncan be configured at the CDSDEM view.",
			"type": "object",
			"properties": {
				"Fields": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/DemographicField"
					}
				},
				"Name": {
					"description": "The demographic partition name.",
					"type": "string"
				},
				"Width": {
					"format": "int32",
					"description": "The width of the demographic partition.  The sum of the field widths must be less than or equal to the partition length.",
					"type": "integer"
				}
			}
		},
		"DemographicField": {
			"description": "A demographic field can be used to store custom data on an Advantage entity.",
			"type": "object",
			"properties": {
				"Name": {
					"description": "The demographic field name (e.g. CUS-DMO1)",
					"type": "string"
				},
				"Width": {
					"format": "int32",
					"description": "The width (in characters) of the demographic field",
					"type": "integer"
				},
				"Offset": {
					"format": "int32",
					"description": "The (zero-based) offset of the demographic field within the partition",
					"type": "integer"
				}
			}
		},
		"AdvantageUser": {
			"description": "Model for Web User (Advantage Users)",
			"type": "object",
			"properties": {
				"InactivityTimeout": {
					"format": "int32",
					"type": "integer"
				},
				"Code": {
					"description": "Value of User Code",
					"type": "string"
				},
				"Name": {
					"description": "Value of User's Full Name",
					"type": "string"
				},
				"CompanyCode": {
					"description": "Value of Company Number",
					"type": "string"
				},
				"EmailAddress": {
					"description": "Value of Email Address",
					"type": "string"
				},
				"LastUpdatedBy": {
					"description": "Value of Last Updated By",
					"type": "string"
				},
				"LastUpdated": {
					"format": "date-time",
					"description": "Value of Last Updated On",
					"type": "string"
				},
				"MembershipOrganizationCode": {
					"description": "Value of Membership Org",
					"type": "string"
				},
				"SecurityGroupCode": {
					"description": "Value of Security Group",
					"type": "string"
				},
				"LanguageCode": {
					"description": "Value of UI Language",
					"type": "string"
				},
				"UserLocationCode": {
					"description": "Value of User Location",
					"type": "string"
				},
				"UserTypeCode": {
					"description": "Value of User Type",
					"type": "string"
				},
				"SalesRepCode": {
					"description": "The sales rep code associated with this user",
					"type": "string"
				},
				"IsSalesManager": {
					"description": "Are there other sales reps that report to this user?",
					"type": "boolean"
				},
				"Preferences": {
					"$ref": "#/definitions/AdvantageUserPreferences",
					"description": "User Preferences"
				}
			}
		},
		"AdvantageUserPreferences": {
			"description": "Model for Preferences for Advantage User",
			"type": "object",
			"properties": {
				"UiDateFormat": {
					"description": "Value of Date Option",
					"enum": [
						"American",
						"European",
						"Military",
						"Default"
					],
					"type": "string"
				},
				"PrinterCode": {
					"description": "Value of Printer Code",
					"type": "string"
				},
				"PrinterFormCode": {
					"description": "Value of Printer Form",
					"type": "string"
				},
				"UITimeFormat": {
					"description": "Value of Time Format",
					"enum": [
						"TwelveHourClock",
						"TwentyFourHourClock"
					],
					"type": "string"
				}
			}
		},
		"AdvantageUserComparison": {
			"description": "A filter to apply to a call search",
			"type": "object",
			"properties": {
				"Field": {
					"description": "Name of field in table to compare",
					"enum": [
						"UserCode"
					],
					"type": "string"
				},
				"Operator": {
					"description": "Operator to use in comparison",
					"enum": [
						"Equal",
						"NotEqual",
						"Less",
						"LessOrEqual",
						"Greater",
						"GreaterOrEqual",
						"IsNull",
						"IsNotNull",
						"Like",
						"NotLike",
						"Contains",
						"NotContains",
						"StartsWith",
						"NotStartsWith",
						"EndsWith",
						"NotEndsWith",
						"In",
						"Between"
					],
					"type": "string"
				},
				"Value": {
					"description": "Value to compare the field name to",
					"type": "string"
				}
			}
		},
		"SearchResult[AdvantageUser]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AdvantageUser"
					}
				}
			}
		},
		"Note": {
			"description": "An Advantage note",
			"type": "object",
			"properties": {
				"NoteId": {
					"description": "The note id",
					"type": "string"
				},
				"ContactDate": {
					"format": "date-time",
					"description": "The date the note was created",
					"type": "string"
				},
				"Subject": {
					"description": "The note subject",
					"type": "string"
				},
				"Status": {
					"description": "The note status",
					"enum": [
						"Open",
						"Closed"
					],
					"type": "string"
				},
				"NoteText": {
					"description": "The text of the note",
					"type": "string"
				},
				"ResolvedDate": {
					"format": "date-time",
					"description": "The date on which the note was resolved",
					"type": "string"
				},
				"SystemName": {
					"description": "The name of the system that created the note",
					"type": "string"
				},
				"NoteLetters": {
					"description": "The letter associated with the note",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Letter"
					}
				},
				"Documents": {
					"description": "The documents associated with the note",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Document"
					}
				},
				"RegardingProduct": {
					"description": "The name of the product this note is regarding",
					"type": "string"
				},
				"ReasonCode": {
					"description": "The reason code associated with the note",
					"type": "string"
				},
				"ReasonCategory": {
					"description": "The reason category associated with the note",
					"type": "string"
				},
				"ReasonCategoryDescription": {
					"description": "The reason category description associated with the note",
					"type": "string"
				},
				"ActionCode": {
					"description": "The action code associated with the note",
					"type": "string"
				},
				"CompletionDate": {
					"format": "date-time",
					"description": "The date on which the action was completed",
					"type": "string"
				},
				"AddedBy": {
					"description": "The user who added the note",
					"type": "string"
				},
				"UpsellPath": {
					"description": "The Upsell Path for the note",
					"type": "string"
				},
				"FollowUpUser": {
					"description": "The user who followed up on the note",
					"type": "string"
				}
			}
		},
		"Letter": {
			"description": "An Advantage letter",
			"type": "object",
			"properties": {
				"LetterCode": {
					"description": "The letter code, identifying this letter.",
					"type": "string"
				},
				"EmailAddress": {
					"description": "The email address to which the letter was sent.",
					"type": "string"
				},
				"EmailSubject": {
					"description": "The subject used for the email when the letter was sent.",
					"type": "string"
				},
				"HtmlText": {
					"description": "The text of the letter in HTML format.",
					"type": "string"
				}
			}
		},
		"Document": {
			"description": "An Advantage Document",
			"type": "object",
			"properties": {
				"DocketNumber": {
					"description": "The docket number identifying this document",
					"type": "string"
				},
				"FilePath": {
					"description": "The path of this document, which includes the filename",
					"type": "string"
				}
			}
		},
		"NoteCreateRequest": {
			"description": "",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "The customer number",
					"type": "string"
				},
				"SystemName": {
					"description": "The name of the system creating the note",
					"type": "string"
				},
				"NoteText": {
					"description": "The text of the note",
					"type": "string"
				},
				"ReasonCategory": {
					"description": "The reason category for the note",
					"type": "string"
				},
				"ReasonCode": {
					"description": "The reason code for the note",
					"type": "string"
				},
				"Subject": {
					"description": "The subject of the note",
					"type": "string"
				},
				"FolderAssignmentSelectSet": {
					"description": "The folder assignment select set of the note",
					"type": "string"
				}
			}
		},
		"OrderGetSettings": {
			"description": "Settings that determine what is included in an Order object returned from a method call.",
			"type": "object",
			"properties": {
				"DisplayAmount": {
					"description": "What type of amount to display for the order.",
					"enum": [
						"ShowNetAmount",
						"ShowOrderedAmount",
						"ShowShippedAmount"
					],
					"type": "string"
				},
				"IncludeDetails": {
					"description": "Include order lines in the response?  The default is true.",
					"type": "boolean"
				},
				"IncludePackageComponents": {
					"description": "Include order lines for package components in the response? The default is true.\r\nNote that this setting applies only if IncludeDetails is true.",
					"type": "boolean"
				},
				"IncludeInserts": {
					"description": "Include order lines for order inserts in the response?  The default is true.",
					"type": "boolean"
				}
			}
		},
		"OrderUpdateRequest": {
			"description": "The order update request allows you to update the order.  All properties of the update request are optional.\r\nIf a property is not included in the request then it will not be updated.",
			"type": "object",
			"properties": {
				"ShipViaCode": {
					"description": "Populate this property to set the shipping method for all single-sale (PRO) physical goods on the order.  \r\nIf a shipping rule applies to this order then the ship via will be validated against the shipping rule and \r\nthe associated freight override will be applied.  If the order is later changed the shipping\r\nrule validation and freight override will not be applied again.",
					"type": "string"
				},
				"ResponseSettings": {
					"$ref": "#/definitions/OrderGetSettings",
					"description": "Use the ResponseSettings to indicate the level of order detail to include the response to this update request.\r\nIf the ResponseSettings property is omitted from the request then an empty message is returned."
				},
				"PoNumber": {
					"description": "Populate this property to set the PO number on the order.",
					"type": "string"
				},
				"ShipDate": {
					"format": "date-time",
					"description": "Populate this property to set the shipping date for all single-sale (PRO) physical goods on the order.",
					"type": "string"
				},
				"LineUpdates": {
					"description": "Populate this property to specify a collection of order lines on the order\r\nto update and what type of update to do.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderLineUpdateRequest"
					}
				},
				"NewLines": {
					"description": "Populate this property  to specify a collection of order lines to add to the order.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderLineIn"
					}
				},
				"Demographics": {
					"description": "Demographic field values to store on the order",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DemographicValue"
					}
				},
				"UpdatePayments": {
					"description": "Whether to attempt to update the initial payment on the order to the new total.",
					"type": "boolean"
				}
			}
		},
		"OrderLineUpdateRequest": {
			"description": "The order line update request allows you to update an order line on an update.  \r\nAll properties of the update request are optional.\r\nIf a property is not included in the request then it will not be updated.",
			"type": "object",
			"properties": {
				"LineNumber": {
					"format": "int32",
					"description": "The line number of the order line within the order.",
					"type": "integer"
				},
				"Demographics": {
					"description": "Demographic field values to store on the order line",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DemographicValue"
					}
				},
				"Profile": {
					"$ref": "#/definitions/Profile",
					"description": "The optional profile element contains responses to a set of questions asked at order entry time.  \r\nProfiles are typically used to store customer demographic information for audited subscriptions or \r\ncustom inputs used for order fulfillment."
				},
				"Cancel": {
					"description": "Populate this property with true to cancel an order line.",
					"type": "boolean"
				},
				"Quantity": {
					"format": "int32",
					"description": "Populate this property with a number to change the quantity on the order line.",
					"type": "integer"
				},
				"RecurringDonationFrequency": {
					"format": "int32",
					"description": "The number of months between recurring donation contributions.",
					"type": "integer"
				},
				"Association": {
					"$ref": "#/definitions/AssociationLineUpdateRequest",
					"description": "Update association membership specific information"
				},
				"GiftMessage": {
					"$ref": "#/definitions/GiftMessage",
					"description": "Gift message for the order line"
				}
			}
		},
		"OrderLineIn": {
			"description": "Information for creating an order line. This can be used for creating order lines of various types (product, subscription, agreement, etc.).\r\nNot all properties are required, only those for the appropriate order line type.",
			"type": "object",
			"properties": {
				"AgencyReference": {
					"description": "The reference the agency uses to identify the ordered item.",
					"type": "string"
				},
				"ItemNumber": {
					"description": "The item number, identifying which access agreement is being ordered (Publication Code for Subscription \r\nItems).",
					"type": "string"
				},
				"Quantity": {
					"format": "int32",
					"description": "Quantity (Copies for Subscription Order Lines).",
					"type": "integer"
				},
				"PromotionCode": {
					"description": "The promotion code (sometimes referred to as key code).",
					"type": "string"
				},
				"PromotionChoiceCode": {
					"description": "The promotion choice, indicating a set of default settings for an order line.",
					"type": "string"
				},
				"PriceCode": {
					"description": "Price code to use to determine the price.\r\nPass blank to use Advantage's default price code lookup.\r\nIf a price code is provided, the price calculated from the price code will be set on\r\nthe order line as a user override unit price.\r\nNeither promotional nor volume discount pricing will be used.",
					"type": "string"
				},
				"ShipTo": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "The ship to customer address. This field does not apply to access item order lines."
				},
				"UpsellPresentationId": {
					"description": "The ID given when upsell was presented to customer.",
					"type": "string"
				},
				"Product": {
					"$ref": "#/definitions/ProductOrderLineIn",
					"description": "Information for creating a PRO (product) order line."
				},
				"Subscription": {
					"$ref": "#/definitions/SubscriptionOrderLineIn",
					"description": "Information for creating a CIR (subscription) order line."
				},
				"Access": {
					"$ref": "#/definitions/AccessOrderLineIn",
					"description": "Information for creating an AMB (agreement) order line."
				},
				"Conference": {
					"$ref": "#/definitions/ConferenceOrderLineIn",
					"description": "Information for creating a conference order line."
				},
				"Profile": {
					"$ref": "#/definitions/Profile",
					"description": "The optional profile element contains responses to a set of questions asked at order entry time.  \r\nProfiles are typically used to store customer demographic information for audited subscriptions or \r\ncustom inputs used for order fulfillment."
				},
				"Demographics": {
					"description": "Demographic field values to store on the order line",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DemographicValue"
					}
				},
				"OverrideUnitPrice": {
					"format": "double",
					"description": "Explicitly set the unit price for this order line.",
					"type": "number"
				},
				"GiftMessage": {
					"$ref": "#/definitions/GiftMessage",
					"description": "Gift message for the order line"
				}
			}
		},
		"AssociationLineUpdateRequest": {
			"description": "Information for updating an AMM (association membership) order line.",
			"type": "object",
			"properties": {
				"CustomerListCodes": {
					"description": "The list codes of the customer lists the customer should be added to as part of their membership.",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"StructureNodeId": {
					"description": "Association structure node ID",
					"type": "string"
				},
				"IsIncludedInDirectory": {
					"description": "Indicates whether the association member is allowed to be listed in the directory.",
					"type": "boolean"
				},
				"OptionalComponents": {
					"description": "The complete list of optional components to be included as part of the \r\nmembership agreement. \r\nIf populated: \r\n1. Any optional components not on the membership will be added \r\n2. Any optional components on the membership, but not on the list, will be removed",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AssociationOptionalComponent"
					}
				}
			}
		},
		"ProductOrderLineIn": {
			"description": "Information for creating a PRO (product) order line.",
			"type": "object",
			"properties": {
				"ManuscriptNumber": {
					"description": "The manuscript number, which is a means to identify an RPS article.",
					"type": "string"
				}
			}
		},
		"SubscriptionOrderLineIn": {
			"description": "Information for creating a CIR (subscription) order line.",
			"type": "object",
			"properties": {
				"DeliveryCode": {
					"description": "The delivery method for this subscription",
					"type": "string"
				},
				"TermLength": {
					"format": "int32",
					"description": "The subscription term (the number of issues)",
					"type": "integer"
				},
				"Rate": {
					"format": "double",
					"description": "The price of the magazine.",
					"type": "number"
				},
				"GiftMessage": {
					"description": "The gift message",
					"type": "string"
				},
				"BusinessIndustryCode": {
					"description": "The business industry demographic code.",
					"type": "string"
				},
				"BusinessTitleCode": {
					"description": "The business title demographic code.",
					"type": "string"
				},
				"QualificationSourceCode": {
					"description": "The qualification source",
					"type": "string"
				},
				"SubscriptionClass": {
					"description": "Subscription class: R - regular, Q - controlled,\r\nL - delayed start, P - perpetual",
					"enum": [
						"Regular",
						"DelayedStart",
						"MonthlyInvoiced",
						"Perpetual",
						"QualifiedNonpaid",
						"Agreement"
					],
					"type": "string"
				},
				"ReferredByCustomerNumber": {
					"description": "The customer number of the reference customer.",
					"type": "string"
				},
				"OptOut": {
					"description": "Does customer wish to opt out of lists?",
					"type": "boolean"
				},
				"PromoteByMail": {
					"description": "Should the subscriber be promoted by mail?",
					"type": "string"
				},
				"PromoteByPhone": {
					"description": "Should the subscriber be promoted by phone?",
					"type": "string"
				},
				"PromoteByFax": {
					"description": "Should the subscriber be promoted by fax?",
					"type": "string"
				},
				"PromoteByEmail": {
					"description": "Should the subscriber be promoted by email?",
					"type": "string"
				},
				"SubscriptionId": {
					"description": "The subscription reference number.",
					"type": "string"
				},
				"EmailId": {
					"description": "Email ID of e-mail address to link to subscription.",
					"type": "string"
				},
				"IssueGroupCode": {
					"description": "The issue group can be used to indicate a subset of issues to receive (or blank for all).",
					"type": "string"
				},
				"DonorTypeCode": {
					"description": "Donor type (used only when first CIR line on order).",
					"type": "string"
				},
				"DateSigned": {
					"format": "date-time",
					"description": "The date signed for audited circulation; also sets the classification date.",
					"type": "string"
				},
				"AlternateDeliveryIndicator": {
					"description": "The alternate Delivery Indicator.",
					"enum": [
						"Confirming",
						"DeferredStart",
						"InError",
						"No",
						"Override",
						"RequestPermissionDetails",
						"Undeliverable",
						"InWaiting",
						"Excluded",
						"Yes"
					],
					"type": "string"
				},
				"ShipThroughCustomerNumber": {
					"description": "The customer number of the ship-thru customer.",
					"type": "string"
				},
				"EditionCode": {
					"description": "The edition code",
					"type": "string"
				},
				"ForceTrial": {
					"description": "Should the new subscription be forced to be a trial? \r\n(Not valid for renewals.)",
					"type": "boolean"
				},
				"VolumeGroupCode": {
					"description": "Only applicable if the volume group feature is enabled.  If this is not supplied, the \r\ndefault volume group will be used.",
					"type": "string"
				},
				"SocietyCode": {
					"description": "Society, for price code.",
					"type": "string"
				},
				"SubscriptionTypeCode": {
					"description": "The subscription type.",
					"type": "string"
				},
				"RenewalPolicyCode": {
					"description": "Indicates whether a renewal notice should be sent to the subscriber.",
					"type": "string"
				},
				"Starts": {
					"format": "date-time",
					"description": "When the subscription starts; the start date may be assigned when the order line is created, \r\nor it may be assigned (or updated) later when the order is posted.",
					"type": "string"
				},
				"AddDefaultMembershipElements": {
					"description": "If adding a new membership, this determines whether or not to add the default set of \r\nmembership elements for a given org-level publication.",
					"type": "boolean"
				},
				"NonMemberSubscriptionCredit": {
					"description": "This indicates how to handle the case when\r\nthe customer already has an active\r\nnon-membership subscription to a publication.\r\nValid values are:\r\nP - Cancel the existing subscription and\r\napply the partial credit to a new\r\nmembership-based one\r\nF - Cancel the existing subscription and\r\napply the full credit to a new\r\nmembership-based one\r\nC - Convert the existing subscription to\r\nmembership-based",
					"enum": [
						"Partial",
						"Full",
						"ConvertToMemberBased"
					],
					"type": "string"
				}
			}
		},
		"AccessOrderLineIn": {
			"description": "Information for creating an AMB (agreement) order line.",
			"type": "object",
			"properties": {
				"AccessPeriodCode": {
					"description": "The period code, defining the length of the agreement.",
					"type": "string"
				},
				"IsUsageBased": {
					"description": "Should the agreement track usage or is it simply time based: Y - usage-based, N - not usage-based.",
					"type": "boolean"
				},
				"AgreementType": {
					"description": "The type of agreement",
					"enum": [
						"Complimentary",
						"Invoiceable",
						"Proforma",
						"Trial"
					],
					"type": "string"
				},
				"OrderBy": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "The customer that ordered the access."
				},
				"AgreementId": {
					"description": "The agreement ID.",
					"type": "string"
				},
				"ReasonCode": {
					"description": "Reason code for use if AMB item is a trial term.",
					"type": "string"
				},
				"VolumeGroupCode": {
					"description": "Volume group.",
					"type": "string"
				},
				"ForceRenewal": {
					"description": "Is this line required to be processed as a renewal?",
					"type": "boolean"
				},
				"Starts": {
					"format": "date-time",
					"description": "When the agreement starts; the start time maybe be assigned when the order line is created, \r\nor it may be assigned (or updated) later when the order is posted.",
					"type": "string"
				},
				"SocietyCode": {
					"description": "Society, for price code.",
					"type": "string"
				},
				"SubscriptionTypeCode": {
					"description": "The subscription type.",
					"type": "string"
				},
				"RenewalPolicyCode": {
					"description": "Indicates whether a renewal notice should be sent to the subscriber.",
					"type": "string"
				},
				"Participants": {
					"description": "A list of participants to include on the agreement.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AgreementParticipantIn"
					}
				},
				"AccessPointOnlyParticipants": {
					"description": "Should the participants have access to the specific access point instead of the entire agreement?",
					"type": "boolean"
				},
				"EmailId": {
					"description": "Email ID of e-mail address to link to agreement.",
					"type": "string"
				},
				"MaximumParticipants": {
					"format": "int32",
					"description": "The maximum number of participants that can be linked to the agreement.",
					"type": "integer"
				}
			}
		},
		"ConferenceOrderLineIn": {
			"description": "Information for creating a conference order line.",
			"type": "object",
			"properties": {
				"ConferenceLocationCode": {
					"description": "The identifier for the conference location",
					"type": "string"
				},
				"SessionCode": {
					"description": "The identifier for a specific event within a conference.",
					"type": "string"
				},
				"BadgeTypeCode": {
					"description": "Badge type",
					"type": "string"
				}
			}
		},
		"PaymentRequest": {
			"description": "Information for a payment.",
			"type": "object",
			"properties": {
				"AccountCredit": {
					"$ref": "#/definitions/AvailableCreditPaymentRequest",
					"description": "Use the AccountCredit property to control the application of available credits for \r\nthe customer.  Leave AccountCredit null to skip the application of available credits."
				},
				"CreditCards": {
					"description": "Information for a credit card payment.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CreditCardPaymentRequest"
					}
				},
				"BankAccounts": {
					"description": "Information for a direct debit payment.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DirectDebitPaymentRequest"
					}
				},
				"Checks": {
					"description": "Information for a check payment.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CheckPaymentRequest"
					}
				},
				"DigitalWallets": {
					"description": "Information for a digital wallet payment.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DigitalWalletPaymentRequest"
					}
				},
				"GiftCertificates": {
					"description": "Information for a gift certificate payment.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/GiftCertificatePaymentRequest"
					}
				},
				"InstallmentBillingCode": {
					"description": "Code identifying installment billing terms",
					"type": "string"
				},
				"InstallmentBilling": {
					"$ref": "#/definitions/InstallmentBillingPaymentRequest",
					"description": "Installment Billing Information"
				}
			}
		},
		"AvailableCreditPaymentRequest": {
			"description": "Information for a credit card payment.",
			"type": "object",
			"properties": {
				"Amount": {
					"format": "double",
					"description": "The amount of available credits to apply; zero to use all available credits.\r\nThe operation will fail if the given amount is not available.",
					"type": "number"
				},
				"UseCreditsFirst": {
					"description": "Apply the available credits before the other payment methods?  The default is to apply available credits\r\nfirst if an amount is given; last if the amount is zero.",
					"type": "boolean"
				},
				"CreditsToApply": {
					"description": "List of available credits to apply",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CreditKey"
					}
				}
			}
		},
		"CreditCardPaymentRequest": {
			"description": "Information for a credit card payment.",
			"type": "object",
			"properties": {
				"ElectronicPaymentId": {
					"description": "The electronic payment ID which uniquely identifies a saved card to charge.\r\nYou must include either the CardId or the Card element.",
					"type": "string"
				},
				"Card": {
					"$ref": "#/definitions/CreditCardAddRequest",
					"description": "The credit card to charge.\r\nYou must provide either the ElectronicPaymentId or the Card."
				},
				"SecurityCode": {
					"description": "The card security code (CSC number).",
					"type": "string"
				},
				"Amount": {
					"format": "double",
					"description": "The amount of the payment.",
					"type": "number"
				},
				"CaptureId": {
					"description": "The card's capture ID.",
					"type": "string"
				},
				"AuthorizationInformation": {
					"$ref": "#/definitions/CreditCardAuthorizationInformation",
					"description": "The card's authorization info"
				}
			}
		},
		"DirectDebitPaymentRequest": {
			"description": "Information for making a Direct Debit payment.",
			"type": "object",
			"properties": {
				"ElectronicPaymentId": {
					"description": "The unique identifier for a saved customer bank account.",
					"type": "string"
				},
				"DirectDebitId": {
					"description": "The unique identifier for a direct debit request",
					"type": "string"
				},
				"BankAccount": {
					"$ref": "#/definitions/BankAccountCreateRequest",
					"description": "Information for adding a direct debit payment method."
				},
				"Amount": {
					"format": "double",
					"description": "The amount of the payment.",
					"type": "number"
				},
				"DirectDebitPromptDetails": {
					"$ref": "#/definitions/DirectDebitDetails",
					"description": "Branch Name/address, account origin and consent date"
				}
			}
		},
		"GiftCertificatePaymentRequest": {
			"description": "Information for a gift certificate payment",
			"type": "object",
			"properties": {
				"CertificateNumber": {
					"description": "Gift certificate number",
					"type": "string"
				}
			}
		},
		"InstallmentBillingPaymentRequest": {
			"description": "Installment billing information for an order payment",
			"type": "object",
			"properties": {
				"AssumeMinimumDownPayment": {
					"description": "If true, assume minimum down payment will be made",
					"type": "boolean"
				},
				"Installments": {
					"description": "List of Installments",
					"type": "array",
					"items": {
						"$ref": "#/definitions/InstallmentBill"
					}
				}
			}
		},
		"CreditKey": {
			"description": "A credit's identifying information",
			"type": "object",
			"properties": {
				"CreditVoucher": {
					"description": "Unique identifier for a credit",
					"type": "string"
				}
			}
		},
		"CreditCardAuthorizationInformation": {
			"description": "Information for an already-completed credit card authorization.",
			"type": "object",
			"properties": {
				"AuthorizationDate": {
					"format": "date-time",
					"description": "Authorization date",
					"type": "string"
				},
				"AuthorizationCode": {
					"description": "Authorization code",
					"type": "string"
				},
				"AuthorizationTransaction": {
					"description": "Authorization transaction number",
					"type": "string"
				}
			}
		},
		"ShippingChoice": {
			"description": "Information for a shipping method.",
			"type": "object",
			"properties": {
				"ShipViaCode": {
					"description": "The ship via code identifies a product shipping method.",
					"type": "string"
				},
				"ShipViaName": {
					"description": "The name of the product shipping method.",
					"type": "string"
				},
				"ShippingCost": {
					"format": "double",
					"description": "The cost of shipping using this product shipping method.  This is the shipping cost for just\r\nthe one-off products in this order.",
					"type": "number"
				},
				"TotalShippingCost": {
					"format": "double",
					"description": "The cost of shipping using this product shipping method combined with the \r\ndelivery charges for the subscribed products in this order.",
					"type": "number"
				}
			}
		},
		"OrderLineDefaultsRequest": {
			"description": "Information for getting order line defaults",
			"type": "object",
			"properties": {
				"BillTo": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "The bill-to address for the order."
				},
				"ShipTo": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "This ship-to address for the order."
				},
				"ItemNumber": {
					"description": "The item number, identifying which access agreement is being ordered (Publication Code for Subscription \r\nItems).",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "The order currency",
					"type": "string"
				},
				"PromotionCode": {
					"description": "The promotion code (sometimes referred to as key code).",
					"type": "string"
				},
				"PromotionChoiceCode": {
					"description": "The promotion choice, indicating a set of default settings for an order line.",
					"type": "string"
				},
				"GetDefaultSubscriptionEmail": {
					"description": "If true, response will include default subscription email, if one exists",
					"type": "boolean"
				},
				"GetDefaultAgreementEmail": {
					"description": "If true, response will include default agreement email, if one exists",
					"type": "boolean"
				}
			}
		},
		"OrderLineDefaults": {
			"description": "Default values for order lines",
			"type": "object",
			"properties": {
				"AddressCode": {
					"description": "Address Code",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "The currency code in which this item is to be billed.",
					"type": "string"
				},
				"PromotionChoice": {
					"description": "The promotion choice, indicating a set of default settings for an order line.",
					"type": "string"
				},
				"QuantityOrdered": {
					"format": "int32",
					"description": "The quantity ordered for the current order line. For a subscribed product\r\nthe quantity ordered is the number of copies of each issue to receive.",
					"type": "integer"
				},
				"UnitPrice": {
					"format": "double",
					"description": "The price per quantity ordered.",
					"type": "number"
				},
				"Subscription": {
					"$ref": "#/definitions/SubscriptionLineDefaults",
					"description": "Subscription order line defaults"
				},
				"Access": {
					"$ref": "#/definitions/AccessOrderLineDefaults",
					"description": "Information about an AMB (agreement) order line."
				}
			}
		},
		"SubscriptionLineDefaults": {
			"description": "Default values for subscription order lines",
			"type": "object",
			"properties": {
				"MembershipOrganization": {
					"description": "Membership organization",
					"type": "string"
				},
				"MembershipCategory": {
					"description": "Membership category",
					"type": "string"
				},
				"DeliveryCode": {
					"description": "Delivery code",
					"type": "string"
				},
				"TermLength": {
					"format": "int32",
					"description": "The subscription term (the number of issues).",
					"type": "integer"
				},
				"RenewalPolicyCode": {
					"description": "Indicates whether a renewal notice should be sent to the subscriber.",
					"type": "string"
				},
				"Email": {
					"$ref": "#/definitions/SubscriptionEmail",
					"description": "Default subscription email"
				},
				"ActiveNonMemberSubscriptions": {
					"description": "List of active non-member subscriptions that overlap with baby pubs for this order line",
					"type": "array",
					"items": {
						"$ref": "#/definitions/NonMemberSubscription"
					}
				}
			}
		},
		"AccessOrderLineDefaults": {
			"description": "Default values for agreement order lines",
			"type": "object",
			"properties": {
				"AccessPeriodCode": {
					"description": "The period code, defining the length of the agreement.",
					"type": "string"
				},
				"RenewalPolicyCode": {
					"description": "Indicates whether a renewal notice should be sent to the subscriber.",
					"type": "string"
				},
				"Email": {
					"$ref": "#/definitions/AgreementEmail",
					"description": "The email information associated with the agreement"
				}
			}
		},
		"SubscriptionEmail": {
			"description": "Information about a Subscription Email",
			"type": "object",
			"properties": {
				"EmailAddress": {
					"description": "E-mail address",
					"type": "string"
				},
				"EmailId": {
					"description": "E-mail id",
					"type": "string"
				},
				"SequenceNumber": {
					"format": "int32",
					"description": "Sequence number",
					"type": "integer"
				},
				"Status": {
					"description": "Status",
					"type": "string"
				}
			}
		},
		"NonMemberSubscription": {
			"description": "Information about a non-member subscription",
			"type": "object",
			"properties": {
				"PublicationCode": {
					"description": "Publication Code",
					"type": "string"
				},
				"EstimatedCancelCredit": {
					"format": "double",
					"description": "Estimated Cancel Credit",
					"type": "number"
				},
				"EstimatedPartialCredit": {
					"format": "double",
					"description": "Estimated Partial Credit",
					"type": "number"
				}
			}
		},
		"AgreementEmail": {
			"description": "Information about an agreement email",
			"type": "object",
			"properties": {
				"EmailAddress": {
					"description": "Email address",
					"type": "string"
				},
				"EmailId": {
					"description": "Email id",
					"type": "string"
				},
				"EmailStatus": {
					"description": "Email status",
					"type": "string"
				},
				"ItemNumber": {
					"description": "Item number",
					"type": "string"
				}
			}
		},
		"DefaultCurrencyRequest": {
			"description": "Information for getting default currency",
			"type": "object",
			"properties": {
				"BillToCustomerNumber": {
					"description": "The bill-to customer for the order.",
					"type": "string"
				},
				"PromotionCode": {
					"description": "The promotion code (sometimes referred to as key code).",
					"type": "string"
				}
			}
		},
		"DefaultCurrencyResponse": {
			"description": "Default value for Currency",
			"type": "object",
			"properties": {
				"CurrencyCode": {
					"description": "Currency Code",
					"type": "string"
				}
			}
		},
		"OrderCreateRequest": {
			"description": "Information for creating an order.",
			"type": "object",
			"properties": {
				"BillTo": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "The bill-to address for the order."
				},
				"ShipTo": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "This ship-to address for the order."
				},
				"InstallmentBillingCode": {
					"description": "The installment billing code, used to identify the install billing terms used.",
					"type": "string"
				},
				"FreeShipping": {
					"description": "Does this order get free shipping?",
					"type": "boolean"
				},
				"DiscountPercent": {
					"format": "double",
					"description": "The discount percentage to be applied to the discountable amount. For example, 10% is entered as 10.",
					"type": "number"
				},
				"OrderType": {
					"description": "The accounts receivable classification of the order.  S=Invoice, K=Credit, F=Pro-Forma (no A/R).",
					"enum": [
						"CreditMemoReturnOrder",
						"GratisOrder",
						"InvoiceableOrder",
						"ModifyOrder",
						"ProFormaOrder",
						"PostShippedOrder",
						"RepeatingOrder",
						"PreviewOrder",
						"WarehouseTransfer"
					],
					"type": "string"
				},
				"PurchaseOrderNumber": {
					"description": "The purchase order number, provided by the customer.",
					"type": "string"
				},
				"PromotionCode": {
					"description": "The sales promotion effort to be credited a particular sale.",
					"type": "string"
				},
				"SalesRepCode": {
					"description": "The salesperson getting credit for orders from this customer.",
					"type": "string"
				},
				"CallListDate": {
					"format": "date-time",
					"description": "Tele-services call list Date",
					"type": "string"
				},
				"CallListCode": {
					"description": "Tele-services call list ID",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "The currency code in which the order was billed.",
					"type": "string"
				},
				"DocketNumber": {
					"description": "The docket number is the audit tracking number assigned to incoming documents.",
					"type": "string"
				},
				"OrderSourceCode": {
					"description": "The source of the order.",
					"type": "string"
				},
				"GratisReasonCode": {
					"description": "Gratis reason code (for gratis orders).",
					"type": "string"
				},
				"BillingOrganizationCode": {
					"description": "The billing organization for the order.",
					"type": "string"
				},
				"Demographics": {
					"description": "Demographic field values for the order",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DemographicValue"
					}
				},
				"Lines": {
					"description": "The order lines on the order.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderLineIn"
					}
				}
			}
		},
		"AppliedReturnOrderCreateRequest": {
			"description": "Information pertaining to an applied return order.",
			"type": "object",
			"properties": {
				"CreditReasonCode": {
					"description": "Credit reason code",
					"type": "string"
				},
				"OrderDate": {
					"format": "date-time",
					"description": "Order date",
					"type": "string"
				},
				"Lines": {
					"description": "Return order lines",
					"type": "array",
					"items": {
						"$ref": "#/definitions/AppliedReturnOrderLine"
					}
				}
			}
		},
		"AppliedReturnOrderLine": {
			"description": "Information for creating a PRO applied return order line.",
			"type": "object",
			"properties": {
				"ItemNumber": {
					"description": "Item number",
					"type": "string"
				},
				"Quantity": {
					"format": "int32",
					"description": "Quantity",
					"type": "integer"
				}
			}
		},
		"PaymentDefaults": {
			"description": "Defaults for entering a payment for an order",
			"type": "object",
			"properties": {
				"AcceptChecks": {
					"description": "True if check payments are accepted as payment for an order",
					"type": "boolean"
				},
				"AcceptCreditCards": {
					"description": "True if credit cards are accepted as payment for an order",
					"type": "boolean"
				},
				"ValidCreditCardPaymentMethods": {
					"description": "Credit card payment codes valid to pay for an order",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CreditCardPaymentMethod"
					}
				},
				"AcceptDirectDebits": {
					"description": "True if direct debit payments are accepted as payment for an order",
					"type": "boolean"
				},
				"ValidDirectDebitPaymentMethods": {
					"description": "Direct debit payment codes valid to pay for an order",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DirectDebitPaymentMethod"
					}
				},
				"AcceptDigitalWallets": {
					"description": "True if digital wallet payments are accepted as payment for an order",
					"type": "boolean"
				},
				"ValidDigitalWalletPaymentMethods": {
					"description": "Digital wallet payment codes valid to pay for an order",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DigitalWalletPaymentMethod"
					}
				},
				"AcceptGiftCertificates": {
					"description": "True if gift certificates are accepted as payment for an order",
					"type": "boolean"
				},
				"AcceptMiscellaneousCredits": {
					"description": "True if miscellaneous credits are accepted as payment for an order",
					"type": "boolean"
				},
				"AcceptAvailableCredits": {
					"description": "True if adjustment credits are accepted as payment for an order",
					"type": "boolean"
				},
				"AvailableCredits": {
					"description": "Credits available to be applied to an order",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Credit"
					}
				},
				"InstallmentBillingCode": {
					"description": "The default installment billing code",
					"type": "string"
				},
				"SavedPayments": {
					"description": "Saved electronic payments available to pay for an order",
					"type": "array",
					"items": {
						"$ref": "#/definitions/SavedPayment"
					}
				}
			}
		},
		"DigitalWalletPaymentMethod": {
			"description": "Information pertaining to a payment method.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The code identifying the payment method.",
					"type": "string"
				},
				"Name": {
					"description": "The name of this payment method.",
					"type": "string"
				}
			}
		},
		"CouponRequest": {
			"description": "Information for adding coupons to an order.",
			"type": "object",
			"properties": {
				"CouponCodes": {
					"description": "The coupon codes to add to the order.",
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"PendingPremiumUpdateRequest": {
			"description": "Information for requesting an update to a premium set that have not yet been filled.",
			"required": [
				"CustomerNumber",
				"EarnedAt",
				"OrderSequence",
				"SequenceNumber"
			],
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "Customer number",
					"type": "string"
				},
				"EarnedAt": {
					"description": "Earned at",
					"type": "string"
				},
				"OrderSequence": {
					"description": "Order sequence applicable for premium items",
					"type": "string"
				},
				"SequenceNumber": {
					"format": "int32",
					"description": "Sequence number applicable for premium set items",
					"type": "integer"
				},
				"ItemNumber": {
					"description": "Premium item number that can only be updated for premium set items",
					"type": "string"
				}
			}
		},
		"OrderTrackingCreateRequest": {
			"description": "Data transfer object for creating an OrderTracking",
			"type": "object",
			"properties": {
				"ActualFreightAmount": {
					"format": "double",
					"description": "Actual freight amount of shipment",
					"type": "number"
				},
				"ActualShipVia": {
					"description": "Actual ship via code",
					"type": "string"
				},
				"BillingCurrency": {
					"description": "Billing currency of freight amount",
					"type": "string"
				},
				"CountryCode": {
					"description": "Country code of where shipment is going",
					"type": "string"
				},
				"ItemNumber": {
					"description": "Item number if shipment contained only one item",
					"type": "string"
				},
				"NumberOfCartons": {
					"format": "int32",
					"description": "Number of cartons",
					"type": "integer"
				},
				"NumberOfPackages": {
					"format": "int32",
					"description": "Number of packages",
					"type": "integer"
				},
				"NumberOfPallets": {
					"format": "int32",
					"description": "Number of pallets",
					"type": "integer"
				},
				"PackerId": {
					"description": "Id of warehouse person who packed the shipment",
					"type": "string"
				},
				"PickerId": {
					"description": "Id of warehouse person who picked the shipment",
					"type": "string"
				},
				"PickupNumber": {
					"description": "Pickup number",
					"type": "string"
				},
				"PostalCode": {
					"description": "Postal code",
					"type": "string"
				},
				"QuantityShipped": {
					"format": "int32",
					"description": "Quantity shipped",
					"type": "integer"
				},
				"ShippingZone": {
					"description": "Shipping zone carriers like RPS or UPS",
					"type": "string"
				},
				"ShippingDate": {
					"format": "date-time",
					"description": "Shipping date",
					"type": "string"
				},
				"ShippingTime": {
					"description": "Shipping time (in HHMM format)",
					"type": "string"
				},
				"ShipToCustomerNumber": {
					"description": "Customer number of who the shipment is for",
					"type": "string"
				},
				"TotalWeight": {
					"format": "double",
					"description": "Total weight",
					"type": "number"
				},
				"TrackingNumber": {
					"description": "Tracking number",
					"type": "string"
				},
				"WarehouseNumber": {
					"description": "Warehouse number that the shipment shipped from",
					"type": "string"
				}
			}
		},
		"OrderComparison": {
			"description": "Data transfer object for order search expressions",
			"type": "object",
			"properties": {
				"Field": {
					"description": "Name of field in table to compare",
					"enum": [
						"OrderNumber",
						"BillToCustomerNumber",
						"DefaultShipToCustomerNumber",
						"BillingCurrencyCode",
						"BillToAddressCode",
						"DefaultShipToAddressCode",
						"PromotionCode",
						"IsFreeShipping",
						"DiscountPercent",
						"SalesRepCode",
						"PurchaseOrderNumber",
						"OrderDate",
						"BillingOrganizationCode",
						"OrderType",
						"OperationCode",
						"ControlGroup"
					],
					"type": "string"
				},
				"Operator": {
					"description": "Operator to use in comparison",
					"enum": [
						"Equal",
						"NotEqual",
						"Less",
						"LessOrEqual",
						"Greater",
						"GreaterOrEqual",
						"IsNull",
						"IsNotNull",
						"Like",
						"NotLike",
						"Contains",
						"NotContains",
						"StartsWith",
						"NotStartsWith",
						"EndsWith",
						"NotEndsWith",
						"In",
						"Between"
					],
					"type": "string"
				},
				"Value": {
					"description": "Value to compare the field name to",
					"type": "string"
				}
			}
		},
		"SearchResultWithCount[OrderSummary]": {
			"description": "The Order History response.",
			"type": "object",
			"properties": {
				"TotalCount": {
					"format": "int32",
					"description": "Gets the total number of orders found for the given customer.",
					"type": "integer"
				},
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderSummary"
					}
				}
			}
		},
		"OrderSummary": {
			"description": "The summary information for an order.",
			"type": "object",
			"properties": {
				"OrderNumber": {
					"description": "The order number.",
					"type": "string"
				},
				"OrderDate": {
					"format": "date-time",
					"description": "The date the order was placed.",
					"type": "string"
				},
				"ShippingDate": {
					"format": "date-time",
					"description": "The date the order was/will shipped/ship",
					"type": "string"
				},
				"Cost": {
					"format": "double",
					"description": "The total cost of the order.",
					"type": "number"
				},
				"BillToName": {
					"description": "The name of the customer billed for the order.",
					"type": "string"
				},
				"AmountDue": {
					"format": "double",
					"description": "The amount due on the order.",
					"type": "number"
				},
				"CurrencyCode": {
					"description": "The billing currency code for this order.",
					"type": "string"
				},
				"OrderLines": {
					"description": "The summary information for the order lines.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OrderLineSummary"
					}
				},
				"OrderType": {
					"description": "The summary information for the order lines.",
					"enum": [
						"CreditMemoReturnOrder",
						"GratisOrder",
						"InvoiceableOrder",
						"ModifyOrder",
						"ProFormaOrder",
						"PostShippedOrder",
						"RepeatingOrder",
						"PreviewOrder",
						"WarehouseTransfer"
					],
					"type": "string"
				},
				"PaymentsReceived": {
					"format": "double",
					"description": "The total of payments received for this order, including pending payments",
					"type": "number"
				},
				"PaymentsRecieved": {
					"format": "double",
					"description": "The total of payments received for this order, including pending payments.  \r\nThis property is deprecated; use PaymentsReceived",
					"type": "number"
				},
				"InstallmentBillingCode": {
					"description": "",
					"type": "string"
				},
				"NextPaymentAmount": {
					"format": "double",
					"description": "",
					"type": "number"
				},
				"IsPosted": {
					"description": "True if order is posted",
					"type": "boolean"
				},
				"PromotionCode": {
					"description": "Sales promotion effort to be credited a particular sale.",
					"type": "string"
				}
			}
		},
		"OrderLineSummary": {
			"description": "The summary information for an order line.",
			"type": "object",
			"properties": {
				"BillingCurrencyCode": {
					"description": "Billing currency code.",
					"type": "string"
				},
				"Discount": {
					"format": "double",
					"description": "Order line discount amount.",
					"type": "number"
				},
				"IsPackageComponent": {
					"description": "Is this a package component?",
					"type": "boolean"
				},
				"IsPremium": {
					"description": "Is this order line a premium?",
					"type": "boolean"
				},
				"ItemNumber": {
					"description": "Item number of the product on the order line.",
					"type": "string"
				},
				"LineNumber": {
					"format": "int32",
					"description": "Order line ID",
					"type": "integer"
				},
				"NetDiscount": {
					"format": "double",
					"description": "Order line discount amount.",
					"type": "number"
				},
				"NetSalesAmount": {
					"format": "double",
					"description": "Order line sales amount.",
					"type": "number"
				},
				"NetShippingCharges": {
					"format": "double",
					"description": "Order line shipping/postage charges.",
					"type": "number"
				},
				"NetTax": {
					"format": "double",
					"description": "Order line tax amount.",
					"type": "number"
				},
				"NetTotalCost": {
					"format": "double",
					"description": "Net order line cost.",
					"type": "number"
				},
				"OrderNumber": {
					"description": "The Advantage order number.",
					"type": "string"
				},
				"PackageHeaderLineId": {
					"format": "int32",
					"description": "Returns the line ID of the package header, or zero.",
					"type": "integer"
				},
				"ProductName": {
					"description": "Product title.",
					"type": "string"
				},
				"ProductType": {
					"description": "Product type (e.g. CIR, PRO, CEM).",
					"enum": [
						"Product",
						"Subscription",
						"Access",
						"Conference",
						"BackIssue",
						"Package",
						"Unknown",
						"Membership",
						"Donation",
						"PrintJob",
						"Reprint",
						"Service",
						"Stock"
					],
					"type": "string"
				},
				"PromotionChoice": {
					"$ref": "#/definitions/PromotionChoiceSummary",
					"description": "Promotion choice."
				},
				"PromotionCode": {
					"description": "Promotion/key code.",
					"type": "string"
				},
				"QuantityOrdered": {
					"format": "int32",
					"description": "Quantity ordered.",
					"type": "integer"
				},
				"SalesAmountOrdered": {
					"format": "double",
					"description": "Order line sales amount.",
					"type": "number"
				},
				"SalesAmountShipped": {
					"format": "double",
					"description": "Order line sales amount.",
					"type": "number"
				},
				"ShippingCharges": {
					"format": "double",
					"description": "Order line shipping/postage charges.",
					"type": "number"
				},
				"ShipTo": {
					"$ref": "#/definitions/CustomerAddressSummary",
					"description": "Ship-to customer"
				},
				"Tax": {
					"format": "double",
					"description": "Order line tax amount.",
					"type": "number"
				},
				"TotalCost": {
					"format": "double",
					"description": "Net order line cost.",
					"type": "number"
				},
				"UnitPrice": {
					"format": "double",
					"description": "Price per quantity ordered.",
					"type": "number"
				},
				"IsCancelled": {
					"description": "Is the order line canceled?",
					"type": "boolean"
				},
				"IsAssociationComponent": {
					"description": "Is the order line a component of an association membership?",
					"type": "boolean"
				},
				"OperationCode": {
					"description": "Operation code for subscription order line. Blank for non-subscription order line.",
					"type": "string"
				},
				"IsGift": {
					"description": "True if the bill-to customer number does not match the ship-to customer number",
					"type": "boolean"
				}
			}
		},
		"PromotionChoiceSummary": {
			"description": "Promotion choice summary",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The promotion choice code.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the promotion choice.",
					"type": "string"
				}
			}
		},
		"OrderHistoryFilter": {
			"description": "Filter criteria for order history search",
			"type": "object",
			"properties": {
				"Search": {
					"description": "The generic search argument. (Typically from a search text box). This term will be compared to several \r\nfields on the order.",
					"type": "string"
				},
				"BeginDate": {
					"format": "date-time",
					"description": "The beginning date. Only orders placed after this date will be returned.",
					"type": "string"
				},
				"EndDate": {
					"format": "date-time",
					"description": "The end date. Only orders placed before this date will be returned.",
					"type": "string"
				},
				"ExcludeBackorderFufillment": {
					"description": "Exclude backorder-fulfillment orders",
					"type": "boolean"
				},
				"ExcludePremiumFill": {
					"description": "Exclude premium-fill orders",
					"type": "boolean"
				},
				"MembershipOrganization": {
					"description": "Membership organization to filter by",
					"type": "string"
				},
				"OwningOrganizations": {
					"description": "Owning organizations to filter by",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"IsPosted": {
					"description": "Order's posting status. Filter orders based on whether or not\r\nthe order is posted.",
					"type": "boolean"
				},
				"HasProductOrderLine": {
					"description": "Filter orders based on whether or not the order has \r\na product order line.",
					"type": "boolean"
				},
				"IsInStatusThatAllowsModifications": {
					"description": "Filter orders based on whether or not the order\r\nis in a status that allows further modification",
					"type": "boolean"
				}
			}
		},
		"InstallmentBillingResponse": {
			"description": "Information about an installment billing plan for an order",
			"type": "object",
			"properties": {
				"InstallmentFee": {
					"format": "double",
					"description": "Installment Fee",
					"type": "number"
				},
				"Installments": {
					"description": "Collection of installments",
					"type": "array",
					"items": {
						"$ref": "#/definitions/InstallmentBill"
					}
				},
				"MinimumDownPayment": {
					"format": "double",
					"description": "Minimum Down Payment",
					"type": "number"
				},
				"MinimumOrderValue": {
					"format": "double",
					"description": "Minimum Order Value",
					"type": "number"
				}
			}
		},
		"InstallmentBillingCreateRequest": {
			"description": "Information for adding an installment billing plan.",
			"type": "object",
			"properties": {
				"AssumeMinimumDownPayment": {
					"description": "If true, assume minimum down payment will be made",
					"type": "boolean"
				},
				"InstallmentBillingCode": {
					"description": "Installment Billing Code",
					"type": "string"
				},
				"Installments": {
					"description": "List of Installments",
					"type": "array",
					"items": {
						"$ref": "#/definitions/InstallmentBill"
					}
				}
			}
		},
		"DebitPaymentRequest": {
			"description": "Information for applying payment to a set of debits.",
			"type": "object",
			"properties": {
				"Payment": {
					"$ref": "#/definitions/PaymentRequest",
					"description": "The credit card or direct debit payment to apply to the selected debits"
				},
				"SelectedDebits": {
					"description": "A list of debits to be paid",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"BillingCurrency": {
					"description": "Billing currency for selected debits",
					"type": "string"
				},
				"TeleserviceOrderDetails": {
					"$ref": "#/definitions/TeleserviceOrderDetails",
					"description": "Optional information for linking a call to this payment"
				}
			}
		},
		"TeleserviceOrderDetails": {
			"description": "Information for linking a payment to a call",
			"type": "object",
			"properties": {
				"SalesRepNumber": {
					"description": "Sales Rep Number",
					"type": "string"
				},
				"ListId": {
					"description": "Call List ID",
					"type": "string"
				},
				"ListDate": {
					"format": "date-time",
					"description": "List Date",
					"type": "string"
				}
			}
		},
		"DebitPaymentResponse": {
			"description": "Information from a debit payment.",
			"type": "object",
			"properties": {
				"AmountApplied": {
					"format": "double",
					"description": "The total amount applied to the debits",
					"type": "number"
				}
			}
		},
		"SearchResult[PremiumSet]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PremiumSet"
					}
				}
			}
		},
		"PremiumSet": {
			"description": "Information about an Advantage premium set. A premium set is a way of awarding premiums to a customer.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The premium set code.",
					"type": "string"
				},
				"Name": {
					"description": "The premium set description.",
					"type": "string"
				},
				"Details": {
					"description": "The Premium Set Details associated with this premium set.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PremiumSetDetail"
					}
				}
			}
		},
		"PremiumSetDetail": {
			"description": "Information about premium set details.\r\nA premium set is a way of awarding premiums to a customer. The items associated with a premium set\r\ndictate what premiums the customer will receive.",
			"type": "object",
			"properties": {
				"PremiumSetCode": {
					"description": "The Premium set code that identifies a product that a customer can receive for free and what must be done to earn it.",
					"type": "string"
				},
				"EarnedAt": {
					"description": "The event that triggers a premium.",
					"enum": [
						"FirstDays",
						"FirstResponses",
						"Payment",
						"PremiumHold",
						"Response",
						"Returned"
					],
					"type": "string"
				},
				"ResponseSequence": {
					"description": "The response sequence number identifies the position of a single response.",
					"type": "string"
				},
				"PaidupPercent": {
					"format": "int32",
					"description": "Specifies the % of the total order amount that must be paid up before the premium can be fulfilled.",
					"type": "integer"
				},
				"DaysToRespond": {
					"format": "int32",
					"description": "A customer earns the premium if the response came in within this number of days.",
					"type": "integer"
				},
				"FirstNResponses": {
					"format": "int32",
					"description": "A customer earns the premium if the customer's response if within the first N responses, where N is this number.",
					"type": "integer"
				},
				"FulfillAt": {
					"description": "Specifies when the premium earned should be shipped.",
					"enum": [
						"FulfillWhenEarned",
						"FulfillWithIssue",
						"FulfillAfterNextBookClubOrder",
						"FulfillThroughSeparateOrder"
					],
					"type": "string"
				},
				"AssemblyPackage": {
					"description": "The assembly package code identifies a particular combination of forms, materials and promotions for a shipment.",
					"type": "string"
				},
				"AwardedBasedOn": {
					"description": "The Term/Amount/#Lines flag indicates whether a premium set is awarded based on sub term, order amount or number of order lines.",
					"enum": [
						"ShippingOrderTotal",
						"OrderLines",
						"TermLength",
						"OrderTotal"
					],
					"type": "string"
				},
				"PrmSetLowerLimit": {
					"format": "int32",
					"description": "Specifies the lower limit (measurement determined by TermDollarFlag) for which a premium set is awarded.",
					"type": "integer"
				},
				"PrmSetUpperLimit": {
					"format": "int32",
					"description": "Specifies the upper limit (measurement determined by TermDollarFlag) for which a premium set is awarded.",
					"type": "integer"
				},
				"SelectOnlyOnce": {
					"description": "The Select Only Once flag controls whether all or only the first matching premium set sequences are fulfilled.",
					"type": "boolean"
				},
				"PaymentWithOrder": {
					"description": "The Payment With Order flag indicates whether a premium set is applicable only to orders received with full payment.",
					"type": "boolean"
				},
				"LastUpdatedOn": {
					"format": "date-time",
					"description": "Gets the Last Updated Date for the current Premium Set Detail.",
					"type": "string"
				},
				"LastUpdatedBy": {
					"description": "Gets the user that last updated the current Premium Set Detail.",
					"type": "string"
				},
				"PublicationCode": {
					"description": "The Publication Code that identifies a magazine.",
					"type": "string"
				},
				"IssuesToExtend": {
					"format": "int32",
					"description": "Number of issues to extend subscription.",
					"type": "integer"
				},
				"ReductionRate": {
					"format": "double",
					"description": "Reduction Rate amount",
					"type": "number"
				},
				"ReductionCurrency": {
					"description": "Currency code of the reduction rate",
					"type": "string"
				},
				"AdjustmentReason": {
					"description": "The Adjustment Reason code used to describe the reason for a transaction.",
					"type": "string"
				},
				"ResponseType": {
					"description": "The Response Type indicates what channel the response came through.",
					"type": "string"
				},
				"DonorRecipientFlag": {
					"description": "Is the premium only available when the ship-to customer equals the bill-to customer?",
					"type": "boolean"
				},
				"MaxItemCount": {
					"format": "int32",
					"description": "Gets the maximum number of items that can be associated with this premium set record.",
					"type": "integer"
				},
				"EarnedAtDescription": {
					"description": "Gets the description of the earning criteria for the current Premium Set Detail.",
					"type": "string"
				},
				"OnePerParticipantFlag": {
					"description": "Specifies if only one premium is fulfilled per recipient.",
					"type": "boolean"
				},
				"Premiums": {
					"description": "Gets the list of Premium Items for the current Premium Set Detail.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PremiumSetDetailItem"
					}
				}
			}
		},
		"PremiumSetDetailItem": {
			"description": "An item on a premium set detail",
			"type": "object",
			"properties": {
				"ItemNumber": {
					"description": "The Item Number is a code used to identify the stock item.",
					"type": "string"
				},
				"SendTo": {
					"description": "Specify who to send the premium earned to.",
					"enum": [
						"BillToCustomer",
						"ReferringCustomer",
						"ShipToCustomer"
					],
					"type": "string"
				},
				"ShipViaCode": {
					"description": "Indicates how the order was actually shipped.",
					"type": "string"
				},
				"LifetimeMaximum": {
					"format": "int32",
					"description": "Maximum number of times a customer can receive an item as a premium.",
					"type": "integer"
				},
				"SubscriptionChoiceCode": {
					"description": "Code that uniquely identifies a subscription choice.",
					"type": "string"
				}
			}
		},
		"PremiumSetCreateRequest": {
			"description": "Information for creating a premium set.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The premium set code.",
					"type": "string"
				},
				"Name": {
					"description": "The premium set description.",
					"type": "string"
				},
				"Details": {
					"description": "Information for creating premium set details on this premium set.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PremiumSetDetailCreateRequest"
					}
				}
			}
		},
		"PremiumSetDetailCreateRequest": {
			"description": "Information for creating a Premium Set Detail",
			"type": "object",
			"properties": {
				"EarnedAt": {
					"description": "The event that triggers a premium.",
					"enum": [
						"FirstDays",
						"FirstResponses",
						"Payment",
						"PremiumHold",
						"Response",
						"Returned"
					],
					"type": "string"
				},
				"ResponseSequence": {
					"description": "The response sequence number identifies the position of a single response.",
					"type": "string"
				},
				"FulfillAt": {
					"description": "Specifies when the premium earned should be shipped.",
					"enum": [
						"FulfillWhenEarned",
						"FulfillWithIssue",
						"FulfillAfterNextBookClubOrder",
						"FulfillThroughSeparateOrder"
					],
					"type": "string"
				},
				"AssemblyPackage": {
					"description": "The assembly package code identifies a particular combination of forms, materials and promotions for a shipment.",
					"type": "string"
				},
				"SelectOnlyOnce": {
					"description": "The Select Only Once flag controls whether all or only the first matching premium set sequences are fulfilled.",
					"type": "boolean"
				},
				"Premiums": {
					"description": "The list of premium items awarded for this premium set. Up to four may be specified.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PremiumSetDetailItem"
					}
				},
				"EarningCriteria": {
					"$ref": "#/definitions/PremiumSetEarningCriteria",
					"description": "Information for how the premium set will be earned."
				},
				"SubscriptionAdjustments": {
					"$ref": "#/definitions/PremiumSetSubscriptionAdjustments",
					"description": "Information for subscription adjustments on the premium set."
				}
			}
		},
		"PremiumSetEarningCriteria": {
			"description": "Information for how a premium set will be earned.",
			"type": "object",
			"properties": {
				"PaidupPercent": {
					"format": "int32",
					"description": "Specifies the % of the total order amount that must be paid up before the premium can be fulfilled.\r\nThis should only be provided if premium set is earned at Payment.",
					"type": "integer"
				},
				"DaysToRespond": {
					"format": "int32",
					"description": "A customer earns the premium if the response came in within this number of days.\r\nThis should only be provided if premium set is earned at FirstDays.",
					"type": "integer"
				},
				"WithinResponses": {
					"description": "A customer earns the premium if the customer's response if within the first N responses, where N is this number.\r\nThis should only be provided if premium set is earned at FirstResponses.",
					"type": "string"
				},
				"AwardedBasedOn": {
					"description": "The AwardedBasedOn flag indicates whether a premium set is awarded based on sub term, order amount or number of order lines.",
					"enum": [
						"ShippingOrderTotal",
						"OrderLines",
						"TermLength",
						"OrderTotal"
					],
					"type": "string"
				},
				"AwardedBasedOnLowerLimit": {
					"format": "int32",
					"description": "Specifies the lower limit (measurement determined by AwardedBasedOn) for which a premium set is awarded.",
					"type": "integer"
				},
				"AwardedBasedOnUpperLimit": {
					"format": "int32",
					"description": "Specifies the upper limit (measurement determined by AwardedBasedOn) for which a premium set is awarded.",
					"type": "integer"
				},
				"RequireShipToSelf": {
					"description": "Is the premium only available when the ship-to customer equals the bill-to customer?",
					"type": "boolean"
				},
				"RequirePaymentWithOrder": {
					"description": "The Require Payment With Order flag indicates whether a premium set is applicable only to orders received with full payment.",
					"type": "boolean"
				},
				"OrderSourceCode": {
					"description": "The Order Source Code indicates what channel the response came through.",
					"type": "string"
				},
				"OncePerRecipient": {
					"description": "Specifies if only one premium is fulfilled per recipient.",
					"type": "boolean"
				}
			}
		},
		"PremiumSetSubscriptionAdjustments": {
			"description": "Information for subscription adjustments on a premium set.",
			"type": "object",
			"properties": {
				"PublicationCode": {
					"description": "The Publication Code that identifies a magazine.",
					"type": "string"
				},
				"IssuesToExtend": {
					"format": "int32",
					"description": "Number of issues to extend subscription.",
					"type": "integer"
				},
				"ReductionRateByAmount": {
					"format": "double",
					"description": "Reduction Rate amount",
					"type": "number"
				},
				"ReductionRateByCurrency": {
					"description": "Currency code of the reduction rate",
					"type": "string"
				},
				"AdjustmentReasonCode": {
					"description": "The Adjustment Reason code used to describe the reason for a transaction.",
					"type": "string"
				}
			}
		},
		"PremiumSetDetailUpdateRequest": {
			"description": "The premium set detail update request allows you to update a premium set detail.\r\nAll properties of the update request are optional.\r\nIf a property is not set in the request object then it will not be updated.",
			"type": "object",
			"properties": {
				"FulfillAt": {
					"description": "Specifies when the premium earned should be shipped.",
					"enum": [
						"FulfillWhenEarned",
						"FulfillWithIssue",
						"FulfillAfterNextBookClubOrder",
						"FulfillThroughSeparateOrder"
					],
					"type": "string"
				},
				"AssemblyPackage": {
					"description": "The assembly package code identifies a particular combination of forms, materials and promotions for a shipment.",
					"type": "string"
				},
				"SelectOnlyOnce": {
					"description": "The Select Only Once flag controls whether all or only the first matching premium set sequences are fulfilled.",
					"type": "boolean"
				},
				"Premiums": {
					"description": "The list of premium items awarded for this premium set. Up to four may be specified.\r\nAny items in this list that have an item number will be completely overwritten.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PremiumSetDetailItem"
					}
				},
				"EarningCriteria": {
					"$ref": "#/definitions/PremiumSetEarningCriteria",
					"description": "Information for how the premium set will be earned."
				},
				"SubscriptionAdjustments": {
					"$ref": "#/definitions/PremiumSetSubscriptionAdjustments",
					"description": "Information for subscription adjustments on the premium set."
				}
			}
		},
		"ProductUpdateRequest": {
			"description": "Information for an Advantage product.",
			"type": "object",
			"properties": {
				"Name": {
					"description": "The name of the product.",
					"type": "string"
				},
				"ProductFamily": {
					"description": "The product family of the product.",
					"type": "string"
				},
				"ProductCategoryCode": {
					"description": "The product category of the product.",
					"type": "string"
				},
				"PublicationDate": {
					"format": "date-time",
					"description": "The product's publication date.",
					"type": "string"
				},
				"Narratives": {
					"description": "The narratives for the product.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Narrative"
					}
				},
				"ProductDetails": {
					"$ref": "#/definitions/OneOffProductUpdateRequest",
					"description": "Information specific to a one-off product."
				},
				"SubscriptionDetails": {
					"$ref": "#/definitions/SubscriptionProductUpdateRequest",
					"description": "Information specific to a subscription product. Null if the product is not a subscription."
				},
				"AccessDetails": {
					"$ref": "#/definitions/AccessProductUpdateRequest",
					"description": "Information specific to an access product. Null if the product is not a access product."
				},
				"ConferenceDetails": {
					"$ref": "#/definitions/ConferenceProductUpdateRequest",
					"description": "Information specific to a conference product. Null if the product is not a conference product."
				}
			}
		},
		"OneOffProductUpdateRequest": {
			"description": "Information for a one-off product (PRO)",
			"type": "object",
			"properties": {
				"Isbn13": {
					"description": "The ISBN-13 number of the product.",
					"type": "string"
				},
				"Author": {
					"description": "The author of the product.",
					"type": "string"
				},
				"Editor": {
					"description": "The editor of the product.",
					"type": "string"
				},
				"Width": {
					"format": "double",
					"description": "The width of the product",
					"type": "number"
				},
				"Height": {
					"format": "double",
					"description": "The height of the product",
					"type": "number"
				},
				"Depth": {
					"format": "double",
					"description": "The depth of the product.",
					"type": "number"
				},
				"Weight": {
					"format": "double",
					"description": "The weight of the product.",
					"type": "number"
				},
				"FormatCode": {
					"description": "The format of the product.",
					"type": "string"
				},
				"Pages": {
					"format": "int32",
					"description": "The number of pages.",
					"type": "integer"
				}
			}
		},
		"SubscriptionProductUpdateRequest": {
			"description": "Information for a subscription product.",
			"type": "object",
			"properties": {
				"Issn": {
					"description": "The ISSN for the issue.",
					"type": "string"
				}
			}
		},
		"AccessProductUpdateRequest": {
			"description": "Information for an access product.",
			"type": "object",
			"properties": {
				"ContentHostUrl": {
					"description": "The host URL for the content.",
					"type": "string"
				}
			}
		},
		"ConferenceProductUpdateRequest": {
			"description": "Information for a conference product.",
			"type": "object",
			"properties": {
				"SessionSelectionOpens": {
					"format": "date-time",
					"description": "Date session selection (registration) opens",
					"type": "string"
				},
				"ConfirmationMessage": {
					"description": "Confirmation message to display to the customer after completing registration",
					"type": "string"
				}
			}
		},
		"SearchResult[ProductSummary]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ProductSummary"
					}
				}
			}
		},
		"ProductSummary": {
			"description": "Basic summary information about a product.",
			"type": "object",
			"properties": {
				"ItemNumber": {
					"description": "The item number uniquely identifies a product",
					"type": "string"
				},
				"Name": {
					"description": "The name of the product",
					"type": "string"
				},
				"Type": {
					"description": "The type of product.",
					"enum": [
						"Product",
						"Subscription",
						"Access",
						"Conference",
						"BackIssue",
						"Package",
						"Unknown",
						"Membership",
						"Donation",
						"PrintJob",
						"Reprint",
						"Service",
						"Stock"
					],
					"type": "string"
				}
			}
		},
		"OrderLineForecast": {
			"description": "Information for forecasting the price of an item in an order.",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "(Required) Customer Number of the customer that will be making the order. This customer\r\nwill serve as both the billing and ship to customer.",
					"type": "string"
				},
				"PromotionCode": {
					"description": "(Required) Promotion Code that will be used on the order line.",
					"type": "string"
				},
				"BillingCurrencyCode": {
					"description": "(Required) The currency that will be used on the order line.",
					"type": "string"
				},
				"Quantity": {
					"format": "int32",
					"description": "(Optional) The quantity of the item that will be ordered. Defaults to 1.",
					"type": "integer"
				},
				"PromotionChoiceCode": {
					"description": "(Optional) Promotion Choice that will be used on the order line.",
					"type": "string"
				}
			}
		},
		"ItemPrice": {
			"description": "Unit Price information",
			"type": "object",
			"properties": {
				"Amount": {
					"format": "double",
					"description": "Unit Price amount.",
					"type": "number"
				},
				"TotalDiscountPercent": {
					"format": "double",
					"description": "The total percentage of the discounts applied to the item price.\r\nA 40% discount is indicated by a value of 40.",
					"type": "number"
				},
				"Discounts": {
					"description": "The discounts that were applied to determine this item's price.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ItemDiscount"
					}
				}
			}
		},
		"ItemDiscount": {
			"description": "Information about a discount that was applied to an item.",
			"type": "object",
			"properties": {
				"Source": {
					"description": "Discount source code.",
					"enum": [
						"AssociationClientProgramDiscount",
						"AgencyDiscount",
						"NoDiscountAssociationComponent",
						"CustomerDiscount",
						"DropShipmentDiscount",
						"DonorTypeDiscount",
						"ItemMaximumDiscount",
						"IndividualItemDiscount",
						"NoDiscountFromListPrice",
						"OrderDefaultDiscount",
						"OrderVolumeDiscount",
						"ProformaActivationDiscount",
						"PromotionDiscount",
						"VolumeDiscount",
						"RenewalChainRepeatedDiscount",
						"ContributorVolumeDiscount",
						"AutoRenewChainChoiceDiscount",
						"NoBookClubDiscount",
						"CouponDiscount",
						"AssociationBenefitDiscount"
					],
					"type": "string"
				},
				"Percent": {
					"format": "double",
					"description": "The percentage of the discount applied to the item price.\r\nA 40% discount is indicated by a value of 40.",
					"type": "number"
				},
				"CombinationCode": {
					"description": "The discount combination code, indicating how the discount is combined with other discounts.",
					"enum": [
						"Compound",
						"Add",
						"UseSmaller",
						"UseGreater",
						"UseFirst",
						"UseSecond",
						"UseFirstOrDefault",
						"UseSecondOrDefault"
					],
					"type": "string"
				}
			}
		},
		"ProductSearchFilter": {
			"description": "Information for filtering a product search.",
			"type": "object",
			"properties": {
				"MatchType": {
					"description": "The type of matching to use for the search.",
					"enum": [
						"AllWords",
						"AnyWords",
						"EntirePhrase",
						"Prefix"
					],
					"type": "string"
				},
				"OrderBy": {
					"description": "The type of ordering on the search.",
					"enum": [
						"Title",
						"TitleDescending",
						"ListPrice",
						"ListPriceDescending",
						"Popularity",
						"PopularityDescending",
						"ItemNumber",
						"ItemNumberDescending",
						"DatePublished",
						"DatePublishedDescending"
					],
					"type": "string"
				},
				"SubjectTreeLevelId": {
					"description": "The ID of the subject tree level to search.",
					"type": "string"
				},
				"SalesAnalysisCategoryCode": {
					"description": "Restrict search to products within the given sales analysis code (or blank).",
					"type": "string"
				},
				"OwningOrganizationCode": {
					"description": "Owning organizations to filter by.",
					"type": "string"
				},
				"ProductTypes": {
					"description": "List of product types to include in search. If null, all product types are included.",
					"type": "array",
					"items": {
						"enum": [
							"Product",
							"Subscription",
							"Access",
							"Conference",
							"BackIssue",
							"Package",
							"Unknown",
							"Membership",
							"Donation",
							"PrintJob",
							"Reprint",
							"Service",
							"Stock"
						],
						"type": "string"
					}
				}
			}
		},
		"SearchResult[Product]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Product"
					}
				}
			}
		},
		"SearchResult[ProductContribution]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ProductContribution"
					}
				}
			}
		},
		"ProductContribution": {
			"description": "Information about a product a customer is a contributor on.",
			"type": "object",
			"properties": {
				"ContributorTypeCode": {
					"description": "Contributor Type",
					"type": "string"
				},
				"Summary": {
					"$ref": "#/definitions/ProductSummary",
					"description": "Product Summary"
				}
			}
		},
		"GiftMessageSupportResponse": {
			"description": "Gift Message Support Response",
			"type": "object",
			"properties": {
				"IsGiftMessageAllowed": {
					"description": "Are gift messages allowed?",
					"type": "boolean"
				}
			}
		},
		"ProductInventory": {
			"description": "Information pertaining to a product inventory status. \r\nQuantityAvailable and EstimatedShipDate are optionally used, depending on the Status.",
			"type": "object",
			"properties": {
				"Status": {
					"description": "The inventory stock status (in stock, back-ordered, pre-publication, discontinued).",
					"enum": [
						"InStock",
						"Backordered",
						"PrePublication",
						"Discontinued",
						"Available",
						"Unavailable"
					],
					"type": "string"
				},
				"QuantityAvailable": {
					"format": "int32",
					"description": "The quantity of the product currently available.",
					"type": "integer"
				},
				"EstimatedShipDate": {
					"format": "date-time",
					"description": "The estimated shipping date.",
					"type": "string"
				}
			}
		},
		"ReceiptItemInventoryReceiptCreateRequest": {
			"description": "Information for creating a new inventory receipt, of type Receipt (R), for an item.",
			"type": "object",
			"properties": {
				"TotalCost": {
					"format": "double",
					"description": "Total Cost",
					"type": "number"
				},
				"TotalUnits": {
					"format": "double",
					"description": "Total Units",
					"type": "number"
				},
				"Comments": {
					"description": "Comments on the receipt",
					"type": "string"
				},
				"ReceiptDate": {
					"format": "date-time",
					"description": "Date of receipt",
					"type": "string"
				},
				"ReceivingBin": {
					"description": "Receiving Warehouse Bin Code",
					"type": "string"
				}
			}
		},
		"ItemInventoryReceiptResponse": {
			"description": "Information pertaining to a item inventory receipt.",
			"type": "object",
			"properties": {
				"Comments": {
					"description": "Comments",
					"type": "string"
				},
				"CostCurrency": {
					"description": "Entry Currency",
					"type": "string"
				},
				"IsZeroCostHold": {
					"description": "Hold if Zero Cost?",
					"type": "boolean"
				},
				"ReceiptDate": {
					"format": "date-time",
					"description": "Receipt Date",
					"type": "string"
				},
				"ReceiptValue": {
					"description": "The Purchase Order number, Job Number, or Receipt Number.",
					"type": "string"
				},
				"ReceivingNumber": {
					"format": "double",
					"description": "Receiving Number",
					"type": "number"
				},
				"TotalCost": {
					"format": "double",
					"description": "Total Cost",
					"type": "number"
				},
				"TotalUnits": {
					"format": "double",
					"description": "Total Units",
					"type": "number"
				}
			}
		},
		"PurchaseOrderItemInventoryReceiptCreateRequest": {
			"description": "Information for creating a new inventory receipt, of type Purchase Order (P), for an item.",
			"type": "object",
			"properties": {
				"QuantityReceived": {
					"format": "int32",
					"description": "The inventory quantity that has been received from the manufacturer.\r\nIf no quantity is entered, the total units on the inventory receipt\r\nwill be used.",
					"type": "integer"
				},
				"Comments": {
					"description": "Comments on the receipt",
					"type": "string"
				},
				"ReceiptDate": {
					"format": "date-time",
					"description": "Date of receipt",
					"type": "string"
				},
				"ReceivingBin": {
					"description": "Receiving Warehouse Bin Code",
					"type": "string"
				}
			}
		},
		"ItemInventoryReceipt": {
			"description": "Information pertaining to a item inventory receipt.",
			"type": "object",
			"properties": {
				"Comments": {
					"description": "Comments",
					"type": "string"
				},
				"CostCurrency": {
					"description": "Entry Currency",
					"type": "string"
				},
				"IsZeroCostHold": {
					"description": "Hold if Zero Cost?",
					"type": "boolean"
				},
				"ReceiptDate": {
					"format": "date-time",
					"description": "Receipt Date",
					"type": "string"
				},
				"ReceiptValue": {
					"description": "The Purchase Order number, Job Number, or Receipt Number.",
					"type": "string"
				},
				"ReceivingNumber": {
					"format": "double",
					"description": "Receiving Number",
					"type": "number"
				},
				"TotalCost": {
					"format": "double",
					"description": "Total Cost",
					"type": "number"
				},
				"TotalUnits": {
					"format": "double",
					"description": "Total Units",
					"type": "number"
				}
			}
		},
		"InventoryAdjustmentRequest": {
			"description": "Information on a request to create an inventory adjustment",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The adjustment code indicates what inventory adjustment is being made",
					"type": "string"
				},
				"Quantity": {
					"format": "double",
					"description": "Quantity being adjusted",
					"type": "number"
				},
				"Comment": {
					"description": "Comments on the adjustment",
					"type": "string"
				},
				"Bin": {
					"description": "The bin the adjustment is taking place.",
					"type": "string"
				}
			}
		},
		"InventoryAdjustmentResponse": {
			"description": "The reasponse to an inventory adjustment",
			"type": "object",
			"properties": {
				"TransactionNumber": {
					"description": "Adjustment transaction number",
					"type": "string"
				},
				"Code": {
					"description": "The adjustment code indicates what inventory adjustment is being made",
					"type": "string"
				},
				"Quantity": {
					"format": "double",
					"description": "Quantity being adjusted",
					"type": "number"
				},
				"Comment": {
					"description": "Comments on the adjustment",
					"type": "string"
				},
				"Bin": {
					"description": "The bin the adjustment is taking place.",
					"type": "string"
				}
			}
		},
		"InventoryAdjustment": {
			"description": "Information about an inventory adjustment",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The adjustment code indicates what inventory adjustment is being made",
					"type": "string"
				},
				"Quantity": {
					"format": "double",
					"description": "Quantity being adjusted",
					"type": "number"
				},
				"Comment": {
					"description": "Comments on the adjustment",
					"type": "string"
				},
				"Bin": {
					"description": "The bin the adjustment is taking place.",
					"type": "string"
				}
			}
		},
		"ProductReviewCreateRequest": {
			"description": "Information for creating a Product Review",
			"type": "object",
			"properties": {
				"Rating": {
					"format": "int32",
					"description": "Star Rating",
					"type": "integer"
				},
				"ReviewText": {
					"description": "Text of the review",
					"type": "string"
				},
				"Date": {
					"format": "date-time",
					"description": "Reviewed On Date",
					"type": "string"
				}
			}
		},
		"ProductReviewUpdateRequest": {
			"description": "Information for updating a Product Review",
			"type": "object",
			"properties": {
				"Rating": {
					"format": "int32",
					"description": "Star Rating",
					"type": "integer"
				},
				"ReviewText": {
					"description": "Text of the review",
					"type": "string"
				}
			}
		},
		"ProductReview": {
			"description": "Information about a product review",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "Customer Number",
					"type": "string"
				},
				"Rating": {
					"format": "int32",
					"description": "Star Rating",
					"type": "integer"
				},
				"ReviewText": {
					"description": "Text of the review",
					"type": "string"
				},
				"Date": {
					"format": "date-time",
					"description": "Reviewed On Date",
					"type": "string"
				}
			}
		},
		"ProfileResponse": {
			"description": "The response object received when creating a profile.",
			"type": "object",
			"properties": {
				"ProfileId": {
					"description": "The ID of the created profile.",
					"type": "string"
				}
			}
		},
		"PromotionCreateRequest": {
			"description": "Information for creating a new promotion.",
			"type": "object",
			"properties": {
				"PromotionCode": {
					"description": "The promotion code to identify the new promotion.",
					"type": "string"
				},
				"CampaignCode": {
					"description": "The campaign code to identify the highest level of marketing and promotion tracking.",
					"type": "string"
				},
				"OfferCode": {
					"description": "The offer code to identify the promotion offer.",
					"type": "string"
				},
				"IsActive": {
					"description": "Is the promotion available for use?",
					"type": "boolean"
				},
				"NameLine1": {
					"description": "The first line of the name of the promotion.",
					"type": "string"
				},
				"NameLine2": {
					"description": "The second line of the name of the promotion.",
					"type": "string"
				},
				"Initiator": {
					"description": "The initiator of the promotion.",
					"type": "string"
				},
				"Url": {
					"description": "The URL to direct to the promotion landing page.",
					"type": "string"
				},
				"Narratives": {
					"description": "Optional text describing a promotion, defined for each type of narrative (e.g. mobile, desktop).",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Narrative"
					}
				},
				"DateSent": {
					"format": "date-time",
					"description": "The date the promotion was sent to consumers.",
					"type": "string"
				},
				"EffectiveTo": {
					"format": "date-time",
					"description": "Date, up to which, the promotion is valid",
					"type": "string"
				},
				"EffectiveFrom": {
					"format": "date-time",
					"description": "Date, from which, the promotion is valid",
					"type": "string"
				},
				"CreativeKey": {
					"$ref": "#/definitions/PromotionCreativeKey",
					"description": "Information to uniquely identify the promotion creative associated with this promotion"
				},
				"ValueList": {
					"description": "Determines if value will be displayed in value list for\r\npromotion items",
					"type": "boolean"
				}
			}
		},
		"PromotionCreativeKey": {
			"description": "Information needed to uniquely identify a promotion creative.",
			"type": "object",
			"properties": {
				"CreativeCode": {
					"description": "The code identifying the promotion creative",
					"type": "string"
				},
				"Version": {
					"format": "int32",
					"description": "Number used to identify historical versions of a creative",
					"type": "integer"
				}
			}
		},
		"PromotionComparison": {
			"description": "Data transfer object for promotion search expressions",
			"type": "object",
			"properties": {
				"Field": {
					"description": "Name of field in table to compare",
					"enum": [
						"PromotionCode",
						"ItemNumber"
					],
					"type": "string"
				},
				"Operator": {
					"description": "Operator to use in comparison",
					"enum": [
						"Equal",
						"NotEqual",
						"Less",
						"LessOrEqual",
						"Greater",
						"GreaterOrEqual",
						"IsNull",
						"IsNotNull",
						"Like",
						"NotLike",
						"Contains",
						"NotContains",
						"StartsWith",
						"NotStartsWith",
						"EndsWith",
						"NotEndsWith",
						"In",
						"Between"
					],
					"type": "string"
				},
				"Value": {
					"description": "Value to compare the field to; specify comma separated values if the operator is \"In\"",
					"type": "string"
				}
			}
		},
		"SearchResultWithCount[PromotionSummary]": {
			"description": "The Order History response.",
			"type": "object",
			"properties": {
				"TotalCount": {
					"format": "int32",
					"description": "Gets the total number of orders found for the given customer.",
					"type": "integer"
				},
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PromotionSummary"
					}
				}
			}
		},
		"PromotionSummary": {
			"description": "Summary information for a promotion.",
			"type": "object",
			"properties": {
				"PromotionCode": {
					"description": "The code identifying the promotion.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the promotion.",
					"type": "string"
				},
				"Name2": {
					"description": "The second name of the promotion.",
					"type": "string"
				},
				"EffectiveTo": {
					"format": "date-time",
					"description": "The date that the promotion expires.",
					"type": "string"
				},
				"Url": {
					"description": "The URL for the promotion landing page.",
					"type": "string"
				},
				"ImagePath": {
					"description": "The URL for the image associated with the promotion.",
					"type": "string"
				},
				"IsActive": {
					"description": "Is this an active promotion?",
					"type": "boolean"
				}
			}
		},
		"PromotionUpdateRequest": {
			"description": "Information for updating an existing promotion.",
			"type": "object",
			"properties": {
				"Name": {
					"description": "The first line of the name of the promotion.",
					"type": "string"
				},
				"Name2": {
					"description": "The second line of the name of the promotion.",
					"type": "string"
				},
				"DateSent": {
					"format": "date-time",
					"description": "The date the promotion was sent to consumers.",
					"type": "string"
				},
				"EffectiveTo": {
					"format": "date-time",
					"description": "Date, up to which, the promotion is valid",
					"type": "string"
				},
				"EffectiveFrom": {
					"format": "date-time",
					"description": "Date, from which, the promotion is valid",
					"type": "string"
				},
				"Initiator": {
					"description": "The initiator of the promotion.",
					"type": "string"
				},
				"CreativeKey": {
					"$ref": "#/definitions/PromotionCreativeKey",
					"description": "Information to uniquely identify the promotion creative associated with this promotion"
				},
				"ValueList": {
					"description": "Determines if value will be displayed in value list for\r\npromotion items",
					"type": "boolean"
				}
			}
		},
		"Promotion": {
			"description": "Information for a promotional effort.",
			"type": "object",
			"properties": {
				"PromotionCode": {
					"description": "The code identifying the promotion.",
					"type": "string"
				},
				"CampaignCode": {
					"description": "The campaign code to identify the highest level of marketing and promotion tracking.",
					"type": "string"
				},
				"OfferCode": {
					"description": "The offer code to identify the promotion offer, which handles setup and defaulting for the promotion.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the promotion.",
					"type": "string"
				},
				"Name2": {
					"description": "The second name of the promotion.",
					"type": "string"
				},
				"ValidUntil": {
					"format": "date-time",
					"description": "The date that the promotion expires.",
					"type": "string"
				},
				"Url": {
					"description": "The URL for the promotion landing page.",
					"type": "string"
				},
				"ImageUrl": {
					"description": "The URL for the image associated with the promotion.",
					"type": "string"
				},
				"IsActive": {
					"description": "Is this an active promotion?",
					"type": "boolean"
				},
				"IsAutoOrder": {
					"description": "Does this promotion allow for automatic generation of orders? \r\nIf so, an order will be automatically generated with order lines for each promotional item on the promotion.",
					"type": "boolean"
				},
				"IsLineSelect": {
					"description": "Is this a line select promotion? If so, the user selects the promotional items to receive.",
					"type": "boolean"
				},
				"DateSent": {
					"format": "date-time",
					"description": "The date the promotion was sent to consumers.",
					"type": "string"
				},
				"EffectiveTo": {
					"format": "date-time",
					"description": "Date, up to which, the promotion is valid.",
					"type": "string"
				},
				"EffectiveFrom": {
					"format": "date-time",
					"description": "Date, from which, the promotion is valid.",
					"type": "string"
				},
				"Initiator": {
					"description": "The initiator of the promotion.",
					"type": "string"
				},
				"Products": {
					"description": "Products that are included on the promotion with promotion-specific choices.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PromotionProduct"
					}
				},
				"Narratives": {
					"description": "Promotion narratives are text blocks describing the promotion.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Narrative"
					}
				},
				"ValidCards": {
					"description": "Valid credit card payment methods.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CreditCardPaymentMethod"
					}
				},
				"ValidDirectDebits": {
					"description": "Valid direct debit payment methods.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DirectDebitPaymentMethod"
					}
				},
				"ValidDigitalWallets": {
					"description": "Valid digital wallet payment methods",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DigitalWalletPaymentMethod"
					}
				},
				"InstallmentBillingCode": {
					"description": "Installment Billing Code on the promotion if any",
					"type": "string"
				},
				"WebBillMeAllowed": {
					"description": "Web bill-me status of the promotion",
					"enum": [
						"Yes",
						"No",
						"Assumed"
					],
					"type": "string"
				},
				"CreativeKey": {
					"$ref": "#/definitions/PromotionCreativeKey",
					"description": "Information to uniquely identify the promotion creative associated with this promotion"
				},
				"QuantityMailed": {
					"format": "int32",
					"description": "Quantity mailed from the promotion",
					"type": "integer"
				},
				"AvailableCreditsValid": {
					"description": "Are available credits valid for this promotion?",
					"type": "boolean"
				},
				"CreditCardPaymentsValid": {
					"description": "Are credit card payments valid for this promotion?",
					"type": "boolean"
				},
				"ChecksValid": {
					"description": "Are check payments valid for this promotion?",
					"type": "boolean"
				},
				"DirectDebitPaymentsValid": {
					"description": "Are direct debit payments valid for this promotion?",
					"type": "boolean"
				},
				"DigitalWalletPaymentsValid": {
					"description": "Are digital wallet payments valid for this promotion?",
					"type": "boolean"
				},
				"GiftCertificatesValid": {
					"description": "Are gift certificate payments valid for this promotion?",
					"type": "boolean"
				},
				"MiscCreditsValid": {
					"description": "Are misc credit payments valid for this promotion?",
					"type": "boolean"
				},
				"ValidCountryCodes": {
					"description": "A list of Advantage country codes representing\r\nthe countries a ship to address can have to be \r\napplicable for this promotion.\r\nIf empty, then all countries are valid.",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ValueList": {
					"description": "Determines if value will be displayed in value list for\r\npromotion items",
					"type": "boolean"
				}
			}
		},
		"PromotionProduct": {
			"description": "Information for a promotional product.",
			"type": "object",
			"properties": {
				"ItemNumber": {
					"description": "The item number of the promotional product.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the promotional product.",
					"type": "string"
				},
				"ProductType": {
					"description": "The type of product of the promotional product.",
					"enum": [
						"Product",
						"Subscription",
						"Access",
						"Conference",
						"BackIssue",
						"Package",
						"Unknown",
						"Membership",
						"Donation",
						"PrintJob",
						"Reprint",
						"Service",
						"Stock"
					],
					"type": "string"
				},
				"Choices": {
					"description": "The choices contained by the promotion product.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PromotionChoice"
					}
				}
			}
		},
		"PromotionChoice": {
			"description": "Fields common to all promotion items.",
			"type": "object",
			"properties": {
				"ItemNumber": {
					"description": "A product item number.",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "Billing currency code.",
					"type": "string"
				},
				"PromotionCode": {
					"description": "The promotion code that this choice belongs to.",
					"type": "string"
				},
				"ChoiceCode": {
					"description": "The promotion choice code.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the promotion choice.",
					"type": "string"
				},
				"Narrative": {
					"description": "The narrative of the choice.",
					"type": "string"
				},
				"Preference": {
					"format": "int32",
					"description": "The preference level (sort order) of the promotion choice.",
					"type": "integer"
				},
				"QuestionnaireCode": {
					"description": "The code for the extended demographics questionnaire.",
					"type": "string"
				},
				"ValueListFlag": {
					"description": "Determines if value will be displayed in value list for promotion items.",
					"type": "string"
				},
				"Price": {
					"format": "double",
					"description": "The price of the product using this promotion choice. This may include discounts",
					"type": "number"
				},
				"UnitPrice": {
					"format": "double",
					"description": "The price on this promotion choice",
					"type": "number"
				},
				"PriceTiers": {
					"description": "Price tiers",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PriceTier"
					}
				},
				"WebBillMeAllowed": {
					"description": "Is bill me allowed from the web?",
					"enum": [
						"Yes",
						"No",
						"Assumed"
					],
					"type": "string"
				},
				"PremiumSetCode": {
					"description": "A product that a customer can receive for free and what must be done to earn it.",
					"type": "string"
				},
				"InstallmentBillingCode": {
					"description": "The installment billing terms used.",
					"type": "string"
				},
				"SocietyCode": {
					"description": "A professional association which may be the source of content and typically involves membership levels and fees.",
					"type": "string"
				},
				"DiscountPercent": {
					"format": "double",
					"description": "The percentage discount is applied to the item price.  A 40% discount is entered as 40.",
					"type": "number"
				},
				"DiscountCombinationCode": {
					"description": "Indicates how to combine this discount with other discounts.",
					"enum": [
						"Compound",
						"Add",
						"UseSmaller",
						"UseGreater",
						"UseFirst",
						"UseSecond",
						"UseFirstOrDefault",
						"UseSecondOrDefault"
					],
					"type": "string"
				},
				"SubscriptionTypeCode": {
					"description": "A code for describing a group of similar subscriptions.",
					"type": "string"
				},
				"ReusableChoiceCode": {
					"description": "The code identifying the module-specific reusable choice that this promotion choice pulls it's defaults from.",
					"type": "string"
				},
				"IncludedAmount": {
					"format": "double",
					"description": "The amount of a subscription charge that is for a premium's postage.",
					"type": "number"
				},
				"Demographics": {
					"description": "Demographic values (from the PMI-DMO1, PMI-DMO2, etc partitions) to store on the\r\npromotion item record.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DemographicValue"
					}
				},
				"ProductDefaults": {
					"$ref": "#/definitions/ProductPromotionItemDefaults",
					"description": "PRO specific promotion choice defaults."
				},
				"SubscriptionDefaults": {
					"$ref": "#/definitions/SubscriptionPromotionItemDefaults",
					"description": "Cir specific promotion choice defaults."
				},
				"AccessDefaults": {
					"$ref": "#/definitions/AccessPromotionItemDefaults",
					"description": "AMB specific promotion choice defaults."
				},
				"ConferenceDefaults": {
					"$ref": "#/definitions/ConferencePromotionItemDefaults",
					"description": "CEM specific promotion choice defaults."
				},
				"AssociationDefaults": {
					"$ref": "#/definitions/AssociationPromotionItemDefaults",
					"description": "AMM specific promotion choice defaults."
				},
				"AcceptAvailableCredits": {
					"description": "Value of Available Credit Valid",
					"type": "boolean"
				},
				"AcceptChecks": {
					"description": "Value of Checks Valid",
					"type": "boolean"
				},
				"AcceptCreditCards": {
					"description": "Value of Credit Card Payments valid",
					"type": "boolean"
				},
				"AcceptDirectDebits": {
					"description": "Value of Direct Debit Payments valid",
					"type": "boolean"
				},
				"AcceptDigitalWallets": {
					"description": "Value of Digital Wallet Payments valid",
					"type": "boolean"
				},
				"AcceptGiftCertificates": {
					"description": "Value of Gift Certificates Valid",
					"type": "boolean"
				},
				"AcceptMiscCredits": {
					"description": "Value of Misc Credits Valid",
					"type": "boolean"
				},
				"GeographicPrices": {
					"description": "Geographic Prices",
					"type": "array",
					"items": {
						"$ref": "#/definitions/GeographicPrice"
					}
				},
				"Components": {
					"description": "Package Components",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PromotionChoice"
					}
				}
			}
		},
		"PriceTier": {
			"description": "Pricing tiers allow for varying the unit price based on the quantity ordered.",
			"type": "object",
			"properties": {
				"Quantity": {
					"format": "int32",
					"description": "The quantity at which to begin using this pricing tier.",
					"type": "integer"
				},
				"Price": {
					"format": "double",
					"description": "The unit price for an item at this pricing tier.",
					"type": "number"
				}
			}
		},
		"ProductPromotionItemDefaults": {
			"description": "Information for a promotion item choice for a product.",
			"type": "object",
			"properties": {
				"ReturnsAllowed": {
					"description": "Are returns allowed when using this promotion item choice?",
					"type": "boolean"
				},
				"Quantity": {
					"format": "int32",
					"description": "What is the default quantity for this promotion item",
					"type": "integer"
				},
				"PriceTiers": {
					"description": "Pricing information for the promotion item choice.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PriceTier"
					}
				}
			}
		},
		"SubscriptionPromotionItemDefaults": {
			"description": "Information for a promotion item for a subscription.",
			"type": "object",
			"properties": {
				"StartIssueDate": {
					"format": "date-time",
					"description": "The issue date of the first issue of a subscription or renewal.",
					"type": "string"
				},
				"AlternateQuestionnaireCode": {
					"description": "An extended demographics questionnaire.",
					"type": "string"
				},
				"BasicRateCategoryCode": {
					"description": "Categorizes basic rate structures within a publication and billing currency.",
					"type": "string"
				},
				"EditionTypeCode": {
					"description": "Edition type.",
					"type": "string"
				},
				"EditionCode": {
					"description": "Edition code.",
					"type": "string"
				},
				"AlternateDeliveryIndicator": {
					"description": "How a subscription participates with alternate delivery.",
					"enum": [
						"Confirming",
						"DeferredStart",
						"InError",
						"No",
						"Override",
						"RequestPermissionDetails",
						"Undeliverable",
						"InWaiting",
						"Excluded",
						"Yes"
					],
					"type": "string"
				},
				"IssueGroupCode": {
					"description": "Issue group.",
					"type": "string"
				},
				"IsTrial": {
					"description": "Whether or not the subscription will begin as a trial subscription",
					"type": "boolean"
				},
				"CreditPolicyCode": {
					"description": "Defines how credits are created when a sub is canceled.",
					"type": "string"
				},
				"SubscriptionClass": {
					"description": "The type of subscription.",
					"enum": [
						"Regular",
						"DelayedStart",
						"MonthlyInvoiced",
						"Perpetual",
						"QualifiedNonpaid",
						"Agreement"
					],
					"type": "string"
				},
				"TermLength": {
					"format": "int32",
					"description": "The number of issues included in the subscription order.",
					"type": "integer"
				},
				"RenewalPolicyCode": {
					"description": "Indicates whether a renewal notice should be sent to the subscriber.",
					"type": "string"
				},
				"FreeIssues": {
					"format": "int32",
					"description": "Number of free issues to give at the beginning of the subscription.",
					"type": "integer"
				},
				"DeliveryCode": {
					"description": "The postal delivery method.",
					"type": "string"
				},
				"AutoRenewalChainId": {
					"description": "The auto-renewal chain ID.",
					"type": "string"
				},
				"AutoRenewalPromotionCode": {
					"description": "The auto-renewal promotion code.",
					"type": "string"
				}
			}
		},
		"AccessPromotionItemDefaults": {
			"description": "Information for a promotion choice item for an agreement.",
			"type": "object",
			"properties": {
				"EarningPeriodCode": {
					"description": "Timespan over which liability is earned. This is independent of the access period.",
					"type": "string"
				},
				"IsUsageBased": {
					"description": "Does the agreement limit the participant's access based on how many times the participant accesses the content?",
					"type": "boolean"
				},
				"IsTrialTerm": {
					"description": "Does the promotion include a trial term (term 0)?",
					"type": "boolean"
				},
				"ComplimentaryReasonCode": {
					"description": "Explains why an agreement is complimentary.",
					"type": "string"
				},
				"FreeDays": {
					"format": "int32",
					"description": "The number of days of free access an agreement gets before it starts.",
					"type": "integer"
				},
				"ExtensionDays": {
					"format": "int32",
					"description": "The number of days of free access an agreement gets after it expires.",
					"type": "integer"
				},
				"IsExcludedFromAutoSuspend": {
					"description": "Is this promotion excluded from auto-suspend?",
					"type": "boolean"
				},
				"QuantityOrdered": {
					"format": "int32",
					"description": "The number of units the customer ordered.",
					"type": "integer"
				},
				"PricingMethod": {
					"description": "An agreement specific pricing method.",
					"enum": [
						"AgreementBased",
						"ParticipantBased",
						"QuantityBased"
					],
					"type": "string"
				},
				"RenewalPolicyCode": {
					"description": "Renewal status of the agreement. Specifies whether a renewal notice should be sent to the subscriber.",
					"type": "string"
				},
				"AccessPeriodCode": {
					"description": "Length of the agreement.",
					"type": "string"
				},
				"MaximumParticipants": {
					"format": "int32",
					"description": "The maximum number of participants that can be linked to an agreement.",
					"type": "integer"
				},
				"CreditPolicyCode": {
					"description": "Defines how credits are created when a sub is canceled.",
					"type": "string"
				},
				"AutoRenewalChainId": {
					"description": "The auto-renewal chain ID.",
					"type": "string"
				},
				"AutoRenewalPromotionCode": {
					"description": "The auto-renewal promotion code.",
					"type": "string"
				}
			}
		},
		"ConferencePromotionItemDefaults": {
			"description": "Information for a promotion choice for a conference",
			"type": "object",
			"properties": {
				"LocationCode": {
					"description": "The conference location",
					"type": "string"
				},
				"BillBy": {
					"description": "BillBy method for the conference. R - Registration, A - Attendee",
					"enum": [
						"Registration",
						"Attendee"
					],
					"type": "string"
				},
				"Sessions": {
					"description": "A list of sessions associated with this choice",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ConferencePromotionChoiceSession"
					}
				}
			}
		},
		"AssociationPromotionItemDefaults": {
			"description": "Information for a promotion item for an association membership.",
			"type": "object",
			"properties": {
				"AssociationLevelCode": {
					"description": "The level of the association",
					"type": "string"
				},
				"ServicePeriodCode": {
					"description": "The service period",
					"type": "string"
				}
			}
		},
		"GeographicPrice": {
			"description": "An object containing the Geographic Price data for a promotion choice",
			"type": "object",
			"properties": {
				"CountryCode": {
					"description": "Country Code",
					"type": "string"
				},
				"StateCode": {
					"description": "State or Province code",
					"type": "string"
				},
				"RateZoneCode": {
					"description": "Rate Zone Code",
					"type": "string"
				},
				"Rate": {
					"format": "double",
					"description": "The Rate",
					"type": "number"
				},
				"PriceCode": {
					"description": "Price Code",
					"type": "string"
				},
				"BasicRateCategoryCode": {
					"description": "The Basic Rate Category Code",
					"type": "string"
				}
			}
		},
		"ConferencePromotionChoiceSession": {
			"description": "Information about a session associated with a conference choice",
			"type": "object",
			"properties": {
				"Quantity": {
					"format": "int32",
					"description": "Value of Quantity",
					"type": "integer"
				},
				"PriceCode": {
					"description": "Value of Rate Code",
					"type": "string"
				},
				"SessionCode": {
					"description": "Value of Session ID",
					"type": "string"
				},
				"UnitPriceOverride": {
					"format": "double",
					"description": "Value of Unit Price",
					"type": "number"
				},
				"OverrideReasonCode": {
					"description": "Value of Override Reason",
					"type": "string"
				}
			}
		},
		"PromotionSource": {
			"description": "Information for a promotion source.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The promotion Source (the first letter of a promotion code).",
					"type": "string"
				},
				"SourceAllowed": {
					"description": "Whether or not the promotion source may be used for user-entered promotions.",
					"enum": [
						"Allowed",
						"AllowedWithWarning",
						"Restricted"
					],
					"type": "string"
				},
				"Name": {
					"description": "The name of the promotion source.",
					"type": "string"
				},
				"Description": {
					"description": "The promotion source text.",
					"type": "string"
				}
			}
		},
		"PromotionChoiceCreateRequest": {
			"description": "Information for creating a new promotion choice.",
			"type": "object",
			"properties": {
				"ItemNumber": {
					"description": "A product item number.",
					"type": "string"
				},
				"ChoiceCode": {
					"description": "The promotion choice code.",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "Billing currency code.",
					"type": "string"
				},
				"ChoiceSettings": {
					"$ref": "#/definitions/PromotionChoiceIn",
					"description": "Non-primary-key Information for creating or updating a promotion choice."
				}
			}
		},
		"PromotionChoiceIn": {
			"description": "All non-primary key fields for a promotion choice. Used as part of promotion choice update and create requests.",
			"type": "object",
			"properties": {
				"Name": {
					"description": "The name of the promotion choice.",
					"type": "string"
				},
				"Narrative": {
					"description": "The narrative of the choice.",
					"type": "string"
				},
				"Preference": {
					"format": "int32",
					"description": "The preference of the promotion choice.",
					"type": "integer"
				},
				"QuestionnaireCode": {
					"description": "The code for the extended demographics questionnaire.",
					"type": "string"
				},
				"ValueListFlag": {
					"description": "Determines if value will be displayed in value list for promotion items.",
					"type": "string"
				},
				"Price": {
					"format": "double",
					"description": "Deprecated as of 2016.6, Use UnitPrice instead.",
					"type": "number"
				},
				"UnitPrice": {
					"format": "double",
					"description": "The price of the product using this promotion choice.",
					"type": "number"
				},
				"WebBillMeAllowed": {
					"description": "Is bill me allowed from the web?",
					"enum": [
						"Yes",
						"No",
						"Assumed"
					],
					"type": "string"
				},
				"PremiumSetCode": {
					"description": "A product that a customer can receive for free and what must be done to earn it.",
					"type": "string"
				},
				"InstallmentBillingCode": {
					"description": "The installment billing terms used.",
					"type": "string"
				},
				"SocietyCode": {
					"description": "A professional association which may be the source of content and typically involves membership levels and fees.",
					"type": "string"
				},
				"DiscountPercent": {
					"format": "double",
					"description": "The percentage discount is applied to the item price.  A 40% discount is entered as 40.",
					"type": "number"
				},
				"DiscountCombinationCode": {
					"description": "Indicates how to combine this discount with other discounts.",
					"enum": [
						"Compound",
						"Add",
						"UseSmaller",
						"UseGreater",
						"UseFirst",
						"UseSecond",
						"UseFirstOrDefault",
						"UseSecondOrDefault"
					],
					"type": "string"
				},
				"SubscriptionTypeCode": {
					"description": "A code for describing a group of similar subscriptions.",
					"type": "string"
				},
				"ReusableChoiceCode": {
					"description": "The code identifying the module-specific reusable choice that this promotion choice pulls it's defaults from.",
					"type": "string"
				},
				"IncludedAmount": {
					"format": "double",
					"description": "The amount of a subscription charge that is for a premium's postage.",
					"type": "number"
				},
				"PriceCode": {
					"description": "Price Code to be used on the promotion choice",
					"type": "string"
				},
				"Demographics": {
					"description": "Demographic values saved on the promotion item record (CPNPMI-T).",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DemographicValue"
					}
				},
				"ProductDefaults": {
					"$ref": "#/definitions/ProductPromotionItemDefaultsIn",
					"description": "PRO specific promotion choice defaults."
				},
				"SubscriptionDefaults": {
					"$ref": "#/definitions/SubscriptionPromotionItemDefaultsIn",
					"description": "Cir specific promotion choice defaults."
				},
				"AccessDefaults": {
					"$ref": "#/definitions/AccessPromotionItemDefaultsIn",
					"description": "AMB specific promotion choice defaults."
				},
				"ConferenceDefaults": {
					"$ref": "#/definitions/ConferencePromotionItemDefaultsIn",
					"description": "CEM specific promotion choice defaults"
				}
			}
		},
		"ProductPromotionItemDefaultsIn": {
			"description": "Information for a promotion item choice for a product.",
			"type": "object",
			"properties": {
				"ReturnsAllowed": {
					"description": "Are returns allowed when using this promotion item choice?",
					"type": "boolean"
				},
				"Quantity": {
					"format": "int32",
					"description": "What is the default quantity for this promotion item",
					"type": "integer"
				},
				"PriceTiers": {
					"description": "Pricing information for the promotion item choice.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PriceTier"
					}
				}
			}
		},
		"SubscriptionPromotionItemDefaultsIn": {
			"description": "Information for a promotion item for a subscription.",
			"type": "object",
			"properties": {
				"StartIssueDate": {
					"format": "date-time",
					"description": "The issue date of the first issue of a subscription or renewal.",
					"type": "string"
				},
				"AlternateQuestionnaireCode": {
					"description": "An extended demographics questionnaire.",
					"type": "string"
				},
				"BasicRateCategoryCode": {
					"description": "Categorizes basic rate structures within a publication and billing currency.",
					"type": "string"
				},
				"EditionTypeCode": {
					"description": "Edition type.",
					"type": "string"
				},
				"EditionCode": {
					"description": "Edition code.",
					"type": "string"
				},
				"AlternateDeliveryIndicator": {
					"description": "How a subscription participates with alternate delivery.",
					"enum": [
						"Confirming",
						"DeferredStart",
						"InError",
						"No",
						"Override",
						"RequestPermissionDetails",
						"Undeliverable",
						"InWaiting",
						"Excluded",
						"Yes"
					],
					"type": "string"
				},
				"IssueGroupCode": {
					"description": "Issue group.",
					"type": "string"
				},
				"IsTrial": {
					"description": "Whether or not the subscription will begin as a trial subscription",
					"type": "boolean"
				},
				"CreditPolicyCode": {
					"description": "Defines how credits are created when a sub is canceled.",
					"type": "string"
				},
				"SubscriptionClass": {
					"description": "The type of subscription.",
					"enum": [
						"Regular",
						"DelayedStart",
						"MonthlyInvoiced",
						"Perpetual",
						"QualifiedNonpaid",
						"Agreement"
					],
					"type": "string"
				},
				"TermLength": {
					"format": "int32",
					"description": "The number of issues included in the subscription order.",
					"type": "integer"
				},
				"RenewalPolicyCode": {
					"description": "Indicates whether a renewal notice should be sent to the subscriber.",
					"type": "string"
				},
				"FreeIssues": {
					"format": "int32",
					"description": "Number of free issues to give at the beginning of the subscription.",
					"type": "integer"
				},
				"DeliveryCode": {
					"description": "The postal delivery method.",
					"type": "string"
				},
				"AutoRenewalChainId": {
					"description": "The auto-renewal chain ID.",
					"type": "string"
				},
				"AutoRenewalPromotionCode": {
					"description": "The auto-renewal promotion code.",
					"type": "string"
				}
			}
		},
		"AccessPromotionItemDefaultsIn": {
			"description": "Information for a promotion choice item for an agreement.",
			"type": "object",
			"properties": {
				"EarningPeriodCode": {
					"description": "Timespan over which liability is earned. This is independent of the access period.",
					"type": "string"
				},
				"IsUsageBased": {
					"description": "Does the agreement limit the participant's access based on how many times the participant accesses the content?",
					"type": "boolean"
				},
				"IsTrialTerm": {
					"description": "Does the promotion include a trial term (term 0)?",
					"type": "boolean"
				},
				"ComplimentaryReasonCode": {
					"description": "Explains why an agreement is complimentary.",
					"type": "string"
				},
				"FreeDays": {
					"format": "int32",
					"description": "The number of days of free access an agreement gets before it starts.",
					"type": "integer"
				},
				"ExtensionDays": {
					"format": "int32",
					"description": "The number of days of free access an agreement gets after it expires.",
					"type": "integer"
				},
				"IsExcludedFromAutoSuspend": {
					"description": "Is this promotion excluded from auto-suspend?",
					"type": "boolean"
				},
				"QuantityOrdered": {
					"format": "int32",
					"description": "The number of units the customer ordered.",
					"type": "integer"
				},
				"PricingMethod": {
					"description": "An agreement specific pricing method.",
					"enum": [
						"AgreementBased",
						"ParticipantBased",
						"QuantityBased"
					],
					"type": "string"
				},
				"RenewalPolicyCode": {
					"description": "Renewal status of the agreement. Specifies whether a renewal notice should be sent to the subscriber.",
					"type": "string"
				},
				"AccessPeriodCode": {
					"description": "Length of the agreement.",
					"type": "string"
				},
				"MaximumParticipants": {
					"format": "int32",
					"description": "The maximum number of participants that can be linked to an agreement.",
					"type": "integer"
				},
				"CreditPolicyCode": {
					"description": "Defines how credits are created when a sub is canceled.",
					"type": "string"
				},
				"AutoRenewalChainId": {
					"description": "The auto-renewal chain ID.",
					"type": "string"
				},
				"AutoRenewalPromotionCode": {
					"description": "The auto-renewal promotion code.",
					"type": "string"
				}
			}
		},
		"ConferencePromotionItemDefaultsIn": {
			"description": "Information for a promotion choice for a conference",
			"type": "object",
			"properties": {
				"LocationCode": {
					"description": "The conference location",
					"type": "string"
				},
				"BillBy": {
					"description": "BillBy method for the conference. R - Registration, A - Attendee",
					"enum": [
						"Registration",
						"Attendee"
					],
					"type": "string"
				},
				"Sessions": {
					"description": "A list of sessions associated with this choice",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ConferencePromotionChoiceSessionIn"
					}
				}
			}
		},
		"ConferencePromotionChoiceSessionIn": {
			"description": "Contains the information needed to create or update a session on a conference choice",
			"type": "object",
			"properties": {
				"SessionCode": {
					"description": "Value of Session ID",
					"type": "string"
				},
				"Quantity": {
					"format": "int32",
					"description": "Value of Quantity",
					"type": "integer"
				},
				"PriceCode": {
					"description": "Value of Rate Code",
					"type": "string"
				},
				"UnitPriceOverride": {
					"format": "double",
					"description": "Value of Unit Price",
					"type": "number"
				},
				"OverrideReasonCode": {
					"description": "Value of Override Reason",
					"type": "string"
				}
			}
		},
		"PromotionChoiceSearchFilter": {
			"description": "Filter criteria for promotion choice search",
			"type": "object",
			"properties": {
				"Search": {
					"description": "The generic search argument. (Typically from a search text box). This term will be compared to several \r\nfields on promotion choice",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "The currency to limit results by",
					"type": "string"
				}
			}
		},
		"SearchResultWithCount[PromotionChoice]": {
			"description": "The Order History response.",
			"type": "object",
			"properties": {
				"TotalCount": {
					"format": "int32",
					"description": "Gets the total number of orders found for the given customer.",
					"type": "integer"
				},
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PromotionChoice"
					}
				}
			}
		},
		"SearchResult[PromotionChoice]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PromotionChoice"
					}
				}
			}
		},
		"PromotionChoicePostage": {
			"description": "The calculated postage amount from a promotion choice",
			"type": "object",
			"properties": {
				"PostageAmount": {
					"format": "double",
					"description": "Value of postage amount",
					"type": "number"
				}
			}
		},
		"PromotionCreativeCreateRequest": {
			"description": "Information for creating a new promotion creative.",
			"type": "object",
			"properties": {
				"CreativeCode": {
					"description": "The code identifying the promotion creative",
					"type": "string"
				},
				"Name": {
					"description": "Text describing the creative",
					"type": "string"
				},
				"HasHeadlineChanged": {
					"description": "True if the headline text has changed",
					"type": "boolean"
				},
				"HasLeadChanged": {
					"description": "True if the lead text has changed",
					"type": "boolean"
				},
				"HasOfferChanged": {
					"description": "True if the offer text has changed",
					"type": "boolean"
				},
				"HasOtherChanged": {
					"description": "True if the other text has changed",
					"type": "boolean"
				},
				"LeadChangeText": {
					"description": "Lead change text",
					"type": "string"
				},
				"HeadlineChangeText": {
					"description": "Headline change text",
					"type": "string"
				},
				"OfferChangeText": {
					"description": "Offer change text",
					"type": "string"
				},
				"OtherChangeText": {
					"description": "Other change text",
					"type": "string"
				},
				"ItemNumber": {
					"description": "Item number identifying the product associated with the creative",
					"type": "string"
				},
				"OwningOrganizationCode": {
					"description": "The code identifying the organization that owns the creative",
					"type": "string"
				},
				"LocalCurrencyCode": {
					"description": "The code identifying the creative's currency",
					"type": "string"
				},
				"PreviousCreativeCode": {
					"description": "The code identifying an associated promotion creative",
					"type": "string"
				},
				"PricePoint": {
					"format": "double",
					"description": "Price point",
					"type": "number"
				},
				"Headline": {
					"description": "The creative's headline",
					"type": "string"
				},
				"Narrative": {
					"description": "The creative's narrative",
					"type": "string"
				},
				"CopyWriters": {
					"description": "Copywriters associated with this creative",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PromotionCreativeCopywriterCreateRequest"
					}
				},
				"Documents": {
					"description": "Documents associated with this creative",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PromotionCreativeDocumentCreateRequest"
					}
				}
			}
		},
		"PromotionCreativeCopywriterCreateRequest": {
			"description": "Information to create a creative copywriter",
			"type": "object",
			"properties": {
				"CopywriterCode": {
					"description": "The code identifying a creative copywriter",
					"type": "string"
				},
				"CopywriterTypeCode": {
					"description": "A code that describes the copywriter",
					"type": "string"
				}
			}
		},
		"PromotionCreativeDocumentCreateRequest": {
			"description": "Information to create a creative document",
			"type": "object",
			"properties": {
				"FilePath": {
					"description": "Path and file name of the document",
					"type": "string"
				},
				"Url": {
					"description": "The document's Uniform Resource Locator",
					"type": "string"
				}
			}
		},
		"PromotionCreative": {
			"description": "Creatives store legal or layout information linked to a promotion. Creatives are versioned to \r\nkeep historical data available.  When a creative is created it is assigned version 1 and each time a \r\nversion is added its version number is incremented.",
			"type": "object",
			"properties": {
				"CreativeKey": {
					"$ref": "#/definitions/PromotionCreativeKey",
					"description": "Information to uniquely identify the promotion creative"
				},
				"Name": {
					"description": "Text describing the creative",
					"type": "string"
				},
				"HasHeadlineChanged": {
					"description": "True if the headline text has changed",
					"type": "boolean"
				},
				"HasLeadChanged": {
					"description": "True if the lead text has changed",
					"type": "boolean"
				},
				"HasOfferChanged": {
					"description": "True if the offer text has changed",
					"type": "boolean"
				},
				"HasOtherChanged": {
					"description": "True if the other text has changed",
					"type": "boolean"
				},
				"LeadChangeText": {
					"description": "Lead change text",
					"type": "string"
				},
				"HeadlineChangeText": {
					"description": "Headline change text",
					"type": "string"
				},
				"OfferChangeText": {
					"description": "Offer change text",
					"type": "string"
				},
				"OtherChangeText": {
					"description": "Other change text",
					"type": "string"
				},
				"ItemNumber": {
					"description": "Item number identifying the product associated with the creative",
					"type": "string"
				},
				"OwningOrganizationCode": {
					"description": "The code identifying the organization that owns the creative",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "The code identifying the creative's currency",
					"type": "string"
				},
				"PreviousCreativeCode": {
					"description": "The code identifying an associated promotion creative",
					"type": "string"
				},
				"PricePoint": {
					"format": "double",
					"description": "Price point",
					"type": "number"
				},
				"Headline": {
					"description": "The creative's headline",
					"type": "string"
				},
				"Narrative": {
					"description": "The creative's narrative",
					"type": "string"
				},
				"Copywriters": {
					"description": "Copywriters associated with this creative",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PromotionCreativeCopywriter"
					}
				},
				"Documents": {
					"description": "Documents associated with this creative",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PromotionCreativeDocument"
					}
				}
			}
		},
		"PromotionCreativeCopywriter": {
			"description": "Creative copywriters are a record of the copywriters associated with a creative.",
			"type": "object",
			"properties": {
				"CopywriterCode": {
					"description": "The code identifying a creative copywriter",
					"type": "string"
				},
				"CopywriterTypeCode": {
					"description": "A code that describes the copywriter",
					"type": "string"
				}
			}
		},
		"PromotionCreativeDocument": {
			"description": "A creative document stores a link to an external document, which can be in the form of a web URL or file path.\r\nEach document is uniquely identified by a sequence number, within creative code and version number.\r\nCreative documents are always tied to a creative.",
			"type": "object",
			"properties": {
				"SequenceNumber": {
					"format": "int32",
					"description": "A sequence number unique within the creative that identifies the document",
					"type": "integer"
				},
				"FilePath": {
					"description": "Path and file name of the document",
					"type": "string"
				},
				"Url": {
					"description": "The document's Uniform Resource Locator",
					"type": "string"
				}
			}
		},
		"PromotionCreativeUpdateRequest": {
			"description": "Information for updating an existing promotion creative",
			"type": "object",
			"properties": {
				"Name": {
					"description": "Text describing the creative",
					"type": "string"
				},
				"HasHeadlineChanged": {
					"description": "True if the headline text has changed",
					"type": "boolean"
				},
				"HasLeadChanged": {
					"description": "True if the lead text has changed",
					"type": "boolean"
				},
				"HasOfferChanged": {
					"description": "True if the offer text has changed",
					"type": "boolean"
				},
				"HasOtherChanged": {
					"description": "True if the other text has changed",
					"type": "boolean"
				},
				"LeadChangeText": {
					"description": "Lead change text",
					"type": "string"
				},
				"HeadlineChangeText": {
					"description": "Headline change text",
					"type": "string"
				},
				"OfferChangeText": {
					"description": "Offer change text",
					"type": "string"
				},
				"OtherChangeText": {
					"description": "Other change text",
					"type": "string"
				},
				"ItemNumber": {
					"description": "Item number identifying the product associated with the creative",
					"type": "string"
				},
				"OwningOrganizationCode": {
					"description": "The code identifying the organization that owns the creative",
					"type": "string"
				},
				"LocalCurrencyCode": {
					"description": "The code identifying the creative's currency",
					"type": "string"
				},
				"PreviousCreativeCode": {
					"description": "The code identifying an associated promotion creative",
					"type": "string"
				},
				"PricePoint": {
					"format": "double",
					"description": "Price point",
					"type": "number"
				},
				"Headline": {
					"description": "The creative's headline",
					"type": "string"
				},
				"Narrative": {
					"description": "The creative's narrative",
					"type": "string"
				},
				"CopyWriters": {
					"description": "Copywriters associated with this creative",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PromotionCreativeCopywriterUpdateRequest"
					}
				},
				"Documents": {
					"description": "Documents associated with this creative",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PromotionCreativeDocumentUpdateRequest"
					}
				}
			}
		},
		"PromotionCreativeCopywriterUpdateRequest": {
			"description": "Information to update on creative copywriters",
			"type": "object",
			"properties": {
				"CopywriterCode": {
					"description": "The code identifying a creative copywriter",
					"type": "string"
				},
				"CopywriterTypeCode": {
					"description": "A code that describes the copywriter",
					"type": "string"
				}
			}
		},
		"PromotionCreativeDocumentUpdateRequest": {
			"description": "Information to update on creative documents",
			"type": "object",
			"properties": {
				"SequenceNumber": {
					"format": "int32",
					"description": "A sequence number unique within the creative that identifies the document",
					"type": "integer"
				},
				"FilePath": {
					"description": "Path and file name of the document",
					"type": "string"
				},
				"Url": {
					"description": "The document's Uniform Resource Locator",
					"type": "string"
				}
			}
		},
		"SearchResult[PromotionDraftSummary]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PromotionDraftSummary"
					}
				}
			}
		},
		"PromotionDraftSummary": {
			"description": "Summary information for a new draft.",
			"type": "object",
			"properties": {
				"Id": {
					"description": "Promotion Draft ID",
					"type": "string"
				},
				"PromotionCode": {
					"description": "The promotion code to identify the new promotion.",
					"type": "string"
				},
				"PromotionName": {
					"description": "The name of the promotion.",
					"type": "string"
				},
				"OfferCode": {
					"description": "The offer code to identify the promotion offer.",
					"type": "string"
				},
				"OfferName": {
					"description": "The name of the promotion offer.",
					"type": "string"
				},
				"IsCreateOffer": {
					"description": "Should an offer also be created?",
					"type": "boolean"
				}
			}
		},
		"PromotionDraftRequest": {
			"description": "Information for a promotion draft.",
			"type": "object",
			"properties": {
				"PromotionCode": {
					"description": "The promotion code to identify the new promotion.",
					"type": "string"
				},
				"CampaignCode": {
					"description": "The campaign code to identify the highest level of marketing and promotion tracking.",
					"type": "string"
				},
				"OfferCode": {
					"description": "The offer code to identify the promotion offer.",
					"type": "string"
				},
				"PromotionName": {
					"description": "The name of the promotion.",
					"type": "string"
				},
				"OfferName": {
					"description": "The name of the promotion offer.",
					"type": "string"
				},
				"Initiator": {
					"description": "The initiator of the promotion.",
					"type": "string"
				},
				"DateSent": {
					"format": "date-time",
					"description": "The date the promotion was sent to consumers.",
					"type": "string"
				},
				"EffectiveTo": {
					"format": "date-time",
					"description": "Date, up to which, the promotion is valid",
					"type": "string"
				},
				"EffectiveFrom": {
					"format": "date-time",
					"description": "Date, from which, the promotion is valid",
					"type": "string"
				},
				"IsCreateOffer": {
					"description": "Should this promotion draft also create a new offer?",
					"type": "boolean"
				},
				"OfferItemNumbers": {
					"description": "The item numbers of the items included in the promotion",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"OfferItemAttributes": {
					"description": "The collection of OfferItemAttributes, defining the allowed attributed for each offer item.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OfferItemAttributes"
					}
				},
				"OfferItemChoices": {
					"description": "The choices available for the offer items, based on the specified attributes.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OfferItemChoices"
					}
				}
			}
		},
		"OfferItemAttributes": {
			"description": "The attributes configured for an offer item",
			"type": "object",
			"properties": {
				"ItemNumber": {
					"description": "Item number",
					"type": "string"
				},
				"Attributes": {
					"description": "The collection of attributes configured for the offer item",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OfferItemAttribute"
					}
				}
			}
		},
		"OfferItemChoices": {
			"description": "The choices for an offer item",
			"type": "object",
			"properties": {
				"ItemNumber": {
					"description": "The item number that the choices are for",
					"type": "string"
				},
				"Choices": {
					"description": "The available choices, resulting from finding all combinations of the attributes specified by the user",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OfferItemChoice"
					}
				}
			}
		},
		"OfferItemAttribute": {
			"description": "The valid values for a field on an offer item",
			"type": "object",
			"properties": {
				"FieldName": {
					"description": "Field name",
					"type": "string"
				},
				"Values": {
					"description": "Valid values",
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"OfferItemChoice": {
			"description": "A choice for an offer item",
			"type": "object",
			"properties": {
				"ChoiceCode": {
					"description": "Choice code",
					"type": "string"
				},
				"ChoiceName": {
					"description": "The name of the choice",
					"type": "string"
				},
				"VariableFields": {
					"description": "The fields for the offer choice, representing one combination of the attributes specified by the user",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OfferItemChoiceVariable"
					}
				},
				"Price": {
					"format": "double",
					"description": "The unit price for the choice",
					"type": "number"
				},
				"IsEnabled": {
					"description": "Specifies whether this choice should be included in the final promotion.",
					"type": "boolean"
				}
			}
		},
		"OfferItemChoiceVariable": {
			"description": "A variable",
			"type": "object",
			"properties": {
				"FieldName": {
					"description": "Field name (e.g. \"BIL-CUR\")",
					"type": "string"
				},
				"Value": {
					"description": "Value (e.g. \"USD\")",
					"type": "string"
				}
			}
		},
		"PromotionDraft": {
			"description": "Information for a promotion draft.",
			"type": "object",
			"properties": {
				"CampaignCode": {
					"description": "The campaign code to identify the highest level of marketing and promotion tracking.",
					"type": "string"
				},
				"Initiator": {
					"description": "The initiator of the promotion.",
					"type": "string"
				},
				"DateSent": {
					"format": "date-time",
					"description": "The date the promotion was sent to consumers.",
					"type": "string"
				},
				"EffectiveTo": {
					"format": "date-time",
					"description": "Date, up to which, the promotion is valid",
					"type": "string"
				},
				"EffectiveFrom": {
					"format": "date-time",
					"description": "Date, from which, the promotion is valid",
					"type": "string"
				},
				"OfferItemNumbers": {
					"description": "The item numbers of the items included in the promotion",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"OfferItemAttributes": {
					"description": "The collection of OfferItemAttributes, defining the allowed attributed for each offer item.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OfferItemAttributes"
					}
				},
				"OfferItemChoices": {
					"description": "The choices available for the offer items, based on the specified attributes.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/OfferItemChoices"
					}
				},
				"Id": {
					"description": "Promotion Draft ID",
					"type": "string"
				},
				"PromotionCode": {
					"description": "The promotion code to identify the new promotion.",
					"type": "string"
				},
				"PromotionName": {
					"description": "The name of the promotion.",
					"type": "string"
				},
				"OfferCode": {
					"description": "The offer code to identify the promotion offer.",
					"type": "string"
				},
				"OfferName": {
					"description": "The name of the promotion offer.",
					"type": "string"
				},
				"IsCreateOffer": {
					"description": "Should an offer also be created?",
					"type": "boolean"
				}
			}
		},
		"PromotionList": {
			"description": "Information related to a promotion mailing list.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "Promotion Mailing List Code/ID",
					"type": "string"
				},
				"Name": {
					"description": "Promotion Mailing List Name/Description",
					"type": "string"
				},
				"ListTypeCode": {
					"description": "List Type Code",
					"type": "string"
				},
				"Industry": {
					"description": "Industry",
					"type": "string"
				},
				"Origin": {
					"description": "Origin",
					"type": "string"
				},
				"Format": {
					"description": "Format",
					"type": "string"
				},
				"Cost": {
					"format": "double",
					"description": "Cost",
					"type": "number"
				},
				"LocalCurrencyCode": {
					"description": "Local Currency Code",
					"type": "string"
				},
				"Owner": {
					"description": "Owner",
					"type": "string"
				},
				"Broker": {
					"description": "Broker",
					"type": "string"
				},
				"ContactNameNumber": {
					"description": "Contact Name/Number",
					"type": "string"
				},
				"IsRepeatUseAllowed": {
					"description": "Allow Repeat Use of List?",
					"type": "boolean"
				},
				"ListCode": {
					"description": "LST List Code",
					"type": "string"
				},
				"ListSize": {
					"format": "int32",
					"description": "Size (number of names) of list",
					"type": "integer"
				},
				"UsageLimit": {
					"format": "int32",
					"description": "Maximum times a name can be used",
					"type": "integer"
				},
				"IsActive": {
					"description": "Is this promotion list active?",
					"type": "boolean"
				}
			}
		},
		"PromotionListUpdateRequest": {
			"description": "Information for requesting a promotion mailing list update",
			"type": "object",
			"properties": {
				"Name": {
					"description": "Promotion Mailing List Name/Description",
					"type": "string"
				},
				"ListTypeCode": {
					"description": "List Type Code",
					"type": "string"
				},
				"Industry": {
					"description": "Industry",
					"type": "string"
				},
				"Origin": {
					"description": "Origin",
					"type": "string"
				},
				"Format": {
					"description": "Format",
					"type": "string"
				},
				"Cost": {
					"format": "double",
					"description": "Cost",
					"type": "number"
				},
				"LocalCurrencyCode": {
					"description": "Local Currency Code",
					"type": "string"
				},
				"Owner": {
					"description": "Owner",
					"type": "string"
				},
				"Broker": {
					"description": "Broker",
					"type": "string"
				},
				"ContactNameNumber": {
					"description": "Contact Name/Number",
					"type": "string"
				},
				"IsRepeatUseAllowed": {
					"description": "Allow Repeat Use of List?",
					"type": "boolean"
				},
				"ListCode": {
					"description": "LST List Code",
					"type": "string"
				},
				"ListSize": {
					"format": "int32",
					"description": "Size (number of names) of list",
					"type": "integer"
				},
				"UsageLimit": {
					"format": "int32",
					"description": "Maximum times a name can be used",
					"type": "integer"
				},
				"IsActive": {
					"description": "Is this promotion list active?",
					"type": "boolean"
				}
			}
		},
		"PromotionOffer": {
			"description": "Information for a promotion offer, which provides defaults and setup information for multiple promotions.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The promotion offer code.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the promotion offer code.",
					"type": "string"
				}
			}
		},
		"PromotionOfferUpdateRequest": {
			"description": "Information for updating promotion offer.",
			"type": "object",
			"properties": {
				"Name": {
					"description": "The name of the promotion offer.",
					"type": "string"
				},
				"ValidCountryCodes": {
					"description": "A list of Advantage country codes representing\r\nthe countries a ship to address can have to be \r\napplicable for this promotion offer.\r\nIf the field is null, country code settings will not be updated.",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"ValidPaymentTypes": {
					"$ref": "#/definitions/ValidPaymentTypes",
					"description": "Specifies which payment types are valid for this offer.\r\nIf the field is set to null, payment type settings will remain unchanged."
				}
			}
		},
		"ValidPaymentTypes": {
			"description": "Specifies which payment types are valid for a promotion offer.",
			"type": "object",
			"properties": {
				"GiftCertificate": {
					"description": "Gift Certificate type is valid",
					"type": "boolean"
				},
				"AvailableCredits": {
					"description": "Available Credit type is valid",
					"type": "boolean"
				},
				"Check": {
					"description": "Check type is valid",
					"type": "boolean"
				},
				"DigitalWallet": {
					"description": "Digital Wallet type is valid",
					"type": "boolean"
				},
				"MiscellaneousCredit": {
					"description": "Miscellaneous Credit type is valid",
					"type": "boolean"
				},
				"CreditCard": {
					"description": "Credit Card type is valid",
					"type": "boolean"
				},
				"DirectDebit": {
					"description": "Direct Debit type is valid",
					"type": "boolean"
				}
			}
		},
		"PromotionOfferCreateRequest": {
			"description": "Information for creating a new promotion offer.",
			"type": "object",
			"properties": {
				"OfferCode": {
					"description": "The promotion offer code.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the promotion offer.",
					"type": "string"
				},
				"ItemSettings": {
					"$ref": "#/definitions/PromotionItemSettings",
					"description": "Settings for promotion items on the offer."
				}
			}
		},
		"PromotionItemSettings": {
			"description": "Item setup values for a promotion offer.",
			"type": "object",
			"properties": {
				"IsAssortable": {
					"description": "Can this item be combined with other items in the same category for volume price/discounts?",
					"type": "boolean"
				},
				"PricingBy": {
					"description": "Promotion is based on quantities or sales amount. This is the Quantity/Sales flag.",
					"enum": [
						"QuantityBased",
						"SalesAmountBased"
					],
					"type": "string"
				},
				"PricingType": {
					"description": "Promotion produces discounts or prices. This is the Price/Discount flag.",
					"enum": [
						"Price",
						"Discount"
					],
					"type": "string"
				},
				"DiscountCombinationCode": {
					"description": "How to combine promotion level discounts with previous discounts",
					"enum": [
						"Compound",
						"Add",
						"UseSmaller",
						"UseGreater",
						"UseFirst",
						"UseSecond",
						"UseFirstOrDefault",
						"UseSecondOrDefault"
					],
					"type": "string"
				},
				"IsLineSelect": {
					"description": "Format order entry screen to display all promotion items?",
					"type": "boolean"
				},
				"IsAutoOrder": {
					"description": "Allow auto generation of an order for one of each item in the promotion?",
					"type": "boolean"
				},
				"AllItemsAllowed": {
					"description": "Can any item from inventory be ordered for this promo?",
					"type": "boolean"
				},
				"IsVolumePricingAllowed": {
					"description": "Allow volume price with promo?",
					"type": "boolean"
				},
				"IsVolumeDiscountAllowed": {
					"description": "Allow volume discounting with promo?",
					"type": "boolean"
				},
				"DiscountPercent": {
					"format": "double",
					"description": "Discount percentage for promotion.",
					"type": "number"
				},
				"DiscountAccess": {
					"description": "Use promotion discount for AMB?",
					"type": "boolean"
				},
				"DiscountAssociations": {
					"description": "Use promotion discount for AMM?",
					"type": "boolean"
				},
				"DiscountSubscriptions": {
					"description": "Use promotion discount for CIR?",
					"type": "boolean"
				},
				"DiscountProducts": {
					"description": "Use promotion discount for PRO?",
					"type": "boolean"
				}
			}
		},
		"SearchResultWithCount[PromotionOffer]": {
			"description": "The Order History response.",
			"type": "object",
			"properties": {
				"TotalCount": {
					"format": "int32",
					"description": "Gets the total number of orders found for the given customer.",
					"type": "integer"
				},
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/PromotionOffer"
					}
				}
			}
		},
		"SearchResult[Issue]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Issue"
					}
				}
			}
		},
		"DeliveryMethodComparison": {
			"description": "Data transfer object for delivery method search expressions",
			"type": "object",
			"properties": {
				"Field": {
					"description": "Name of field in table to compare",
					"enum": [
						"BillingCurrency",
						"PromotionCode",
						"CustomerNumber"
					],
					"type": "string"
				},
				"Operator": {
					"description": "Operator to use in comparison",
					"enum": [
						"Equal",
						"NotEqual",
						"Less",
						"LessOrEqual",
						"Greater",
						"GreaterOrEqual",
						"IsNull",
						"IsNotNull",
						"Like",
						"NotLike",
						"Contains",
						"NotContains",
						"StartsWith",
						"NotStartsWith",
						"EndsWith",
						"NotEndsWith",
						"In",
						"Between"
					],
					"type": "string"
				},
				"Value": {
					"description": "Value to compare the field to; specify comma separated values if the operator is \"In\"",
					"type": "string"
				}
			}
		},
		"SearchResult[DeliveryMethod]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/DeliveryMethod"
					}
				}
			}
		},
		"DeliveryMethod": {
			"description": "Information about a delivery code.",
			"type": "object",
			"properties": {
				"Code": {
					"description": "Delivery code.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the delivery code.",
					"type": "string"
				}
			}
		},
		"SearchResult[SubscriptionAutoRenewalChain]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/SubscriptionAutoRenewalChain"
					}
				}
			}
		},
		"SubscriptionAutoRenewalChain": {
			"description": "Information about a subscription auto-renewal chain.",
			"type": "object",
			"properties": {
				"PublicationCode": {
					"description": "The publication code of the subscription.",
					"type": "string"
				},
				"RenewChainId": {
					"description": "CIR Renewal Chain ID.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the auto-renewal chain.",
					"type": "string"
				}
			}
		},
		"Questionnaire": {
			"description": "A questionnaire is a collection of questions, usually marketer defined, to present to the user.",
			"type": "object",
			"properties": {
				"QuestionSets": {
					"description": "A question set is a group of questions to present to the user.  A questionnaire may \r\ncontain one or more question sets.  If a questionnaire contains multiple question sets \r\nthen the question sets are typically represented as tab pages or separate\r\nHTML field sets.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/QuestionSet"
					}
				},
				"QuestionnaireCode": {
					"description": "The QuestinnaireCode the defines this questionnaire",
					"type": "string"
				}
			}
		},
		"QuestionSet": {
			"description": "A question set is a group of questions to present to the user.  A questionnaire may \r\ncontain one or more question sets.  If a questionnaire contains multiple question sets \r\nthen the question sets are typically represented as tab pages or separate\r\nHTML field sets.",
			"type": "object",
			"properties": {
				"Heading": {
					"description": "An option heading to display as the legend for this question set.",
					"type": "string"
				},
				"Questions": {
					"description": "The questions to include in this question set.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/QuestionnaireQuestion"
					}
				}
			}
		},
		"QuestionnaireQuestion": {
			"description": "A question to include on the questionnaire.",
			"type": "object",
			"properties": {
				"SequenceNumber": {
					"format": "int32",
					"description": "The sequence number is used for ordering the questions.",
					"type": "integer"
				},
				"SequenceLetter": {
					"description": "The optional sequence letter can be used to identify a sub-question, e.g. 9B.",
					"type": "string"
				},
				"Question": {
					"$ref": "#/definitions/Question",
					"description": "The question to ask."
				},
				"Required": {
					"description": "Is a response to this question required?",
					"type": "boolean"
				},
				"Hidden": {
					"description": "Should this question be hidden?  Hidden questions should be submitted with the \r\ndefault response when posting a questionnaire response.",
					"type": "boolean"
				}
			}
		},
		"Reason": {
			"description": "Information about a Reason Code",
			"type": "object",
			"properties": {
				"CategoryCode": {
					"description": "Reason Category",
					"type": "string"
				},
				"ContactReason": {
					"description": "Contact Reason",
					"type": "string"
				},
				"Description": {
					"description": "Description",
					"type": "string"
				},
				"NoteText": {
					"description": "Note Text",
					"type": "string"
				},
				"SystemName": {
					"description": "System Name",
					"type": "string"
				},
				"HelpText": {
					"description": "Reason Help Text",
					"type": "string"
				},
				"NoteActionCode": {
					"description": "Note Action Code",
					"type": "string"
				},
				"Status": {
					"description": "Status",
					"type": "string"
				},
				"ServiceCode": {
					"description": "Service Code",
					"type": "string"
				},
				"RequireText": {
					"description": "Require Text",
					"type": "boolean"
				}
			}
		},
		"RecurringDonation": {
			"description": "Information for a recurring donation.",
			"type": "object",
			"properties": {
				"RecurringDonationId": {
					"description": "The recurring donation Id.",
					"type": "string"
				},
				"BillToCustomerNumber": {
					"description": "The bill-to customer number on the recurring donation.",
					"type": "string"
				},
				"ShipToCustomerNumber": {
					"description": "The ship-to customer for the recurring donation.",
					"type": "string"
				},
				"RecurringContributionAmount": {
					"format": "double",
					"description": "The net contribution amount for the recurring donation.",
					"type": "number"
				},
				"PromotionCode": {
					"description": "The promotion code on the recurring donation.",
					"type": "string"
				},
				"BillingCurrencyCode": {
					"description": "The billing currency code on the recurring donation.",
					"type": "string"
				},
				"BillingOrganizationCode": {
					"description": "The billing organization code on the recurring donation.",
					"type": "string"
				},
				"DonationStatus": {
					"description": "The donation status for the recurring donation.",
					"enum": [
						"Active",
						"Inactive"
					],
					"type": "string"
				},
				"Started": {
					"format": "date-time",
					"description": "The start date is the date that the first payment was processed for this recurring donation.",
					"type": "string"
				},
				"LastCharge": {
					"format": "date-time",
					"description": "The last charge for the recurring donation.",
					"type": "string"
				},
				"NumberOfCharges": {
					"format": "int32",
					"description": "The number of charges for the recurring donation.",
					"type": "integer"
				},
				"Schedule": {
					"$ref": "#/definitions/RecurringDonationSchedule",
					"description": "Info pertaining to the scheduling of a recurring donation."
				},
				"NextContribution": {
					"format": "date-time",
					"description": "The next contribution for the recurring donation.",
					"type": "string"
				},
				"Expires": {
					"format": "date-time",
					"description": "The expire date for the recurring donation. Donations will be collected up to and including this date.",
					"type": "string"
				},
				"FundItemNumber": {
					"description": "The fund item number for the recurring donation.",
					"type": "string"
				},
				"MaximumContribution": {
					"format": "double",
					"description": "The maximum contribution for the recurring donation.",
					"type": "number"
				},
				"ContributionToDate": {
					"format": "double",
					"description": "The contribution to-date for the recurring donation. The sum of the contributions made to-date.",
					"type": "number"
				},
				"Premium": {
					"$ref": "#/definitions/RecurringDonationPremium",
					"description": "Info pertaining to premiums triggered for the recurring donation."
				},
				"AddedBy": {
					"description": "The user responsible for adding the recurring donation.",
					"type": "string"
				},
				"AddedOn": {
					"format": "date-time",
					"description": "The date the recurring donation was added.",
					"type": "string"
				},
				"PaymentSettings": {
					"$ref": "#/definitions/RecurringDonationPaymentSettings",
					"description": "Info pertaining to payments associated with the recurring donation."
				}
			}
		},
		"RecurringDonationSchedule": {
			"description": "Information pertaining to the schedule of a recurring donation.",
			"type": "object",
			"properties": {
				"MonthlyFrequency": {
					"format": "int32",
					"description": "The Monthly Frequency for the current Recurring Donation.\r\nDonations will be collected every N months, where N is the MonthlyFrequency.",
					"type": "integer"
				},
				"DaysOfMonth": {
					"description": "The days of the month the recurring donation will be collected.",
					"type": "array",
					"items": {
						"format": "int32",
						"type": "integer"
					}
				}
			}
		},
		"RecurringDonationPremium": {
			"description": "Information pertaining to a recurring donation premium.",
			"type": "object",
			"properties": {
				"EarnedAt": {
					"description": "The premium type for the recurring donation.",
					"enum": [
						"NoContribution",
						"EachContribution",
						"FirstContribution",
						"WhenContributionForPremiumAmountReached"
					],
					"type": "string"
				},
				"EarnedAtAmount": {
					"format": "double",
					"description": "The contribution earned at amount for the premium for the recurring donation.",
					"type": "number"
				},
				"ItemNumber": {
					"description": "The premium item number for the recurring donation.",
					"type": "string"
				}
			}
		},
		"RecurringDonationPaymentSettings": {
			"description": "Settings for payment associated with a recurring donation.",
			"type": "object",
			"properties": {
				"PaymentType": {
					"description": "The payment type for the recurring donation's payment.",
					"enum": [
						"Invalid",
						"CreditCard",
						"DirectDebit"
					],
					"type": "string"
				},
				"DirectDebitRecurringPaymentId": {
					"description": "The direct debit recurring payment Id.",
					"type": "string"
				},
				"CardType": {
					"description": "The card type for the recurring donation's payment.",
					"type": "string"
				},
				"CardNumber": {
					"description": "The card number for the recurring donation's payment.",
					"type": "string"
				},
				"ElectronicPaymentId": {
					"description": "The electronic payment id for the recurring donation's payment.",
					"type": "string"
				},
				"CardExpiration": {
					"description": "The card expiration for the recurring donation's payment (in CCYYMM format).",
					"type": "string"
				},
				"BankIdNumber": {
					"description": "The bank Id number for the recurring donation's payment.",
					"type": "string"
				},
				"BankAccountNumber": {
					"description": "The bank account number for the recurring donation's payment.",
					"type": "string"
				},
				"BankAccountType": {
					"description": "The bank account type.",
					"enum": [
						"Saving",
						"Checking"
					],
					"type": "string"
				}
			}
		},
		"RecurringDonationUpdateRequest": {
			"description": "Model for updating of a recurring donation.",
			"type": "object",
			"properties": {
				"ShipToCustomerNumber": {
					"description": "The ship-to customer for the recurring donation.",
					"type": "string"
				},
				"RecurringContributionAmount": {
					"format": "double",
					"description": "The net contribution amount for the recurring donation.",
					"type": "number"
				},
				"PromotionCode": {
					"description": "The promotion code on the recurring donation.",
					"type": "string"
				},
				"BillingCurrencyCode": {
					"description": "The billing currency code on the recurring donation.",
					"type": "string"
				},
				"StartDate": {
					"format": "date-time",
					"description": "The start date for the recurring donation.",
					"type": "string"
				},
				"Schedule": {
					"$ref": "#/definitions/RecurringDonationSchedule",
					"description": "Info pertaining to the scheduling of a recurring donation."
				},
				"NextContribution": {
					"format": "date-time",
					"description": "The next contribution for the recurring donation.",
					"type": "string"
				},
				"Expires": {
					"format": "date-time",
					"description": "The expire date for the recurring donation.",
					"type": "string"
				},
				"FundItemNumber": {
					"description": "The fund item number for the recurring donation.",
					"type": "string"
				},
				"MaximumContribution": {
					"format": "double",
					"description": "The maximum contribution for the recurring donation.",
					"type": "number"
				},
				"Premium": {
					"$ref": "#/definitions/RecurringDonationPremium",
					"description": "Info pertaining to premiums triggered for the recurring donation."
				},
				"Payment": {
					"$ref": "#/definitions/RecurringDonationPaymentRequest",
					"description": "Info pertaining to payment for recurring donation. Only populate if you want to change \r\nthe payment method associated with the recurring donation."
				}
			}
		},
		"RecurringDonationPaymentRequest": {
			"description": "Information for a credit card payment.\r\nOnly one object (CreditCard or DirectDebit should be provided)",
			"type": "object",
			"properties": {
				"CreditCard": {
					"$ref": "#/definitions/RecurringDonationCreditCardPaymentRequest",
					"description": "Information for a credit card payment."
				},
				"DirectDebit": {
					"$ref": "#/definitions/RecurringDonationDirectDebitPaymentRequest",
					"description": "Information for a direct debit payment."
				}
			}
		},
		"RecurringDonationCreditCardPaymentRequest": {
			"description": "Information for a credit card payment.\r\nYou must include either the ElectronicPaymentId or the Card object.",
			"type": "object",
			"properties": {
				"ElectronicPaymentId": {
					"description": "The electronic payment ID which uniquely identifies a saved card to charge.\r\nYou must include either the ElectronicPaymentId or the Card object.",
					"type": "string"
				},
				"Card": {
					"$ref": "#/definitions/CreditCardAddRequest",
					"description": "The credit card to charge.\r\nYou must provide either the ElectronicPaymentId or the Card."
				}
			}
		},
		"RecurringDonationDirectDebitPaymentRequest": {
			"description": "Information for making a Direct Debit payment for a recurring donation.",
			"type": "object",
			"properties": {
				"ElectronicPaymentId": {
					"description": "The unique identifier for a saved customer bank account.",
					"type": "string"
				},
				"BankAccount": {
					"$ref": "#/definitions/BankAccountCreateRequest",
					"description": "Information for adding a direct debit payment method."
				},
				"DirectDebitPromptDetails": {
					"$ref": "#/definitions/DirectDebitDetails",
					"description": "Branch name/address, account origin and consent date/"
				}
			}
		},
		"RecurringDonationCreateRequest": {
			"description": "Model for creation of a recurring donation.",
			"type": "object",
			"properties": {
				"BillToCustomerNumber": {
					"description": "The bill-to customer number for the recurring donation",
					"type": "string"
				},
				"ShipToCustomerNumber": {
					"description": "The ship-to customer for the recurring donation.",
					"type": "string"
				},
				"RecurringContributionAmount": {
					"format": "double",
					"description": "The net contribution amount for the recurring donation.",
					"type": "number"
				},
				"PromotionCode": {
					"description": "The promotion code for the recurring donation.",
					"type": "string"
				},
				"BillingCurrencyCode": {
					"description": "The billing currency code for the recurring donation.",
					"type": "string"
				},
				"StartDate": {
					"format": "date-time",
					"description": "The start date for the recurring donation.",
					"type": "string"
				},
				"Schedule": {
					"$ref": "#/definitions/RecurringDonationSchedule",
					"description": "Info pertaining to the scheduling of a recurring donation."
				},
				"NextContribution": {
					"format": "date-time",
					"description": "The Next Contribution for the recurring donation.",
					"type": "string"
				},
				"Expires": {
					"format": "date-time",
					"description": "The expire date for the recurring donation. Donations will be collected up to and including this date.",
					"type": "string"
				},
				"FundItemNumber": {
					"description": "The fund item number for the recurring donation.",
					"type": "string"
				},
				"MaximumContribution": {
					"format": "double",
					"description": "The maximum contribution for the recurring donation.",
					"type": "number"
				},
				"Premium": {
					"$ref": "#/definitions/RecurringDonationPremium",
					"description": "Info pertaining to premiums triggered for the recurring donation."
				},
				"Payment": {
					"$ref": "#/definitions/RecurringDonationPaymentRequest",
					"description": "Payment information for a recurring donation."
				}
			}
		},
		"SalesRepUpdateRequest": {
			"description": "Model for Update of an Sales Rep",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "Customer Number of owning customer",
					"type": "string"
				},
				"Group": {
					"$ref": "#/definitions/CustomValue",
					"description": "Sales Rep Group Name and Code"
				},
				"Name": {
					"description": "Name of Sales Rep",
					"type": "string"
				},
				"TerritoryName": {
					"description": "Sales Rep's Territory",
					"type": "string"
				},
				"OptionNumber": {
					"description": "Option number for the current sales rep.\r\nThe option number is a client specific attribute of a sales representative.",
					"type": "string"
				},
				"Email": {
					"description": "Email address for the current sales rep",
					"type": "string"
				},
				"Fax": {
					"description": "Fax number for the current sales rep.\r\nThe fax number is the telephone number of the sales rep's fax machine.",
					"type": "string"
				},
				"Phone": {
					"description": "Phone number for the current sales rep.",
					"type": "string"
				},
				"OrganizationCode": {
					"description": "Organization Code for the current sales rep.",
					"type": "string"
				},
				"SupervisorCode": {
					"description": "Sales rep supervisor for the current sales rep.\r\nThis is a sales rep number of another sales rep.",
					"type": "string"
				},
				"Initials": {
					"description": "Sales rep initials for the current sales rep",
					"type": "string"
				},
				"CommissionCycleCode": {
					"description": "Commission cycle for the current sales rep.\r\nThe commission cycle indicates when commissions are paid (Monthly, Bimonthly, Weekly,...).\r\nThese values are setup at CDSVLU. Keyword name: COM-CYC.",
					"type": "string"
				},
				"CommissionMethodCode": {
					"description": "Commission method for the current sales rep.\r\nThe commission method indicates whether commissions are paid through A/P ('A') or \r\npayroll ('P'). Blank means \"not used\".",
					"type": "string"
				},
				"PayeeVendorNumber": {
					"description": "Sales rep payee number for the current sales rep. \r\nThe sales rep payee number identifies a vendor or an employee.\r\nThese values are setup at CDSVLU. Keyword name: SLM-EMP.",
					"type": "string"
				}
			}
		},
		"SearchResult[SalesRep]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/SalesRep"
					}
				}
			}
		},
		"SalesRepIn": {
			"description": "Sales Rep In Model",
			"type": "object",
			"properties": {
				"CustomerNumber": {
					"description": "Customer Number of owning customer",
					"type": "string"
				},
				"Group": {
					"$ref": "#/definitions/CustomValue",
					"description": "Sales Rep Group Name and Code"
				},
				"Name": {
					"description": "Name of Sales Rep",
					"type": "string"
				},
				"Code": {
					"description": "Returns the sales rep number",
					"type": "string"
				},
				"TerritoryName": {
					"description": "Sales Rep's Territory",
					"type": "string"
				},
				"OptionNumber": {
					"description": "Option number for the current sales rep.\r\nThe option number is a client specific attribute of a sales representative.",
					"type": "string"
				},
				"Email": {
					"description": "Email address for the current sales rep",
					"type": "string"
				},
				"Fax": {
					"description": "Fax number for the current sales rep.\r\nThe fax number is the telephone number of the sales rep's fax machine.",
					"type": "string"
				},
				"Phone": {
					"description": "Phone number for the current sales rep.",
					"type": "string"
				},
				"OrganizationCode": {
					"description": "Organization Code for the current sales rep.",
					"type": "string"
				},
				"SupervisorCode": {
					"description": "Sales rep supervisor for the current sales rep.\r\nThis is a sales rep number of another sales rep.",
					"type": "string"
				},
				"Initials": {
					"description": "Sales rep initials for the current sales rep",
					"type": "string"
				},
				"CommissionCycleCode": {
					"description": "Commission cycle for the current sales rep.\r\nThe commission cycle indicates when commissions are paid (Monthly, Bimonthly, Weekly,...).\r\nThese values are setup at CDSVLU. Keyword name: COM-CYC.",
					"type": "string"
				},
				"CommissionMethodCode": {
					"description": "Commission method for the current sales rep.\r\nThe commission method indicates whether commissions are paid through A/P ('A') or \r\npayroll ('P'). Blank means \"not used\".",
					"type": "string"
				},
				"PayeeVendorNumber": {
					"description": "Sales rep payee number for the current sales rep. \r\nThe sales rep payee number identifies a vendor or an employee.\r\nThese values are setup at CDSVLU. Keyword name: SLM-EMP.",
					"type": "string"
				}
			}
		},
		"CallStatistics": {
			"description": "Data transfer object for CallStatistics data",
			"type": "object",
			"properties": {
				"SalesRep": {
					"description": "Sales rep for these statistics",
					"type": "string"
				},
				"UserCode": {
					"description": "User Code for the sales rep, if any.",
					"type": "string"
				},
				"UserName": {
					"description": "The full name of the sales rep.",
					"type": "string"
				},
				"UserEmail": {
					"description": "Email address for the sales rep",
					"type": "string"
				},
				"DepartmentRank": {
					"format": "int32",
					"description": "Agent's rank within their sales team",
					"type": "integer"
				},
				"DisplayCurrency": {
					"description": "The currency in which sales totals are calculated",
					"type": "string"
				},
				"Inbound": {
					"$ref": "#/definitions/InboundCallStatistics",
					"description": "Inbound call statistics for the sales rep"
				},
				"Outbound": {
					"$ref": "#/definitions/OutboundCallStatistics",
					"description": "Outbound call statistics for the sales rep"
				}
			}
		},
		"InboundCallStatistics": {
			"description": "Data transfer object for InboundCallStatistics data",
			"type": "object",
			"properties": {
				"CallsReceived": {
					"format": "int32",
					"description": "Number of inbound calls received",
					"type": "integer"
				},
				"SalesMade": {
					"format": "int32",
					"description": "Number of inbound call sales made",
					"type": "integer"
				},
				"SalesTotal": {
					"format": "double",
					"description": "Total amount of inbound call sales",
					"type": "number"
				}
			}
		},
		"OutboundCallStatistics": {
			"description": "Data transfer object for OutboundCallStatistics data",
			"type": "object",
			"properties": {
				"Callbacks": {
					"format": "int32",
					"description": "Number of callbacks remaining",
					"type": "integer"
				},
				"CallsLost": {
					"format": "int32",
					"description": "Number of outbound calls lost",
					"type": "integer"
				},
				"CallsMade": {
					"format": "int32",
					"description": "Number of outbound calls made",
					"type": "integer"
				},
				"SalesMade": {
					"format": "int32",
					"description": "Number of outbound calls won",
					"type": "integer"
				},
				"SalesTotal": {
					"format": "double",
					"description": "Total amount of outbound call sales",
					"type": "number"
				}
			}
		},
		"SearchResult[CallStatistics]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CallStatistics"
					}
				}
			}
		},
		"CallbacksFilter": {
			"description": "Filter criteria for callbacks search",
			"type": "object",
			"properties": {
				"ListId": {
					"description": "The List Id of the list to filter results by",
					"type": "string"
				},
				"ListDate": {
					"format": "date-time",
					"description": "The date associated with the call list",
					"type": "string"
				},
				"BeginDate": {
					"format": "date-time",
					"description": "The beginning date. Only calls with callback date on or after this date will be returned.",
					"type": "string"
				},
				"EndDate": {
					"format": "date-time",
					"description": "The beginning date. Only calls with callback date on or before this date will be returned.",
					"type": "string"
				}
			}
		},
		"SearchResult[CallHistory]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/CallHistory"
					}
				}
			}
		},
		"CallHistory": {
			"description": "Information about a Call History object",
			"type": "object",
			"properties": {
				"CallbackDate": {
					"format": "date-time",
					"description": "Value of Callback Date",
					"type": "string"
				},
				"CallElapsedTime": {
					"format": "int32",
					"description": "Call time in seconds",
					"type": "integer"
				},
				"CallEnd": {
					"format": "date-time",
					"description": "Date and time of Call End",
					"type": "string"
				},
				"CallStart": {
					"format": "date-time",
					"description": "Date and time of Call Start",
					"type": "string"
				},
				"CallPriority": {
					"format": "int32",
					"description": "Value of Call Priority",
					"type": "integer"
				},
				"CustomerName": {
					"description": "Value of Customer Name",
					"type": "string"
				},
				"CustomerNumber": {
					"description": "Value of Customer Number",
					"type": "string"
				},
				"ListDate": {
					"format": "date-time",
					"description": "Value of List Date",
					"type": "string"
				},
				"ListId": {
					"description": "Value of List ID",
					"type": "string"
				},
				"PostCallElapsedTime": {
					"format": "int32",
					"description": "Post-call time in seconds",
					"type": "integer"
				},
				"PostCallEnd": {
					"format": "date-time",
					"description": "Date and time of Post-call End",
					"type": "string"
				},
				"PostCallStart": {
					"format": "date-time",
					"description": "Date and time of Post-call Start",
					"type": "string"
				},
				"PreCallElapsedTime": {
					"format": "int32",
					"description": "Pre-call time in seconds",
					"type": "integer"
				},
				"PreCallEnd": {
					"format": "date-time",
					"description": "Date and time of Pre-call End",
					"type": "string"
				},
				"PreCallStart": {
					"format": "date-time",
					"description": "Date and time of Pre-call Start",
					"type": "string"
				},
				"SalesRep": {
					"description": "Value of Sales Rep",
					"type": "string"
				},
				"SequenceNumber": {
					"description": "Value of Sequence Number",
					"type": "string"
				},
				"TimesCalled": {
					"format": "int32",
					"description": "Number of times customer has been called for this list",
					"type": "integer"
				},
				"LastCallbackOutcome": {
					"description": "Call Outcome for last callback made to this customer for this list",
					"type": "string"
				}
			}
		},
		"CallFilter": {
			"description": "Filter criteria for callbacks search",
			"type": "object",
			"properties": {
				"ListId": {
					"description": "The List Id of the list to filter results by",
					"type": "string"
				},
				"ListDate": {
					"format": "date-time",
					"description": "The date associated with the call list",
					"type": "string"
				},
				"IncludeCompleted": {
					"description": "True to include calls that have been completed",
					"type": "boolean"
				},
				"IncludeContacted": {
					"description": "True to include calls where the customer has been contacted",
					"type": "boolean"
				},
				"IncludeCallbacks": {
					"description": "True to include calls callbacks",
					"type": "boolean"
				},
				"IncludeUncontacted": {
					"description": "True to include calls that have been made",
					"type": "boolean"
				}
			}
		},
		"ReassignCallRequest": {
			"description": "Information for reassigning a list of calls",
			"type": "object",
			"properties": {
				"SalesRepCode": {
					"description": "Sales rep to reassign calls to",
					"type": "string"
				},
				"Calls": {
					"description": "Calls to be reassigned",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ReassignCallInfo"
					}
				}
			}
		},
		"ReassignCallInfo": {
			"description": "Information for reassigning a call",
			"type": "object",
			"properties": {
				"ListId": {
					"description": "List ID",
					"type": "string"
				},
				"ListDate": {
					"format": "date-time",
					"description": "List Date",
					"type": "string"
				},
				"CustomerNumber": {
					"description": "Customer number for the call",
					"type": "string"
				},
				"CallPriority": {
					"format": "int32",
					"description": "Call priority",
					"type": "integer"
				}
			}
		},
		"SecurityQuestion": {
			"description": "Security Question Model",
			"type": "object",
			"properties": {
				"Code": {
					"description": "Value of Question Code",
					"type": "string"
				},
				"Name": {
					"description": "Question Prompt",
					"type": "string"
				}
			}
		},
		"SecurityQuestionUpdateRequest": {
			"description": "Model for Update Request of Security Question",
			"type": "object",
			"properties": {
				"Name": {
					"description": "Question Prompt",
					"type": "string"
				}
			}
		},
		"SiteSettings": {
			"description": "Foundation website-specific settings.  (Note: this is a deprecated feature.)",
			"type": "object",
			"properties": {
				"Code": {
					"description": "The code for the site.",
					"type": "string"
				},
				"Name": {
					"description": "The name of the site.",
					"type": "string"
				},
				"CacheDurationOptions": {
					"format": "int32",
					"description": "The duration to cache options, in minutes.",
					"type": "integer"
				},
				"CacheDurationValidValues": {
					"format": "int32",
					"description": "The duration to cache valid values, in minutes.",
					"type": "integer"
				},
				"CacheDurationCatalog": {
					"format": "int32",
					"description": "The duration to cache catalogs, in minutes.",
					"type": "integer"
				},
				"CacheDurationSearchResults": {
					"format": "int32",
					"description": "The duration to cache search results, in minutes.",
					"type": "integer"
				},
				"CacheDurationOtherSetup": {
					"format": "int32",
					"description": "The duration to cache other setup values, in minutes.",
					"type": "integer"
				},
				"CacheDurationSession": {
					"format": "int32",
					"description": "The duration to cache a session, in minutes.",
					"type": "integer"
				},
				"NoteUser": {
					"description": "The user that web notes are assigned to.",
					"type": "string"
				},
				"QuestionChoiceSortOrder": {
					"description": "Question choice ordering. A = alphabetic, O = Other, S = sequence.",
					"type": "string"
				},
				"QuestionNameAsPrompt": {
					"description": "Should the question name be used as the prompt?",
					"type": "boolean"
				},
				"ResponseNameAsPrompt": {
					"description": "Should the response name be used as the prompt?",
					"type": "boolean"
				},
				"QuickOrderDisplayLogout": {
					"description": "If the Quick Order display logout option is set to yes, a logout control will be displayed on \r\nthe QuickOrder page of the website when a user is logged in.",
					"type": "boolean"
				},
				"QuickOrderShowPromoLink": {
					"description": "The QOPMOLNK option determines whether a link to allow the user to enter a promotion code will be \r\ndisplayed on the QuickOrder page. \r\nO = Optional.  Display link when there is no current promotion code.\r\nY = Always display link. N = Never display link.",
					"type": "string"
				},
				"QuickOrderBriefSubStatus": {
					"description": "Should the brief subscription status information be displayed on the QuickOrder page for renewal?\r\nIf yes, display only information on whether subscription is active or inactive.\r\nOtherwise, show all information about subscription status (last issue sent, issues remaining, etc.).",
					"type": "boolean"
				},
				"LaunchPadPromoEntry": {
					"description": "Should a text box be available for the user to enter a promotion code on the Launch Pad page when \r\nthe destination is 'renew?'",
					"type": "boolean"
				},
				"RequireCompanyName": {
					"description": "Is a company name required when entering an address?",
					"type": "boolean"
				},
				"FullDescriptionNarrativeType": {
					"description": "The type of narrative that should be used to store a full description of each item.\r\nThe full description will be displayed on the product page.",
					"type": "string"
				},
				"BriefDescriptionNarrativeType": {
					"description": "The type of narrative that should be used to store a brief description of each item.\r\nThe brief name description will be displayed when the item is included on a list of items in search \r\nresults or the catalog.",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "The currency code used by the website.",
					"type": "string"
				},
				"DefaultCatalogPromotionCode": {
					"description": "The default catalog promotion code used by the website for looking up prices and for shopping carts \r\nin the absence of a user-provided one.",
					"type": "string"
				},
				"DisplaySalesPitch": {
					"description": "Should the sales pitch should be displayed on the product page?\r\nThe sales pitch is the item narrative that is defined with narrative type PCH.",
					"type": "boolean"
				},
				"DisplayCartAddGiftLink": {
					"description": "Should a link will be displayed for each shopping cart line where the ship-to and bill-to are \r\ndifferent to redirect the customer to a page where they can send the same gift to another person?",
					"type": "boolean"
				},
				"DisplayPhoneNumber2": {
					"description": "Should the website will prompt for phone number 2 when the customer is asked to enter an address?",
					"type": "boolean"
				},
				"DisplayPhoneNumber3": {
					"description": "Should the website will prompt for phone number 3 when the customer is asked to enter an address?",
					"type": "boolean"
				},
				"DefaultEntryOrganization": {
					"description": "The default entry organization used in absence of a supplied billing organization, primarily for \r\nthe purpose of creating Electronic Payment IDs.",
					"type": "string"
				},
				"AuthenticationGroup": {
					"description": "Authentication group",
					"type": "string"
				},
				"RenewalNoticeDays": {
					"format": "int32",
					"description": "When a customer views the status of their subscription they  will be presented with an invitation \r\nto renew if their subscription expires within the given number of days.",
					"type": "integer"
				},
				"AllowBillMe": {
					"description": "Is \"bill me later\" a valid payment method?",
					"type": "boolean"
				},
				"CartExpireDays": {
					"format": "int32",
					"description": "The number of days until the a cart expires.",
					"type": "integer"
				},
				"ShipToRelationshipCode": {
					"description": "When a customer ships an order to another customer, create a relationship between \r\nthe ordering customer and the receiving customer using this relationship code.\r\nThis relationship is used to remember the previously used ship-to addresses for a customer \r\nso they can select them when they set the ship-to address on their next order.",
					"type": "string"
				},
				"AlsoPurchasedHistoryDays": {
					"format": "int32",
					"description": "The number of days to look back in the order history to determine which items to show in the \r\nproduct catalog under the \"customers who purchased this product also purchased\" product listing.",
					"type": "integer"
				},
				"AlsoPurchasedMaxRows": {
					"format": "int32",
					"description": "Show at most this many products in the product catalog under the \"customers who purchased this \r\nproduct also purchased\" listing.",
					"type": "integer"
				},
				"AlsoPurchasedThreshold": {
					"format": "int32",
					"description": "Don't show an \"also purchased\" product unless it was purchased with the given product at least \r\nthis many times in the given time period.",
					"type": "integer"
				},
				"RootTreeLevel": {
					"description": "For the given web site, limit product catalog browsing and searching to items listed in or under \r\nthis subject tree level.",
					"type": "string"
				},
				"QuickOrderDefaultPromotion": {
					"description": "Specifies which promotion code to use on the Quick Order page if no promotion code was passed on \r\nthe page URL. If the option is left blank than the user will be asked to enter a promotion code.",
					"type": "string"
				},
				"QuickOrderHideProductList": {
					"description": "Should the product list should be displayed?\r\nThe product list will always be displayed if a promotion narrative is not provided.",
					"type": "boolean"
				},
				"QuickOrderShowConfirmation": {
					"description": "Should the QuickOrder page will use a 2-step with an order page followed by a receipt page?\r\nIf not, then it will use a 3-step process that includes a confirmation page before the receipt.\r\nIn the 3-step process, the payment information will be collected on the confirmation page.",
					"type": "boolean"
				},
				"CheckoutCouponEntry": {
					"description": "Should the coupon code entry will be allowed on the website's checkout page?",
					"type": "boolean"
				},
				"OrderConfirmationTemplate": {
					"description": "Send an order confirmation email to the bill-to customer when the order is placed on the website.  \r\nThis option specifies which \"communication template\" to use for the confirmation email.\r\nIf the this option is left blank than no confirmation email is sent when the order is placed.",
					"type": "string"
				},
				"AllowReferrals": {
					"description": "Should the customer be prompted for referrals after submitting a controlled order?\r\nReferred customers will use the same address as the original customer.",
					"type": "boolean"
				},
				"DisplayPremiumFillOrders": {
					"description": "Controls how backorder fulfillment orders are displayed on the website.\r\nS = Display the backorder fill orders in the list of orders on the Order History page.\r\nM = Merge the backorder fill orders into the list of order lines on the Order Status page for the \r\noriginal order.  L = List the backorder fill orders on the Order Status page for the original order \r\nin a separate list below the list of order lines for the original order.",
					"type": "string"
				},
				"DisplayBackorderFillOrders": {
					"description": "Controls how backorder fulfillment orders are displayed on the website.\r\nS = Display the backorder fill orders in the list of orders on the Order History page.\r\nM = Merge the backorder fill orders into the list of order lines on the Order Status page for the \r\noriginal order. L = List the backorder fill orders on the Order Status page for the original order \r\nin a separate list below the list of order lines for the original order.",
					"type": "string"
				},
				"AllowSubAddressChange": {
					"description": "Should customers be allowed to change their current subscription address from the subscription status \r\npage? Depending on the option value, customers may also be allowed to change the subscription address \r\ncode.\r\nC = Allow address and address code changes.\r\nN = Do not allow changes.\r\nY = Allow subscription address changes.",
					"type": "string"
				},
				"BillingPromotionDefault": {
					"description": "The default billing promotion code used by the web.  \r\nIf the option is blank, the promotion code will remain blank.",
					"type": "string"
				},
				"LaunchPadDefaultRenewalPromotion": {
					"description": "The site's default renewal promotion code that will be used when the user is sent \r\nto the launch pad page with a destination of 'renew' and no promotion code.",
					"type": "string"
				},
				"SiteSubscriptionsAutoForward": {
					"description": "Should the SiteSubscriptions page automatically send the customer to the SubscriptionStatus page if \r\nonly one subscription is found?",
					"type": "boolean"
				},
				"MaximumCirEmails": {
					"format": "int32",
					"description": "The maximum number of cir email addresses a user is allowed to add through the website for each \r\nsubscription.",
					"type": "integer"
				},
				"InternationalShipVia": {
					"description": "the ship via code to be used for international orders.\r\nAn order with a ship to address that has a country that is not equal to the default country will \r\nbe considered an international order.",
					"type": "string"
				},
				"EMilesPassCode": {
					"description": "If you are participating in the e-Miles promotional program to bring traffic to your website(s), \r\nadd a valid e-Miles pass code here.",
					"type": "string"
				},
				"AutoCreateAmbAuthorizations": {
					"description": "During the checkout process on the web, a new AMB authorization record (CDSCVI) will be created \r\n(using the ship-to customer's email) \r\nif the following are all true:\r\n1) This option is set to 'Y'\r\n2) There is a valid Authorization Group (AUTH_GRP) on the item (CDSITM)\r\n3) a CDSCVI for this authorization group does not already exist.",
					"type": "boolean"
				},
				"DefaultDocketNumber": {
					"description": "The default docket number is used on the Foundation website to set the default docket number for \r\norders.",
					"type": "string"
				},
				"ShowSavedCreditCards": {
					"description": "Should customers be allowed to choose from a list of credit cards saved on their account when they \r\nplace orders?",
					"type": "boolean"
				},
				"IsPhoneNumber2Shown": {
					"description": "Should the phone number 2 field be displayed?",
					"type": "boolean"
				},
				"IsPhoneNumber3Shown": {
					"description": "Should the phone number 3 field be displayed?",
					"type": "boolean"
				}
			}
		},
		"CommonOptions": {
			"description": "Website options from advantage.",
			"type": "object",
			"properties": {
				"DefaultCountryCode": {
					"description": "Default country code.",
					"type": "string"
				},
				"ParentCurrencyCode": {
					"description": "Parent currency code.",
					"type": "string"
				},
				"ParentIsoCurrencyCode": {
					"description": "Parent Iso currency code.",
					"type": "string"
				},
				"ClientAbbreviation": {
					"description": "Client abbreviation.",
					"type": "string"
				},
				"PromptItemName1": {
					"description": "Prompt for item name.",
					"type": "string"
				},
				"PromptItemName2": {
					"description": "Prompt for item name 2.",
					"type": "string"
				},
				"PromptItemName3": {
					"description": "Prompt for item name 3.",
					"type": "string"
				},
				"AuthorField": {
					"format": "int32",
					"description": "Author.",
					"type": "integer"
				},
				"DefaultCustomerType": {
					"description": "Default customer type.",
					"type": "string"
				},
				"DefaultAddressCode": {
					"description": "Default address location.",
					"type": "string"
				},
				"PrimaryStreetLine": {
					"format": "int32",
					"description": "Primary street field.",
					"type": "integer"
				},
				"PhoneNumber1Prompt": {
					"description": "Prompt to display for primary phone number field.",
					"type": "string"
				},
				"PhoneNumber2Prompt": {
					"description": "Prompt to display for phone number 2 field.",
					"type": "string"
				},
				"PhoneNumber3Prompt": {
					"description": "Prompt to display for phone number 3 field.",
					"type": "string"
				},
				"IsCustomerOrCompanyNameRequired": {
					"description": "Is a customer required to have either a customer or company name?",
					"type": "boolean"
				},
				"IsMiddleInitialShown": {
					"description": "Should the middle initial field be displayed?",
					"type": "boolean"
				},
				"AddressLine1Prompt": {
					"description": "Prompt to display for the address line 1.",
					"type": "string"
				},
				"AddressLine2Prompt": {
					"description": "Prompt to display for the address line 2.",
					"type": "string"
				},
				"AddressLine3Prompt": {
					"description": "Prompt to display for the address line 3.",
					"type": "string"
				},
				"AdvantageAreaCode": {
					"description": "Advantage area code",
					"type": "string"
				},
				"CardVaultBaseUrl": {
					"description": "Base URL for CardVault instance used by this Advantage area",
					"type": "string"
				}
			}
		},
		"FieldLengths": {
			"description": "The valid lengths of fields",
			"type": "object",
			"properties": {
				"Maximum": {
					"$ref": "#/definitions/MaximumFieldLengths"
				},
				"Minimum": {
					"$ref": "#/definitions/MinimumFieldLengths"
				}
			}
		},
		"MaximumFieldLengths": {
			"description": "The maximum lengths for fields.",
			"type": "object",
			"properties": {
				"CompanyName": {
					"format": "int32",
					"description": "The maximum length of a company name.",
					"type": "integer"
				},
				"Email": {
					"format": "int32",
					"description": "The maximum length of an email address.",
					"type": "integer"
				},
				"Phone": {
					"format": "int32",
					"description": "The maximum length of a phone number.",
					"type": "integer"
				},
				"City": {
					"format": "int32",
					"description": "The maximum length of a city name.",
					"type": "integer"
				},
				"StateCode": {
					"format": "int32",
					"description": "The maximum length of a state code.",
					"type": "integer"
				},
				"PostalCode": {
					"format": "int32",
					"description": "The maximum length of a postal code.",
					"type": "integer"
				},
				"UserName": {
					"format": "int32",
					"description": "The maximum length of a username.",
					"type": "integer"
				},
				"Password": {
					"format": "int32",
					"description": "The maximum length of a password.",
					"type": "integer"
				},
				"CustomerName": {
					"format": "int32",
					"description": "The maximum length of a customer name.",
					"type": "integer"
				},
				"AddressLine": {
					"format": "int32",
					"description": "The maximum length of a line of an address.",
					"type": "integer"
				},
				"CampaignCode": {
					"format": "int32",
					"description": "The maximum length of a campaign code.",
					"type": "integer"
				},
				"CampaignName": {
					"format": "int32",
					"description": "The maximum length of the name of a campaign.",
					"type": "integer"
				},
				"PromotionCode": {
					"format": "int32",
					"description": "The maximum length of a promotion code.",
					"type": "integer"
				},
				"PromotionName": {
					"format": "int32",
					"description": "The maximum length of the name of a promotion.",
					"type": "integer"
				},
				"OfferCode": {
					"format": "int32",
					"description": "The maximum length of an offer code.",
					"type": "integer"
				},
				"OfferName": {
					"format": "int32",
					"description": "The maximum length of the name of an offer.",
					"type": "integer"
				},
				"Initiator": {
					"format": "int32",
					"description": "The maximum length of the initiator of a promotion.",
					"type": "integer"
				},
				"PromotionChoiceCode": {
					"format": "int32",
					"description": "The maximum length of the code of a promotion choice.",
					"type": "integer"
				},
				"PromotionChoiceName": {
					"format": "int32",
					"description": "The maximum length of the name of a promotion choice.",
					"type": "integer"
				},
				"CustomerNumber": {
					"format": "int32",
					"description": "The maximum length of a customer number.",
					"type": "integer"
				}
			}
		},
		"MinimumFieldLengths": {
			"description": "The minimum lengths for fields.",
			"type": "object",
			"properties": {
				"UserName": {
					"format": "int32",
					"type": "integer"
				},
				"Password": {
					"format": "int32",
					"type": "integer"
				}
			}
		},
		"OptionValue": {
			"description": "A system option value",
			"type": "object",
			"properties": {
				"Value": {
					"description": "The option value",
					"type": "string"
				}
			}
		},
		"ShipVia": {
			"description": "Information for ShipVia",
			"type": "object",
			"properties": {
				"BillingCurrencyCode": {
					"description": "Billing Currency Code",
					"type": "string"
				},
				"ChargeCustomerAccount": {
					"description": "Charge Customer Account?",
					"type": "string"
				},
				"CompanyName": {
					"description": "Value of Company Name",
					"type": "string"
				},
				"CustomerAccountMask": {
					"description": "Customer Account Mask",
					"type": "string"
				},
				"Name": {
					"description": "Name",
					"type": "string"
				},
				"FlatShippingRate": {
					"format": "double",
					"description": "Flat Shipping Rate",
					"type": "number"
				},
				"IsWebEnabled": {
					"description": "Web Enabled?",
					"type": "boolean"
				},
				"ShipperUrl": {
					"description": "Value of Shipper URL",
					"type": "string"
				},
				"ShippingCompanyName": {
					"description": "Shipping Company Name",
					"enum": [
						"DhlGlobal",
						"FederalExpress",
						"UnitedParcelService",
						"UnitedStatesPostalService",
						"YellowTransportation"
					],
					"type": "string"
				},
				"ShipViaCode": {
					"description": "Ship Via Code",
					"type": "string"
				},
				"ShipViaTypeCode": {
					"description": "Ship Via Type Code",
					"enum": [
						"ChangeByWeightAndPrice",
						"ChangeByNeitherWeightNorPrice",
						"ChargeByOrderPriceOnly",
						"ChargeByPriceOnly",
						"ChargeByTypeOfProduct",
						"ChargeByWeightOnly",
						"ChargeByZoneAndWeight"
					],
					"type": "string"
				},
				"SurchargePercent": {
					"format": "double",
					"description": "Surcharge Percent",
					"type": "number"
				}
			}
		},
		"SearchResult[ShipVia]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ShipVia"
					}
				}
			}
		},
		"ShipViaEstimateShippingRequest": {
			"description": "",
			"type": "object",
			"properties": {
				"ShipViaCode": {
					"description": "Ship via",
					"type": "string"
				},
				"ItemNumber": {
					"description": "Item number (optional, can be used to determine the warehouse and weight)",
					"type": "string"
				},
				"CountryCode": {
					"description": "Country",
					"type": "string"
				},
				"PostalCode": {
					"description": "Postal (or zip) code",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "Billing currency",
					"type": "string"
				},
				"NetSalesAmount": {
					"format": "double",
					"description": "Net sales",
					"type": "number"
				},
				"QuantityOrdered": {
					"format": "int32",
					"description": "Quantity",
					"type": "integer"
				},
				"ShipFromWarehouseCode": {
					"description": "Warehouse id (optional); default is from item",
					"type": "string"
				},
				"IncludeSurcharge": {
					"description": "Add surcharge? (optional); default is true",
					"type": "boolean"
				},
				"ItemUnitWeight": {
					"format": "double",
					"description": "Weight per unit (optional); default is from item",
					"type": "number"
				}
			}
		},
		"ShipViaEstimatedFreight": {
			"description": "Model for Ship Via Estimated Freight",
			"type": "object",
			"properties": {
				"EstimatedFreight": {
					"format": "double",
					"description": "Estimated Freight",
					"type": "number"
				}
			}
		},
		"ShoppingCartIn": {
			"description": "Information for creating a shopping cart.",
			"type": "object",
			"properties": {
				"BillTo": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "The bill-to for the cart.  (Optional.  The bill-to need not be identified until \r\nthe cart is converted to an order.)"
				},
				"ShipTo": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "The primary (default) ship-to for the cart.  Each order line may have a different ship-to.\r\n(Optional.  The ship-to need not be identified until the cart is converted to an order.)"
				},
				"PromotionCode": {
					"description": "The promotion code applied to the cart.",
					"type": "string"
				},
				"CouponCode": {
					"description": "The coupon code applied to the cart.",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "The currency code used to bill for the cart.",
					"type": "string"
				},
				"OrderSourceCode": {
					"description": "The source for the order.",
					"type": "string"
				},
				"Lines": {
					"description": "The lines in the shipping cart.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ShoppingCartLineIn"
					}
				}
			}
		},
		"ShoppingCartLineIn": {
			"description": "Information for adding an item to a shopping cart.",
			"type": "object",
			"properties": {
				"LineId": {
					"format": "int32",
					"description": "The line number. This identifies the shopping cart line. This value can not be changed in Advantage. \r\nThis property is only used to identify the line to apply changes to.",
					"type": "integer"
				},
				"ShipTo": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "The ship-to for this order line.  (Optional.  The ship-to need not be identified until\r\nthe cart is converted to an order.  The line-level ship-to can default from the cart-level\r\nship-to when the cart is converted to an order.)"
				},
				"ItemNumber": {
					"description": "The item number identifying the product.",
					"type": "string"
				},
				"PromotionCode": {
					"description": "The promotion code applied to the item.",
					"type": "string"
				},
				"PromotionChoice": {
					"description": "The promotion choice.",
					"type": "string"
				},
				"Quantity": {
					"format": "int32",
					"description": "The quantity of this particular item.",
					"type": "integer"
				},
				"UnitPrice": {
					"format": "double",
					"description": "The override unit price.",
					"type": "number"
				},
				"Profile": {
					"$ref": "#/definitions/Profile",
					"description": "The optional profile element contains responses to a set of questions asked at order entry time.  \r\nProfiles are typically used to store customer demographic information for audited subscriptions or \r\ncustom inputs used for order fulfillment."
				},
				"Subscription": {
					"$ref": "#/definitions/ShoppingCartSubscriptionLineIn",
					"description": "Information about a subscription (CIR) shopping cart line"
				},
				"Donation": {
					"$ref": "#/definitions/ShoppingCartDonationLine",
					"description": "Information about a donation (DNT) shopping cart line"
				},
				"AssociationStructureNodeId": {
					"description": "The Association Structure Node Id indicates the structure node that an association member has selected.\r\nThe structure node is usually an association chapter.",
					"type": "string"
				}
			}
		},
		"ShoppingCartSubscriptionLineIn": {
			"description": "Information about a subscription (CIR) shopping cart line",
			"type": "object",
			"properties": {
				"SubscriptionId": {
					"description": "The subscription reference ID for an existing subscription that this line should apply to, usually for performing a subscription renewal.",
					"type": "string"
				}
			}
		},
		"ShoppingCartDonationLine": {
			"description": "Information about a donation (DNT) shopping cart line",
			"type": "object",
			"properties": {
				"Frequency": {
					"format": "int32",
					"description": "The number of months between recurring donation contributions.",
					"type": "integer"
				}
			}
		},
		"ShoppingCart": {
			"description": "Information for a shopping cart.",
			"type": "object",
			"properties": {
				"CartId": {
					"description": "The unique ID for the cart.",
					"type": "string"
				},
				"BillTo": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "The bill-to for the cart.  (Optional.  The bill-to need not be identified until \r\nthe cart is converted to an order.)"
				},
				"ShipTo": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "The primary (default) ship-to for the cart.  Each order line may have a different ship-to.\r\n(Optional.  The ship-to need not be identified until the cart is converted to an order.)"
				},
				"PromotionCode": {
					"description": "The promotion code applied to the cart.",
					"type": "string"
				},
				"CouponCodes": {
					"description": "The coupon code applied to the cart.",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"CurrencyCode": {
					"description": "The currency code used to bill for the cart.",
					"type": "string"
				},
				"CartTotal": {
					"format": "double",
					"description": "The total cost of the shopping cart.",
					"type": "number"
				},
				"OrderSourceCode": {
					"description": "The source for the order.",
					"type": "string"
				},
				"Lines": {
					"description": "The lines in the shipping cart.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ShoppingCartLine"
					}
				}
			}
		},
		"ShoppingCartLine": {
			"description": "Information for a line in the shopping cart.",
			"type": "object",
			"properties": {
				"LineId": {
					"format": "int32",
					"description": "The identifier for the shopping cart line, unique within the cart.",
					"type": "integer"
				},
				"ShipTo": {
					"$ref": "#/definitions/CustomerAddressKey",
					"description": "The ship-to for this order line.  (Optional.  The ship-to need not be identified until\r\nthe cart is converted to an order.  The line-level ship-to can default from the cart-level\r\nship-to when the cart is converted to an order.)"
				},
				"ItemNumber": {
					"description": "The item number identifying the product.",
					"type": "string"
				},
				"ProductName": {
					"description": "The name of the product.",
					"type": "string"
				},
				"ProductType": {
					"description": "The type of the product.",
					"enum": [
						"Product",
						"Subscription",
						"Access",
						"Conference",
						"BackIssue",
						"Package",
						"Unknown",
						"Membership",
						"Donation",
						"PrintJob",
						"Reprint",
						"Service",
						"Stock"
					],
					"type": "string"
				},
				"PromotionCode": {
					"description": "The promotion code applied to the item.",
					"type": "string"
				},
				"PromotionChoice": {
					"$ref": "#/definitions/PromotionChoice",
					"description": "The promotion choice."
				},
				"Price": {
					"format": "double",
					"description": "The unit price for the item.",
					"type": "number"
				},
				"Quantity": {
					"format": "int32",
					"description": "The quantity of this particular item.",
					"type": "integer"
				},
				"ProfileId": {
					"description": "The unique identifier for the profile storing the question responses associated with this item.",
					"type": "string"
				},
				"TotalDiscountPercent": {
					"format": "double",
					"description": "The total percentage that the item's price has been discounted.",
					"type": "number"
				},
				"Discounts": {
					"description": "The discount source codes, indicating which discounts were applied to determine this item's price.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ItemDiscount"
					}
				},
				"Access": {
					"$ref": "#/definitions/ShoppingCartAccessLine",
					"description": "Information about an access (AMB) shopping cart line"
				},
				"Donation": {
					"$ref": "#/definitions/ShoppingCartDonationLine",
					"description": "Information about a donation (DNT) shopping cart line"
				}
			}
		},
		"ShoppingCartAccessLine": {
			"description": "Information about an access (AMB) shopping cart line",
			"type": "object",
			"properties": {
				"PricingMethod": {
					"description": "Pricing method for AMB items, showing how the price is determined.",
					"enum": [
						"AgreementBased",
						"ParticipantBased",
						"QuantityBased"
					],
					"type": "string"
				}
			}
		},
		"ConvertCartToOrderRequest": {
			"description": "Information for converting a shopping card into an order.",
			"type": "object",
			"properties": {
				"BillToCustomerNumber": {
					"description": "The customer number of the bill-to on the order. Leave blank (\"\") to use the value already set \r\non the Advantage shopping cart.",
					"type": "string"
				},
				"ShipToCustomerNumber": {
					"description": "The customer number of the ship-to on the order. Leave blank (\"\") to use the value already set   \r\non the Advantage shopping cart.",
					"type": "string"
				},
				"CurrencyCode": {
					"description": "The billing currency code to use for the Advantage order. Leave blank (\"\") to use the value already\r\nset on the Advantage shopping cart.",
					"type": "string"
				},
				"BillToAddressCode": {
					"description": "The Address code for the bill-to address. Leave blank (\"\") to use the value already set on the Advantage \r\nshopping cart.",
					"type": "string"
				},
				"ShipToAddressCode": {
					"description": "The Address code for the ship-to address. Leave blank (\"\") to use the value already set on the Advantage \r\nshopping cart.",
					"type": "string"
				},
				"PromotionCode": {
					"description": "The promotion code for the order. Leave blank (\"\") to use the value already set on the Advantage shopping \r\ncart.",
					"type": "string"
				},
				"FreeShipping": {
					"description": "Whether or not the order will charge shipping. Omit to assume default (false).",
					"type": "boolean"
				},
				"DiscountPercent": {
					"format": "double",
					"description": "Populate to apply an order-wide discount. Omit to assume default (0%).",
					"type": "number"
				},
				"DeleteCart": {
					"description": "Whether or not to delete the cart, once the order is successfully created. Omit to assume default (true).",
					"type": "boolean"
				},
				"SalesRepCode": {
					"description": "The Sales Rep who will get credit for the order. Leave blank (\"\") to use the value already set on the \r\nAdvantage shopping cart.",
					"type": "string"
				},
				"InstallmentBillingCode": {
					"description": "If order is to be paid via installments, this is the Advantage installment billing code. Leave blank (\"\") \r\nor omit to use the value already set on the Advantage shopping cart.",
					"type": "string"
				},
				"PurgePendingOrders": {
					"description": "Whether or not to purge other pending orders with the same bill-to as this order-to-be. Omit to use \r\ndefault (true).",
					"type": "boolean"
				},
				"ReferredByCustomerNumber": {
					"description": "The customer number of the referring customer. Leave blank (\"\") or omit to use the value already set on \r\nthe Advantage shopping cart.",
					"type": "string"
				},
				"OrderSourceCode": {
					"description": "The Advantage order source code of the order.  Omit to use the default.",
					"type": "string"
				},
				"BillingOrganizationCode": {
					"description": "The billing organization of the order.  Leave blank or omit to use the default.",
					"type": "string"
				}
			}
		},
		"SearchResult[ShoppingCart]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/ShoppingCart"
					}
				}
			}
		},
		"OrderLineItemExclusion": {
			"description": "Information pertaining to item exclusions on an order.",
			"type": "object",
			"properties": {
				"Item": {
					"$ref": "#/definitions/Product",
					"description": "Value of Item data object"
				},
				"ExclusionDescription": {
					"description": "Value of Exclusion Description",
					"type": "string"
				},
				"FirstDistributorCustomer": {
					"$ref": "#/definitions/Customer",
					"description": "Value of First Distibutor Customer Number"
				},
				"LineId": {
					"format": "int32",
					"description": "Value of order line id that is being excluded",
					"type": "integer"
				}
			}
		},
		"SubscriptionUpdateRequest": {
			"description": "Information for requesting a subscription update.",
			"type": "object",
			"properties": {
				"RenewalPolicyCode": {
					"description": "The new renewal flag.  You must supply a credit card or bank account to use \r\nautomatic charge renewals (C).",
					"type": "string"
				},
				"AutoChargeCard": {
					"$ref": "#/definitions/CreditCardPaymentRequest",
					"description": "The credit card to use for automatic renewals."
				},
				"AutoChargeDirectDebitAccount": {
					"$ref": "#/definitions/DirectDebitPaymentRequest",
					"description": "The direct debit account to use for automatic renewals."
				},
				"AutoRenewChain": {
					"$ref": "#/definitions/AutoRenewChain",
					"description": "The Auto-renew chain information to use for automatic renewals"
				},
				"PromotionCode": {
					"description": "Renewal promotion pode",
					"type": "string"
				},
				"ReasonCode": {
					"description": "Reason code to use for automatic renewals",
					"type": "string"
				}
			}
		},
		"AutoRenewChain": {
			"description": "Renewal chain settings for a subscription",
			"type": "object",
			"properties": {
				"RenewChainId": {
					"description": "Renew-chain identifier",
					"type": "string"
				},
				"ChainSequence": {
					"format": "int32",
					"description": "Renew-chain sequence",
					"type": "integer"
				},
				"TermsToRepeat": {
					"format": "int32",
					"description": "Number of terms to repeat this chain sequence for",
					"type": "integer"
				},
				"RepeatedDiscountPercentage": {
					"format": "double",
					"description": "Repeated discount percentage",
					"type": "number"
				}
			}
		},
		"SearchResult[Subscription]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Subscription"
					}
				}
			}
		},
		"CancelSubscriptionRequest": {
			"description": "Information for requesting a subscription to be canceled.",
			"type": "object",
			"properties": {
				"CancelReasonCode": {
					"description": "The reason code for the cancellation.",
					"type": "string"
				},
				"CreditIssues": {
					"format": "int32",
					"description": "Issues to credit",
					"type": "integer"
				},
				"CancelAllTerms": {
					"description": "Cancel all terms?",
					"type": "boolean"
				},
				"ChargeForIssuesServed": {
					"description": "The charge for issues served flag determines whether an invoice will be generated to charge\r\nthe customer for issues already served.",
					"enum": [
						"IfPayment",
						"IfNoPayment",
						"No"
					],
					"type": "string"
				},
				"TermNumber": {
					"format": "int32",
					"description": "Term number of the subscription to cancel",
					"type": "integer"
				}
			}
		},
		"SubscriptionSuspendRequest": {
			"description": "Information for requesting a subscription to be suspended.",
			"type": "object",
			"properties": {
				"SuspendOn": {
					"format": "date-time",
					"description": "The date of the issue to begin suspending.",
					"type": "string"
				},
				"ResumeOn": {
					"format": "date-time",
					"description": "The date of the issue to resume.",
					"type": "string"
				},
				"ReasonCode": {
					"description": "The code identifying the reason for suspension.",
					"type": "string"
				}
			}
		},
		"SubscriptionComparison": {
			"description": "Data transfer object for subscription search expressions",
			"type": "object",
			"properties": {
				"Field": {
					"description": "Name of field in table to compare",
					"enum": [
						"PublicationCode",
						"ShipToCustomerNumber",
						"SubscriptionId",
						"BillToCustomerNumber",
						"ReferredByCustomerNumber",
						"OwningOrganizationCode",
						"CirculationStatus"
					],
					"type": "string"
				},
				"Operator": {
					"description": "Operator to use in comparison",
					"enum": [
						"Equal",
						"NotEqual",
						"Less",
						"LessOrEqual",
						"Greater",
						"GreaterOrEqual",
						"IsNull",
						"IsNotNull",
						"Like",
						"NotLike",
						"Contains",
						"NotContains",
						"StartsWith",
						"NotStartsWith",
						"EndsWith",
						"NotEndsWith",
						"In",
						"Between"
					],
					"type": "string"
				},
				"Value": {
					"description": "Value to compare the field to; specify comma separated values if the operator is \"In\"",
					"type": "string"
				}
			}
		},
		"UpsellFilter": {
			"description": "Upsell filter criteria allows you to control the type of upsells that are returned.",
			"type": "object",
			"properties": {
				"UpsellTypes": {
					"description": "What types of upsell items should be returned?",
					"enum": [
						"Default",
						"UpsellItems",
						"ExpiringSubscriptions"
					],
					"type": "string"
				},
				"WebOnly": {
					"description": "Include only upsells marked as \"web visible\"?  (This is the default.)",
					"type": "boolean"
				}
			}
		},
		"SearchResult[Upsell]": {
			"description": "Information returned by a search on any object's model",
			"type": "object",
			"properties": {
				"Results": {
					"description": "The search results",
					"type": "array",
					"items": {
						"$ref": "#/definitions/Upsell"
					}
				}
			}
		},
		"Upsell": {
			"description": "An upsell.  Upsells are used to offer customers items for purchase based on various trigger criteria.\r\nIf a customer places an order in response to a presented upsell then include the presentation ID on\r\nthe order line to record the success of the upsell.",
			"type": "object",
			"properties": {
				"Name": {
					"description": "Name of the upsell.",
					"type": "string"
				},
				"UpsellId": {
					"description": "Upsell ID.",
					"type": "string"
				},
				"PresentationId": {
					"description": "Identifies the upsell activity.\r\nIf a customer places an order in response to a presented upsell then include the presentation ID on\r\nthe order line to record the success of the upsell.",
					"type": "string"
				},
				"PromotionCode": {
					"description": "Promotion code to use if item is ordered.",
					"type": "string"
				},
				"Script": {
					"description": "Upsell script/text to present.",
					"type": "string"
				},
				"SequenceNumber": {
					"description": "Upsell sequence number.",
					"type": "string"
				},
				"Items": {
					"description": "Upsell items.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/UpsellItem"
					}
				}
			}
		},
		"UpsellItem": {
			"description": "An upsell item.",
			"type": "object",
			"properties": {
				"ItemNumber": {
					"description": "The product to upsell.",
					"type": "string"
				},
				"PromotionChoice": {
					"description": "Promotion choice to use if item is ordered.",
					"type": "string"
				}
			}
		},
		"ProductUpsellFilter": {
			"description": "Upsell filter criteria allows you to control the type of upsells that are returned.",
			"type": "object",
			"properties": {
				"OrderNumber": {
					"description": "Do not upsell items already included on the given order.  (Optional)",
					"type": "string"
				},
				"CartNumber": {
					"description": "Do not upsell items already included in the given shopping cart. (Optional.)",
					"type": "string"
				},
				"CustomerNumber": {
					"description": "The customer who will see the upsell.  (Optional)",
					"type": "string"
				},
				"PromotionCode": {
					"description": "Also search for upsells triggered by this promotion.  (Optional)",
					"type": "string"
				},
				"UpsellTypes": {
					"description": "What types of upsell items should be returned?",
					"enum": [
						"Default",
						"UpsellItems",
						"ExpiringSubscriptions"
					],
					"type": "string"
				},
				"WebOnly": {
					"description": "Include only upsells marked as \"web visible\"?  (This is the default.)",
					"type": "boolean"
				}
			}
		},
		"PromotionUpsellFilter": {
			"description": "Upsell filter criteria allows you to control the type of upsells that are returned.",
			"type": "object",
			"properties": {
				"OrderNumber": {
					"description": "Do not upsell items already included on the given order.  (Optional.)",
					"type": "string"
				},
				"CartNumber": {
					"description": "Do not upsell items already included in the given shopping cart. (Optional.)",
					"type": "string"
				},
				"CustomerNumber": {
					"description": "The customer who will see the upsell.  (Optional.)",
					"type": "string"
				},
				"ItemNumber": {
					"description": "The product use for the \"must purchase\" check on the upsells.  (Optional)",
					"type": "string"
				},
				"UpsellTypes": {
					"description": "What types of upsell items should be returned?",
					"enum": [
						"Default",
						"UpsellItems",
						"ExpiringSubscriptions"
					],
					"type": "string"
				},
				"WebOnly": {
					"description": "Include only upsells marked as \"web visible\"?  (This is the default.)",
					"type": "boolean"
				}
			}
		},
		"PromotionChoiceUpsellFilter": {
			"description": "Upsell filter criteria allows you to control the type of upsells that are returned.",
			"type": "object",
			"properties": {
				"OrderNumber": {
					"description": "Do not upsell items already included on the given order.  (Optional.  No used when listing promotions by order.)",
					"type": "string"
				},
				"CartNumber": {
					"description": "Do not upsell items already included in the given shopping cart. (Optional.)",
					"type": "string"
				},
				"CustomerNumber": {
					"description": "The customer who will see the upsell.  (Optional.  Not used when listing promotions by customer.)",
					"type": "string"
				},
				"UpsellTypes": {
					"description": "What types of upsell items should be returned?",
					"enum": [
						"Default",
						"UpsellItems",
						"ExpiringSubscriptions"
					],
					"type": "string"
				},
				"WebOnly": {
					"description": "Include only upsells marked as \"web visible\"?  (This is the default.)",
					"type": "boolean"
				}
			}
		},
		"UserUpdateRequest": {
			"description": "Information for requesting an update to an Advantage web user.",
			"type": "object",
			"properties": {
				"NewUsername": {
					"description": "The web user's new username.",
					"type": "string"
				},
				"Password": {
					"description": "The web user's new password.",
					"type": "string"
				},
				"PasswordHint": {
					"description": "A password hint to can provided by a customer to help them remember their password",
					"type": "string"
				}
			}
		},
		"UserLoginCreateRequest": {
			"description": "Information for requesting the creation of a new web user login.",
			"type": "object",
			"properties": {
				"Username": {
					"description": "The log in username.",
					"type": "string"
				},
				"AuthenticationGroupCode": {
					"description": "The authentication group for the user.  We recommend that you do not use blank authentication groups.  \r\nIf you need to use a blank authentication group for legacy data then pass the string \"blank\".",
					"type": "string"
				},
				"CustomerNumber": {
					"description": "The customer number of the customer for which this login is being created.",
					"type": "string"
				},
				"Password": {
					"description": "The log in password.",
					"type": "string"
				},
				"PasswordHint": {
					"description": "A password hint to can provided by a customer to help them remember their password",
					"type": "string"
				}
			}
		}
	},
	"securityDefinitions": {
		"basic": {
			"type": "basic",
			"description": "Basic HTTP Authentication"
		}
	}
}